
A0034 - Carnaval kleding REV E.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000218  00800100  0000300c  000030a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000300c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c8  00800318  00800318  000032b8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000032b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00003984  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00003a10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002689  00000000  00000000  00003b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a15  00000000  00000000  000061b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000114d  00000000  00000000  00006bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c4  00000000  00000000  00007d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008af  00000000  00000000  000083e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e8a  00000000  00000000  00008c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000bb19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e0       	ldi	r30, 0x0C	; 12
      7c:	f0 e3       	ldi	r31, 0x30	; 48
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 31       	cpi	r26, 0x18	; 24
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	13 e0       	ldi	r17, 0x03	; 3
      8c:	a8 e1       	ldi	r26, 0x18	; 24
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 3e       	cpi	r26, 0xE0	; 224
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 04 18 	jmp	0x3008	; 0x3008 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>

int main(void)
{

	init();
      a6:	0e 94 5e 00 	call	0xbc	; 0xbc <init>
 	WS2801_Update();
      aa:	0e 94 0d 06 	call	0xc1a	; 0xc1a <WS2801_Update>
	WS2811_Update();
      ae:	0e 94 42 13 	call	0x2684	; 0x2684 <WS2811_Update>
	
	
#ifdef LCD_TEST
	setup();
      b2:	0e 94 a3 04 	call	0x946	; 0x946 <setup>
	
	while(1)
    {
		
		#ifdef LCD_TEST
		LCDTest();
      b6:	0e 94 a8 04 	call	0x950	; 0x950 <LCDTest>
      ba:	fd cf       	rjmp	.-6      	; 0xb6 <main+0x10>

000000bc <init>:
 *  Author: Administrator
 */ 
#include "Initializations.h"

void init(void){
	WS2801[0] = 0x00;
      bc:	10 92 18 03 	sts	0x0318, r1
	//Init for WS2801 pins
	WS2801_DDR |= (1<<WS2801_PIN_CKI);
      c0:	57 9a       	sbi	0x0a, 7	; 10
	DDRB |= (1<<WS2801_PIN_SDI);
      c2:	20 9a       	sbi	0x04, 0	; 4
	WS2801_PORT &= ~(1<<WS2801_PIN_CKI);
      c4:	5f 98       	cbi	0x0b, 7	; 11
	PORTB &= ~(1<<WS2801_PIN_SDI);
      c6:	28 98       	cbi	0x05, 0	; 5
	//Init for WS2811 pins
	WS2811_DDR |= 1<<WS2811_PIN;
      c8:	55 9a       	sbi	0x0a, 5	; 10
	WS2811_PORT &= ~(1<<WS2811_PIN);
      ca:	5d 98       	cbi	0x0b, 5	; 11
	//Init for pushbuttons
	DDRC &= ~(0b00111111);
      cc:	87 b1       	in	r24, 0x07	; 7
      ce:	80 7c       	andi	r24, 0xC0	; 192
      d0:	87 b9       	out	0x07, r24	; 7
	//Init for samplingpins
	
      d2:	08 95       	ret

000000d4 <init_SPI>:

        /*  set the MOSI, SCK and SS line as output
                SS needs to be set as output if this controller
                is the only Master 
        */
        SPI_DDR |= (1<<MOSI) | (1<<SCK) | (1<<CS) | (1<<MISO);
      d4:	84 b1       	in	r24, 0x04	; 4
      d6:	8c 63       	ori	r24, 0x3C	; 60
      d8:	84 b9       	out	0x04, r24	; 4
		DDRD |= 1<<DC | 1<<RESET;
      da:	8a b1       	in	r24, 0x0a	; 10
      dc:	88 61       	ori	r24, 0x18	; 24
      de:	8a b9       	out	0x0a, r24	; 10
                SPR0 = sets SPI clock to F_CPU / 16
                
                Please refer to the controller's datasheet 
                for a complete description of all available config bits
        */
        SPCR |= (1<<SPE) | (1<<MSTR) | (1<<SPR0);  
      e0:	8c b5       	in	r24, 0x2c	; 44
      e2:	81 65       	ori	r24, 0x51	; 81
      e4:	8c bd       	out	0x2c, r24	; 44
		/*SPSR |= (1<<SPI2X);*/
		// | (1<<SPR0)     
}
      e6:	08 95       	ret

000000e8 <send_SPI>:

void send_SPI(uint8_t sData){
        CS_LOW;
      e8:	2a 98       	cbi	0x05, 2	; 5
        SPDR = sData;
      ea:	8e bd       	out	0x2e, r24	; 46
        while( !( SPSR & (1<<SPIF)) ){} // wait for end of transmission
      ec:	0d b4       	in	r0, 0x2d	; 45
      ee:	07 fe       	sbrs	r0, 7
      f0:	fd cf       	rjmp	.-6      	; 0xec <send_SPI+0x4>
		CS_HIGH;
      f2:	2a 9a       	sbi	0x05, 2	; 5
}
      f4:	08 95       	ret

000000f6 <LCD_Wr_C>:
 
void LCD_Wr_C(char VL)  
{   
  DC_LOW;
      f6:	5c 98       	cbi	0x0b, 4	; 11
  send_SPI(VL);
      f8:	0e 94 74 00 	call	0xe8	; 0xe8 <send_SPI>
}
      fc:	08 95       	ret

000000fe <LCD_Wr>:
 
void LCD_Wr(char VL)    
{
  DC_HIGH;
      fe:	5c 9a       	sbi	0x0b, 4	; 11
  send_SPI(VL);
     100:	0e 94 74 00 	call	0xe8	; 0xe8 <send_SPI>
}
     104:	08 95       	ret

00000106 <Address_set>:
 
void Address_set(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2)
{
     106:	cf 92       	push	r12
     108:	df 92       	push	r13
     10a:	ef 92       	push	r14
     10c:	ff 92       	push	r15
     10e:	0f 93       	push	r16
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	f8 2e       	mov	r15, r24
     118:	e9 2e       	mov	r14, r25
     11a:	c6 2f       	mov	r28, r22
     11c:	d7 2f       	mov	r29, r23
     11e:	14 2f       	mov	r17, r20
     120:	05 2f       	mov	r16, r21
     122:	c2 2e       	mov	r12, r18
     124:	d3 2e       	mov	r13, r19
   LCD_Wr_C(0x2a);
     126:	8a e2       	ldi	r24, 0x2A	; 42
     128:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
   LCD_Wr(x1>>8);
     12c:	8e 2d       	mov	r24, r14
     12e:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
   LCD_Wr(x1);
     132:	8f 2d       	mov	r24, r15
     134:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
   LCD_Wr(x2>>8);
     138:	80 2f       	mov	r24, r16
     13a:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
   LCD_Wr(x2);
     13e:	81 2f       	mov	r24, r17
     140:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
 
   LCD_Wr_C(0x2b);
     144:	8b e2       	ldi	r24, 0x2B	; 43
     146:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
   LCD_Wr(y1>>8);
     14a:	8d 2f       	mov	r24, r29
     14c:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
   LCD_Wr(y1);
     150:	8c 2f       	mov	r24, r28
     152:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
   LCD_Wr(y2>>8);
     156:	8d 2d       	mov	r24, r13
     158:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
   LCD_Wr(y2);
     15c:	8c 2d       	mov	r24, r12
     15e:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
 
   LCD_Wr_C(0x2C);         				 
     162:	8c e2       	ldi	r24, 0x2C	; 44
     164:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
}
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	df 90       	pop	r13
     176:	cf 90       	pop	r12
     178:	08 95       	ret

0000017a <Window>:
void MaxWindow(char RED, char GREEN, char BLUE)
{
	Window(0, 0, 240, 320, RED, GREEN, BLUE);
}

void Window(unsigned int xMin, unsigned int yMin, unsigned int xMax, unsigned int yMax, char wRED, char wGREEN, char wBLUE){
     17a:	4f 92       	push	r4
     17c:	5f 92       	push	r5
     17e:	6f 92       	push	r6
     180:	7f 92       	push	r7
     182:	9f 92       	push	r9
     184:	af 92       	push	r10
     186:	bf 92       	push	r11
     188:	cf 92       	push	r12
     18a:	df 92       	push	r13
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	98 2e       	mov	r9, r24
     19a:	d9 2e       	mov	r13, r25
     19c:	66 2e       	mov	r6, r22
     19e:	17 2f       	mov	r17, r23
     1a0:	2a 01       	movw	r4, r20
     1a2:	e9 01       	movw	r28, r18
     1a4:	f0 2e       	mov	r15, r16
	Address_set(xMin,yMin,xMax,yMax);
     1a6:	0e 94 83 00 	call	0x106	; 0x106 <Address_set>
	for(int i=yMin;i<yMax+1;i++)
     1aa:	a6 2c       	mov	r10, r6
     1ac:	b1 2e       	mov	r11, r17
     1ae:	3e 01       	movw	r6, r28
     1b0:	08 94       	sec
     1b2:	61 1c       	adc	r6, r1
     1b4:	71 1c       	adc	r7, r1
     1b6:	a6 14       	cp	r10, r6
     1b8:	b7 04       	cpc	r11, r7
     1ba:	d8 f4       	brcc	.+54     	; 0x1f2 <Window+0x78>
	{
		for (int j=xMin;j<xMax+1;j++)
     1bc:	82 01       	movw	r16, r4
     1be:	0f 5f       	subi	r16, 0xFF	; 255
     1c0:	1f 4f       	sbci	r17, 0xFF	; 255
     1c2:	c9 2d       	mov	r28, r9
     1c4:	dd 2d       	mov	r29, r13
     1c6:	c0 17       	cp	r28, r16
     1c8:	d1 07       	cpc	r29, r17
     1ca:	68 f4       	brcc	.+26     	; 0x1e6 <Window+0x6c>
		{
			LCD_Wr(wBLUE);
     1cc:	8c 2d       	mov	r24, r12
     1ce:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
			LCD_Wr(wGREEN);
     1d2:	8e 2d       	mov	r24, r14
     1d4:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
			LCD_Wr(wRED);
     1d8:	8f 2d       	mov	r24, r15
     1da:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>

void Window(unsigned int xMin, unsigned int yMin, unsigned int xMax, unsigned int yMax, char wRED, char wGREEN, char wBLUE){
	Address_set(xMin,yMin,xMax,yMax);
	for(int i=yMin;i<yMax+1;i++)
	{
		for (int j=xMin;j<xMax+1;j++)
     1de:	21 96       	adiw	r28, 0x01	; 1
     1e0:	c0 17       	cp	r28, r16
     1e2:	d1 07       	cpc	r29, r17
     1e4:	98 f3       	brcs	.-26     	; 0x1cc <Window+0x52>
	Window(0, 0, 240, 320, RED, GREEN, BLUE);
}

void Window(unsigned int xMin, unsigned int yMin, unsigned int xMax, unsigned int yMax, char wRED, char wGREEN, char wBLUE){
	Address_set(xMin,yMin,xMax,yMax);
	for(int i=yMin;i<yMax+1;i++)
     1e6:	08 94       	sec
     1e8:	a1 1c       	adc	r10, r1
     1ea:	b1 1c       	adc	r11, r1
     1ec:	a6 14       	cp	r10, r6
     1ee:	b7 04       	cpc	r11, r7
     1f0:	40 f3       	brcs	.-48     	; 0x1c2 <Window+0x48>
			LCD_Wr(wBLUE);
			LCD_Wr(wGREEN);
			LCD_Wr(wRED);
		}
	}
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	ff 90       	pop	r15
     1fc:	ef 90       	pop	r14
     1fe:	df 90       	pop	r13
     200:	cf 90       	pop	r12
     202:	bf 90       	pop	r11
     204:	af 90       	pop	r10
     206:	9f 90       	pop	r9
     208:	7f 90       	pop	r7
     20a:	6f 90       	pop	r6
     20c:	5f 90       	pop	r5
     20e:	4f 90       	pop	r4
     210:	08 95       	ret

00000212 <LCD_Init>:
   LCD_Wr_C(0x2C);         				 
}
 
void LCD_Init(void)
{
	init_SPI();
     212:	0e 94 6a 00 	call	0xd4	; 0xd4 <init_SPI>
 
    RESET_LOW;
     216:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     218:	8f ef       	ldi	r24, 0xFF	; 255
     21a:	91 ee       	ldi	r25, 0xE1	; 225
     21c:	a4 e0       	ldi	r26, 0x04	; 4
     21e:	81 50       	subi	r24, 0x01	; 1
     220:	90 40       	sbci	r25, 0x00	; 0
     222:	a0 40       	sbci	r26, 0x00	; 0
     224:	e1 f7       	brne	.-8      	; 0x21e <LCD_Init+0xc>
     226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_Init+0x16>
     228:	00 00       	nop
	_delay_ms(100);
	RESET_HIGH;
     22a:	5b 9a       	sbi	0x0b, 3	; 11
 
        LCD_Wr_C(0xCB);
     22c:	8b ec       	ldi	r24, 0xCB	; 203
     22e:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
        LCD_Wr(0x39);
     232:	89 e3       	ldi	r24, 0x39	; 57
     234:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Wr(0x2C);
     238:	8c e2       	ldi	r24, 0x2C	; 44
     23a:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Wr(0x00);
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Wr(0x34);
     244:	84 e3       	ldi	r24, 0x34	; 52
     246:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Wr(0x02);
     24a:	82 e0       	ldi	r24, 0x02	; 2
     24c:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        
        LCD_Wr_C(0xCF); // Power Control B
     250:	8f ec       	ldi	r24, 0xCF	; 207
     252:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
        LCD_Wr(0x00);
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Wr(0XC1);
     25c:	81 ec       	ldi	r24, 0xC1	; 193
     25e:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Wr(0X30);
     262:	80 e3       	ldi	r24, 0x30	; 48
     264:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        
        LCD_Wr_C(0xE8); // DRIVER_TIMING_CONTROL_A
     268:	88 ee       	ldi	r24, 0xE8	; 232
     26a:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
        LCD_Wr(0x85);
     26e:	85 e8       	ldi	r24, 0x85	; 133
     270:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Wr(0x00);
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Wr(0x78);
     27a:	88 e7       	ldi	r24, 0x78	; 120
     27c:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        
        LCD_Wr_C(0xEA); // DRIVER_TIMING_CONTROL_B
     280:	8a ee       	ldi	r24, 0xEA	; 234
     282:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
        LCD_Wr(0x00);
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Wr(0x00);
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        
        LCD_Wr_C(0xED);
     292:	8d ee       	ldi	r24, 0xED	; 237
     294:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
        LCD_Wr(0x64);
     298:	84 e6       	ldi	r24, 0x64	; 100
     29a:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Wr(0x03);
     29e:	83 e0       	ldi	r24, 0x03	; 3
     2a0:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Wr(0X12);
     2a4:	82 e1       	ldi	r24, 0x12	; 18
     2a6:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Wr(0X81);
     2aa:	81 e8       	ldi	r24, 0x81	; 129
     2ac:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        
        LCD_Wr_C(0xF7);
     2b0:	87 ef       	ldi	r24, 0xF7	; 247
     2b2:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
        LCD_Wr(0x20);
     2b6:	80 e2       	ldi	r24, 0x20	; 32
     2b8:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
 
        LCD_Wr_C(0xC0);    //Power control 
     2bc:	80 ec       	ldi	r24, 0xC0	; 192
     2be:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
        LCD_Wr(0x09);   //VRH[5:0] 3V3
     2c2:	89 e0       	ldi	r24, 0x09	; 9
     2c4:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
 
        LCD_Wr_C(0xC1);    //Power control 
     2c8:	81 ec       	ldi	r24, 0xC1	; 193
     2ca:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
        LCD_Wr(0x10);   //SAP[2:0];BT[3:0] 
     2ce:	80 e1       	ldi	r24, 0x10	; 16
     2d0:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
 
        LCD_Wr_C(0xC5);    //VCOM control 
     2d4:	85 ec       	ldi	r24, 0xC5	; 197
     2d6:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
        LCD_Wr(0x3e);   //Contrast
     2da:	8e e3       	ldi	r24, 0x3E	; 62
     2dc:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Wr(0x28); 
     2e0:	88 e2       	ldi	r24, 0x28	; 40
     2e2:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
 
        LCD_Wr_C(0xC7);    //VCOM control2 
     2e6:	87 ec       	ldi	r24, 0xC7	; 199
     2e8:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
        LCD_Wr(0x86);   //--
     2ec:	86 e8       	ldi	r24, 0x86	; 134
     2ee:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
 
        LCD_Wr_C(0x36);    // Memory Access Control 
     2f2:	86 e3       	ldi	r24, 0x36	; 54
     2f4:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
        LCD_Wr(0x48);   //C8	   //48 68???//28 E8 ???
     2f8:	88 e4       	ldi	r24, 0x48	; 72
     2fa:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
 
        LCD_Wr_C(0x3A);    // COLMOD: Pixel Format Set
     2fe:	8a e3       	ldi	r24, 0x3A	; 58
     300:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
        LCD_Wr(0x55); 
     304:	85 e5       	ldi	r24, 0x55	; 85
     306:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
 
        LCD_Wr_C(0xB1);    // Frame control
     30a:	81 eb       	ldi	r24, 0xB1	; 177
     30c:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
        LCD_Wr(0x00);  
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Wr(0x18); 
     316:	88 e1       	ldi	r24, 0x18	; 24
     318:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
 
        LCD_Wr_C(0xB6);    // Display Function Control 
     31c:	86 eb       	ldi	r24, 0xB6	; 182
     31e:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
        LCD_Wr(0x08); 
     322:	88 e0       	ldi	r24, 0x08	; 8
     324:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Wr(0x82);
     328:	82 e8       	ldi	r24, 0x82	; 130
     32a:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Wr(0x27);  
     32e:	87 e2       	ldi	r24, 0x27	; 39
     330:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Wr>
        LCD_Write_DATA(0x0C); 
        LCD_Write_DATA(0x31); 
        LCD_Write_DATA(0x36); 
        LCD_Write_DATA(0x0F); 
*/
        LCD_Wr_C(0x11);    //Exit Sleep 
     334:	81 e1       	ldi	r24, 0x11	; 17
     336:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	9b ed       	ldi	r25, 0xDB	; 219
     33e:	a5 e0       	ldi	r26, 0x05	; 5
     340:	81 50       	subi	r24, 0x01	; 1
     342:	90 40       	sbci	r25, 0x00	; 0
     344:	a0 40       	sbci	r26, 0x00	; 0
     346:	e1 f7       	brne	.-8      	; 0x340 <LCD_Init+0x12e>
     348:	00 c0       	rjmp	.+0      	; 0x34a <LCD_Init+0x138>
     34a:	00 00       	nop
        _delay_ms(120); 
 
        LCD_Wr_C(0x29);    //Display on 
     34c:	89 e2       	ldi	r24, 0x29	; 41
     34e:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
        LCD_Wr_C(0x2c);   
     352:	8c e2       	ldi	r24, 0x2C	; 44
     354:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Wr_C>
		
		
}
     358:	08 95       	ret

0000035a <MaxWindow>:
 
void MaxWindow(char RED, char GREEN, char BLUE)
{
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	08 2f       	mov	r16, r24
     368:	e6 2e       	mov	r14, r22
     36a:	c4 2e       	mov	r12, r20
	Window(0, 0, 240, 320, RED, GREEN, BLUE);
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	60 e0       	ldi	r22, 0x00	; 0
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	40 ef       	ldi	r20, 0xF0	; 240
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	20 e4       	ldi	r18, 0x40	; 64
     37a:	31 e0       	ldi	r19, 0x01	; 1
     37c:	10 e0       	ldi	r17, 0x00	; 0
     37e:	ff 24       	eor	r15, r15
     380:	dd 24       	eor	r13, r13
     382:	0e 94 bd 00 	call	0x17a	; 0x17a <Window>
}
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	ff 90       	pop	r15
     38c:	ef 90       	pop	r14
     38e:	df 90       	pop	r13
     390:	cf 90       	pop	r12
     392:	08 95       	ret

00000394 <CharEngine>:
			LCD_Wr(wRED);
		}
	}
}

void CharEngine(uint16_t TempCharacter[11], uint16_t xZero, uint16_t yZero){
     394:	2f 92       	push	r2
     396:	3f 92       	push	r3
     398:	4f 92       	push	r4
     39a:	5f 92       	push	r5
     39c:	6f 92       	push	r6
     39e:	7f 92       	push	r7
     3a0:	8f 92       	push	r8
     3a2:	9f 92       	push	r9
     3a4:	af 92       	push	r10
     3a6:	bf 92       	push	r11
     3a8:	cf 92       	push	r12
     3aa:	ef 92       	push	r14
     3ac:	0f 93       	push	r16
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <CharEngine+0x20>
     3b4:	00 d0       	rcall	.+0      	; 0x3b6 <CharEngine+0x22>
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	2b 01       	movw	r4, r22
     3bc:	5a 83       	std	Y+2, r21	; 0x02
     3be:	49 83       	std	Y+1, r20	; 0x01
     3c0:	88 2e       	mov	r8, r24
     3c2:	99 2e       	mov	r9, r25
     3c4:	22 24       	eor	r2, r2
     3c6:	33 24       	eor	r3, r3
			for (uint8_t i = 0; i<12; i++)
			{
				for (uint8_t j = 11; j>0; j--)
				{
					if (TempCharacter[i] & (1<<j))
     3c8:	aa 24       	eor	r10, r10
     3ca:	bb 24       	eor	r11, r11
     3cc:	a3 94       	inc	r10
     3ce:	20 c0       	rjmp	.+64     	; 0x410 <CharEngine+0x7c>
     3d0:	c5 01       	movw	r24, r10
     3d2:	0b 80       	ldd	r0, Y+3	; 0x03
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <CharEngine+0x46>
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	0a 94       	dec	r0
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <CharEngine+0x42>
     3de:	f4 01       	movw	r30, r8
     3e0:	20 81       	ld	r18, Z
     3e2:	31 81       	ldd	r19, Z+1	; 0x01
     3e4:	82 23       	and	r24, r18
     3e6:	93 23       	and	r25, r19
     3e8:	00 97       	sbiw	r24, 0x00	; 0
     3ea:	d9 f4       	brne	.+54     	; 0x422 <CharEngine+0x8e>
     3ec:	8b 81       	ldd	r24, Y+3	; 0x03
     3ee:	9c 81       	ldd	r25, Y+4	; 0x04
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	9c 83       	std	Y+4, r25	; 0x04
     3f4:	8b 83       	std	Y+3, r24	; 0x03
}

void CharEngine(uint16_t TempCharacter[11], uint16_t xZero, uint16_t yZero){
			for (uint8_t i = 0; i<12; i++)
			{
				for (uint8_t j = 11; j>0; j--)
     3f6:	00 97       	sbiw	r24, 0x00	; 0
     3f8:	59 f7       	brne	.-42     	; 0x3d0 <CharEngine+0x3c>
     3fa:	08 94       	sec
     3fc:	21 1c       	adc	r2, r1
     3fe:	31 1c       	adc	r3, r1
     400:	e2 e0       	ldi	r30, 0x02	; 2
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	8e 0e       	add	r8, r30
     406:	9f 1e       	adc	r9, r31
		}
	}
}

void CharEngine(uint16_t TempCharacter[11], uint16_t xZero, uint16_t yZero){
			for (uint8_t i = 0; i<12; i++)
     408:	fc e0       	ldi	r31, 0x0C	; 12
     40a:	2f 16       	cp	r2, r31
     40c:	31 04       	cpc	r3, r1
     40e:	b9 f0       	breq	.+46     	; 0x43e <CharEngine+0xaa>
			LCD_Wr(wRED);
		}
	}
}

void CharEngine(uint16_t TempCharacter[11], uint16_t xZero, uint16_t yZero){
     410:	8b e0       	ldi	r24, 0x0B	; 11
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	9c 83       	std	Y+4, r25	; 0x04
     416:	8b 83       	std	Y+3, r24	; 0x03
     418:	69 80       	ldd	r6, Y+1	; 0x01
     41a:	7a 80       	ldd	r7, Y+2	; 0x02
     41c:	62 18       	sub	r6, r2
     41e:	73 08       	sbc	r7, r3
     420:	d7 cf       	rjmp	.-82     	; 0x3d0 <CharEngine+0x3c>
     422:	a2 01       	movw	r20, r4
     424:	eb 81       	ldd	r30, Y+3	; 0x03
     426:	fc 81       	ldd	r31, Y+4	; 0x04
     428:	4e 1b       	sub	r20, r30
     42a:	5f 0b       	sbc	r21, r31
					{
						for (int16_t Maxwidth = WidthCharacters; Maxwidth>0; Maxwidth-=12)
						{
							uint16_t xTemp =xZero-j;
							uint16_t yTemp =yZero-i;
							Window(xTemp, yTemp, xTemp, yTemp, ColorCharactersBlack, ColorCharactersBlack, ColorCharactersBlack);
     42c:	ca 01       	movw	r24, r20
     42e:	b3 01       	movw	r22, r6
     430:	93 01       	movw	r18, r6
     432:	00 e0       	ldi	r16, 0x00	; 0
     434:	ee 24       	eor	r14, r14
     436:	cc 24       	eor	r12, r12
     438:	0e 94 bd 00 	call	0x17a	; 0x17a <Window>
     43c:	d7 cf       	rjmp	.-82     	; 0x3ec <CharEngine+0x58>
						}
					}
				}
			}
}
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	0f 91       	pop	r16
     44c:	ef 90       	pop	r14
     44e:	cf 90       	pop	r12
     450:	bf 90       	pop	r11
     452:	af 90       	pop	r10
     454:	9f 90       	pop	r9
     456:	8f 90       	pop	r8
     458:	7f 90       	pop	r7
     45a:	6f 90       	pop	r6
     45c:	5f 90       	pop	r5
     45e:	4f 90       	pop	r4
     460:	3f 90       	pop	r3
     462:	2f 90       	pop	r2
     464:	08 95       	ret

00000466 <CharacterWrite>:

void CharacterWrite(uint8_t Character, uint8_t NumberTile){
     466:	0f 93       	push	r16
     468:	1f 93       	push	r17
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
	uint16_t xMinTile;
	uint16_t xMaxTile;
	uint16_t yMinTile;
	uint16_t yMaxTile;
	
	if (NumberTile == Tile_1){
     46e:	61 30       	cpi	r22, 0x01	; 1
     470:	89 f4       	brne	.+34     	; 0x494 <CharacterWrite+0x2e>
		xMinTile = Tile_1_Dimensions[0];
     472:	20 91 0e 02 	lds	r18, 0x020E
     476:	30 91 0f 02 	lds	r19, 0x020F
		yMinTile = Tile_1_Dimensions[1];
     47a:	e0 91 10 02 	lds	r30, 0x0210
     47e:	f0 91 11 02 	lds	r31, 0x0211
		xMaxTile = Tile_1_Dimensions[2];
     482:	40 91 12 02 	lds	r20, 0x0212
     486:	50 91 13 02 	lds	r21, 0x0213
		yMaxTile = Tile_1_Dimensions[3];
     48a:	a0 91 14 02 	lds	r26, 0x0214
     48e:	b0 91 15 02 	lds	r27, 0x0215
     492:	5e c0       	rjmp	.+188    	; 0x550 <CharacterWrite+0xea>
		
	}
	else if (NumberTile == Tile_2){
     494:	62 30       	cpi	r22, 0x02	; 2
     496:	89 f4       	brne	.+34     	; 0x4ba <CharacterWrite+0x54>
		xMinTile = Tile_2_Dimensions[0];
     498:	20 91 05 02 	lds	r18, 0x0205
     49c:	30 91 06 02 	lds	r19, 0x0206
		yMinTile = Tile_2_Dimensions[1];
     4a0:	e0 91 07 02 	lds	r30, 0x0207
     4a4:	f0 91 08 02 	lds	r31, 0x0208
		xMaxTile = Tile_2_Dimensions[2];
     4a8:	40 91 09 02 	lds	r20, 0x0209
     4ac:	50 91 0a 02 	lds	r21, 0x020A
		yMaxTile = Tile_2_Dimensions[3];
     4b0:	a0 91 0b 02 	lds	r26, 0x020B
     4b4:	b0 91 0c 02 	lds	r27, 0x020C
     4b8:	4b c0       	rjmp	.+150    	; 0x550 <CharacterWrite+0xea>
	}		
	else if (NumberTile == Tile_3){
     4ba:	63 30       	cpi	r22, 0x03	; 3
     4bc:	89 f4       	brne	.+34     	; 0x4e0 <CharacterWrite+0x7a>
		xMinTile = Tile_3_Dimensions[0];
     4be:	20 91 fc 01 	lds	r18, 0x01FC
     4c2:	30 91 fd 01 	lds	r19, 0x01FD
		yMinTile = Tile_3_Dimensions[1];
     4c6:	e0 91 fe 01 	lds	r30, 0x01FE
     4ca:	f0 91 ff 01 	lds	r31, 0x01FF
		xMaxTile = Tile_3_Dimensions[2];
     4ce:	40 91 00 02 	lds	r20, 0x0200
     4d2:	50 91 01 02 	lds	r21, 0x0201
		yMaxTile = Tile_3_Dimensions[3];
     4d6:	a0 91 02 02 	lds	r26, 0x0202
     4da:	b0 91 03 02 	lds	r27, 0x0203
     4de:	38 c0       	rjmp	.+112    	; 0x550 <CharacterWrite+0xea>
	}
	else if (NumberTile == Tile_4){
     4e0:	64 30       	cpi	r22, 0x04	; 4
     4e2:	89 f4       	brne	.+34     	; 0x506 <CharacterWrite+0xa0>
		xMinTile = Tile_4_Dimensions[0];
     4e4:	20 91 f3 01 	lds	r18, 0x01F3
     4e8:	30 91 f4 01 	lds	r19, 0x01F4
		yMinTile = Tile_4_Dimensions[1];
     4ec:	e0 91 f5 01 	lds	r30, 0x01F5
     4f0:	f0 91 f6 01 	lds	r31, 0x01F6
		xMaxTile = Tile_4_Dimensions[2];
     4f4:	40 91 f7 01 	lds	r20, 0x01F7
     4f8:	50 91 f8 01 	lds	r21, 0x01F8
		yMaxTile = Tile_4_Dimensions[3];
     4fc:	a0 91 f9 01 	lds	r26, 0x01F9
     500:	b0 91 fa 01 	lds	r27, 0x01FA
     504:	25 c0       	rjmp	.+74     	; 0x550 <CharacterWrite+0xea>
	}
	else if (NumberTile == Tile_5){
     506:	65 30       	cpi	r22, 0x05	; 5
     508:	89 f4       	brne	.+34     	; 0x52c <CharacterWrite+0xc6>
		xMinTile = Tile_5_Dimensions[0];
     50a:	20 91 ea 01 	lds	r18, 0x01EA
     50e:	30 91 eb 01 	lds	r19, 0x01EB
		yMinTile = Tile_5_Dimensions[1];
     512:	e0 91 ec 01 	lds	r30, 0x01EC
     516:	f0 91 ed 01 	lds	r31, 0x01ED
		xMaxTile = Tile_5_Dimensions[2];
     51a:	40 91 ee 01 	lds	r20, 0x01EE
     51e:	50 91 ef 01 	lds	r21, 0x01EF
		yMaxTile = Tile_5_Dimensions[3];
     522:	a0 91 f0 01 	lds	r26, 0x01F0
     526:	b0 91 f1 01 	lds	r27, 0x01F1
     52a:	12 c0       	rjmp	.+36     	; 0x550 <CharacterWrite+0xea>
	}
	else if (NumberTile == Tile_6){
     52c:	66 30       	cpi	r22, 0x06	; 6
     52e:	81 f4       	brne	.+32     	; 0x550 <CharacterWrite+0xea>
		xMinTile = Tile_6_Dimensions[0];
     530:	20 91 e1 01 	lds	r18, 0x01E1
     534:	30 91 e2 01 	lds	r19, 0x01E2
		yMinTile = Tile_6_Dimensions[1];
     538:	e0 91 e3 01 	lds	r30, 0x01E3
     53c:	f0 91 e4 01 	lds	r31, 0x01E4
		xMaxTile = Tile_6_Dimensions[2];
     540:	40 91 e5 01 	lds	r20, 0x01E5
     544:	50 91 e6 01 	lds	r21, 0x01E6
		yMaxTile = Tile_6_Dimensions[3];
     548:	a0 91 e7 01 	lds	r26, 0x01E7
     54c:	b0 91 e8 01 	lds	r27, 0x01E8
	}
	
	
	if (Character == CharTileOne){
     550:	81 30       	cpi	r24, 0x01	; 1
     552:	89 f4       	brne	.+34     	; 0x576 <CharacterWrite+0x110>
		CharEngine(Char_1, (xMinTile+((xMaxTile-xMinTile)/2)+(WidthCharacters/2)), (yMaxTile-HeightCharacters*2));
     554:	c9 01       	movw	r24, r18
     556:	06 96       	adiw	r24, 0x06	; 6
     558:	42 1b       	sub	r20, r18
     55a:	53 0b       	sbc	r21, r19
     55c:	ba 01       	movw	r22, r20
     55e:	76 95       	lsr	r23
     560:	67 95       	ror	r22
     562:	68 0f       	add	r22, r24
     564:	79 1f       	adc	r23, r25
     566:	ad 01       	movw	r20, r26
     568:	48 51       	subi	r20, 0x18	; 24
     56a:	50 40       	sbci	r21, 0x00	; 0
     56c:	80 ec       	ldi	r24, 0xC0	; 192
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 ca 01 	call	0x394	; 0x394 <CharEngine>
     574:	9e c0       	rjmp	.+316    	; 0x6b2 <CharacterWrite+0x24c>
	}
	else if (Character == CharTileTwo){
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	89 f4       	brne	.+34     	; 0x59c <CharacterWrite+0x136>
		CharEngine(Char_2, (xMinTile+((xMaxTile-xMinTile)/2)+(WidthCharacters/2)), (yMaxTile-HeightCharacters*2));
     57a:	c9 01       	movw	r24, r18
     57c:	06 96       	adiw	r24, 0x06	; 6
     57e:	42 1b       	sub	r20, r18
     580:	53 0b       	sbc	r21, r19
     582:	ba 01       	movw	r22, r20
     584:	76 95       	lsr	r23
     586:	67 95       	ror	r22
     588:	68 0f       	add	r22, r24
     58a:	79 1f       	adc	r23, r25
     58c:	ad 01       	movw	r20, r26
     58e:	48 51       	subi	r20, 0x18	; 24
     590:	50 40       	sbci	r21, 0x00	; 0
     592:	88 ea       	ldi	r24, 0xA8	; 168
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	0e 94 ca 01 	call	0x394	; 0x394 <CharEngine>
     59a:	8b c0       	rjmp	.+278    	; 0x6b2 <CharacterWrite+0x24c>
	}
	else if (Character == CharTileThree){
     59c:	83 30       	cpi	r24, 0x03	; 3
     59e:	89 f4       	brne	.+34     	; 0x5c2 <CharacterWrite+0x15c>
		CharEngine(Char_3, (xMinTile+((xMaxTile-xMinTile)/2)+(WidthCharacters/2)), (yMaxTile-HeightCharacters*2));
     5a0:	c9 01       	movw	r24, r18
     5a2:	06 96       	adiw	r24, 0x06	; 6
     5a4:	42 1b       	sub	r20, r18
     5a6:	53 0b       	sbc	r21, r19
     5a8:	ba 01       	movw	r22, r20
     5aa:	76 95       	lsr	r23
     5ac:	67 95       	ror	r22
     5ae:	68 0f       	add	r22, r24
     5b0:	79 1f       	adc	r23, r25
     5b2:	ad 01       	movw	r20, r26
     5b4:	48 51       	subi	r20, 0x18	; 24
     5b6:	50 40       	sbci	r21, 0x00	; 0
     5b8:	80 e9       	ldi	r24, 0x90	; 144
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 ca 01 	call	0x394	; 0x394 <CharEngine>
     5c0:	78 c0       	rjmp	.+240    	; 0x6b2 <CharacterWrite+0x24c>
	}
	else if (Character == CharTileFour){
     5c2:	84 30       	cpi	r24, 0x04	; 4
     5c4:	89 f4       	brne	.+34     	; 0x5e8 <CharacterWrite+0x182>
		CharEngine(Char_4, (xMinTile+((xMaxTile-xMinTile)/2)+(WidthCharacters/2)), (yMaxTile-HeightCharacters*2));
     5c6:	c9 01       	movw	r24, r18
     5c8:	06 96       	adiw	r24, 0x06	; 6
     5ca:	42 1b       	sub	r20, r18
     5cc:	53 0b       	sbc	r21, r19
     5ce:	ba 01       	movw	r22, r20
     5d0:	76 95       	lsr	r23
     5d2:	67 95       	ror	r22
     5d4:	68 0f       	add	r22, r24
     5d6:	79 1f       	adc	r23, r25
     5d8:	ad 01       	movw	r20, r26
     5da:	48 51       	subi	r20, 0x18	; 24
     5dc:	50 40       	sbci	r21, 0x00	; 0
     5de:	88 e7       	ldi	r24, 0x78	; 120
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 ca 01 	call	0x394	; 0x394 <CharEngine>
     5e6:	65 c0       	rjmp	.+202    	; 0x6b2 <CharacterWrite+0x24c>
	}
	else if (Character == CharTileFive){
     5e8:	85 30       	cpi	r24, 0x05	; 5
     5ea:	89 f4       	brne	.+34     	; 0x60e <CharacterWrite+0x1a8>
		CharEngine(Char_5, (xMinTile+((xMaxTile-xMinTile)/2)+(WidthCharacters/2)), (yMaxTile-HeightCharacters*2));
     5ec:	c9 01       	movw	r24, r18
     5ee:	06 96       	adiw	r24, 0x06	; 6
     5f0:	42 1b       	sub	r20, r18
     5f2:	53 0b       	sbc	r21, r19
     5f4:	ba 01       	movw	r22, r20
     5f6:	76 95       	lsr	r23
     5f8:	67 95       	ror	r22
     5fa:	68 0f       	add	r22, r24
     5fc:	79 1f       	adc	r23, r25
     5fe:	ad 01       	movw	r20, r26
     600:	48 51       	subi	r20, 0x18	; 24
     602:	50 40       	sbci	r21, 0x00	; 0
     604:	80 e6       	ldi	r24, 0x60	; 96
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	0e 94 ca 01 	call	0x394	; 0x394 <CharEngine>
     60c:	52 c0       	rjmp	.+164    	; 0x6b2 <CharacterWrite+0x24c>
	}
	else if (Character == CharTileSix){
     60e:	86 30       	cpi	r24, 0x06	; 6
     610:	89 f4       	brne	.+34     	; 0x634 <CharacterWrite+0x1ce>
		CharEngine(Char_6, (xMinTile+((xMaxTile-xMinTile)/2)+(WidthCharacters/2)), (yMaxTile-HeightCharacters*2));
     612:	c9 01       	movw	r24, r18
     614:	06 96       	adiw	r24, 0x06	; 6
     616:	42 1b       	sub	r20, r18
     618:	53 0b       	sbc	r21, r19
     61a:	ba 01       	movw	r22, r20
     61c:	76 95       	lsr	r23
     61e:	67 95       	ror	r22
     620:	68 0f       	add	r22, r24
     622:	79 1f       	adc	r23, r25
     624:	ad 01       	movw	r20, r26
     626:	48 51       	subi	r20, 0x18	; 24
     628:	50 40       	sbci	r21, 0x00	; 0
     62a:	88 e4       	ldi	r24, 0x48	; 72
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	0e 94 ca 01 	call	0x394	; 0x394 <CharEngine>
     632:	3f c0       	rjmp	.+126    	; 0x6b2 <CharacterWrite+0x24c>
	}
	else if (Character == CharStateIdle){
     634:	87 30       	cpi	r24, 0x07	; 7
     636:	e9 f1       	breq	.+122    	; 0x6b2 <CharacterWrite+0x24c>
		
	}
	else if (Character == CharStateGood){
     638:	88 30       	cpi	r24, 0x08	; 8
     63a:	c1 f4       	brne	.+48     	; 0x66c <CharacterWrite+0x206>
		CharEngine(Char_O, xMinTile+((xMaxTile-xMinTile)/2), (yMinTile+HeightCharacters*2));
     63c:	42 1b       	sub	r20, r18
     63e:	53 0b       	sbc	r21, r19
     640:	8a 01       	movw	r16, r20
     642:	16 95       	lsr	r17
     644:	07 95       	ror	r16
     646:	02 0f       	add	r16, r18
     648:	13 1f       	adc	r17, r19
     64a:	ef 01       	movw	r28, r30
     64c:	68 96       	adiw	r28, 0x18	; 24
     64e:	80 e3       	ldi	r24, 0x30	; 48
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	b8 01       	movw	r22, r16
     654:	ae 01       	movw	r20, r28
     656:	0e 94 ca 01 	call	0x394	; 0x394 <CharEngine>
		CharEngine(Char_K, xMinTile+((xMaxTile-xMinTile)/2)+(WidthCharacters), (yMinTile+HeightCharacters*2));
     65a:	b8 01       	movw	r22, r16
     65c:	64 5f       	subi	r22, 0xF4	; 244
     65e:	7f 4f       	sbci	r23, 0xFF	; 255
     660:	88 e1       	ldi	r24, 0x18	; 24
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	ae 01       	movw	r20, r28
     666:	0e 94 ca 01 	call	0x394	; 0x394 <CharEngine>
     66a:	23 c0       	rjmp	.+70     	; 0x6b2 <CharacterWrite+0x24c>
	}
	else if (Character == CharStateBad){
     66c:	89 30       	cpi	r24, 0x09	; 9
     66e:	09 f5       	brne	.+66     	; 0x6b2 <CharacterWrite+0x24c>
		CharEngine(Char_N, xMinTile+((xMaxTile-xMinTile)/2)-(WidthCharacters/2), (yMinTile+HeightCharacters*2));
     670:	42 1b       	sub	r20, r18
     672:	53 0b       	sbc	r21, r19
     674:	8a 01       	movw	r16, r20
     676:	16 95       	lsr	r17
     678:	07 95       	ror	r16
     67a:	02 0f       	add	r16, r18
     67c:	13 1f       	adc	r17, r19
     67e:	ef 01       	movw	r28, r30
     680:	68 96       	adiw	r28, 0x18	; 24
     682:	b8 01       	movw	r22, r16
     684:	66 50       	subi	r22, 0x06	; 6
     686:	70 40       	sbci	r23, 0x00	; 0
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	ae 01       	movw	r20, r28
     68e:	0e 94 ca 01 	call	0x394	; 0x394 <CharEngine>
		CharEngine(Char_O, xMinTile+((xMaxTile-xMinTile)/2)+(WidthCharacters/2), (yMinTile+HeightCharacters*2));
     692:	b8 01       	movw	r22, r16
     694:	6a 5f       	subi	r22, 0xFA	; 250
     696:	7f 4f       	sbci	r23, 0xFF	; 255
     698:	80 e3       	ldi	r24, 0x30	; 48
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	ae 01       	movw	r20, r28
     69e:	0e 94 ca 01 	call	0x394	; 0x394 <CharEngine>
		CharEngine(Char_K, xMinTile+((xMaxTile-xMinTile)/2)+(WidthCharacters)+(WidthCharacters/2), (yMinTile+HeightCharacters*2));
     6a2:	b8 01       	movw	r22, r16
     6a4:	6e 5e       	subi	r22, 0xEE	; 238
     6a6:	7f 4f       	sbci	r23, 0xFF	; 255
     6a8:	88 e1       	ldi	r24, 0x18	; 24
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	ae 01       	movw	r20, r28
     6ae:	0e 94 ca 01 	call	0x394	; 0x394 <CharEngine>
	}
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	08 95       	ret

000006bc <WriteTile>:

void WriteTile(uint8_t TileNumber, uint8_t TileState){
     6bc:	cf 92       	push	r12
     6be:	ef 92       	push	r14
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	c8 2f       	mov	r28, r24
	uint8_t Color_TilebackgroundG = 0;
	uint8_t Color_TilebackgroundB = 0;
	uint8_t ChosenCharacterState = 0;
	uint8_t PreviousTileState = 0;
	
	if (TileNumber == Tile_1){
     6ca:	81 30       	cpi	r24, 0x01	; 1
     6cc:	49 f4       	brne	.+18     	; 0x6e0 <WriteTile+0x24>
void WriteTile(uint8_t TileNumber, uint8_t TileState){
	uint8_t Color_TilebackgroundR = 0;
	uint8_t Color_TilebackgroundG = 0;
	uint8_t Color_TilebackgroundB = 0;
	uint8_t ChosenCharacterState = 0;
	uint8_t PreviousTileState = 0;
     6ce:	e1 e0       	ldi	r30, 0x01	; 1
     6d0:	80 91 16 02 	lds	r24, 0x0216
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	09 f4       	brne	.+2      	; 0x6da <WriteTile+0x1e>
     6d8:	e0 e0       	ldi	r30, 0x00	; 0
	
	if (TileNumber == Tile_1){
		if (Tile_1_State != State_Idle){
			PreviousTileState = 1;
		}
		Tile_1_State = TileState;
     6da:	60 93 16 02 	sts	0x0216, r22
     6de:	38 c0       	rjmp	.+112    	; 0x750 <WriteTile+0x94>
	}
	else if (TileNumber == Tile_2){
     6e0:	82 30       	cpi	r24, 0x02	; 2
     6e2:	49 f4       	brne	.+18     	; 0x6f6 <WriteTile+0x3a>
void WriteTile(uint8_t TileNumber, uint8_t TileState){
	uint8_t Color_TilebackgroundR = 0;
	uint8_t Color_TilebackgroundG = 0;
	uint8_t Color_TilebackgroundB = 0;
	uint8_t ChosenCharacterState = 0;
	uint8_t PreviousTileState = 0;
     6e4:	e1 e0       	ldi	r30, 0x01	; 1
     6e6:	80 91 0d 02 	lds	r24, 0x020D
     6ea:	81 30       	cpi	r24, 0x01	; 1
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <WriteTile+0x34>
     6ee:	e0 e0       	ldi	r30, 0x00	; 0
	}
	else if (TileNumber == Tile_2){
		if (Tile_2_State != State_Idle){
			PreviousTileState = 1;
		}
		Tile_2_State = TileState;
     6f0:	60 93 0d 02 	sts	0x020D, r22
     6f4:	2d c0       	rjmp	.+90     	; 0x750 <WriteTile+0x94>
	}
	else if (TileNumber == Tile_3){
     6f6:	83 30       	cpi	r24, 0x03	; 3
     6f8:	49 f4       	brne	.+18     	; 0x70c <WriteTile+0x50>
void WriteTile(uint8_t TileNumber, uint8_t TileState){
	uint8_t Color_TilebackgroundR = 0;
	uint8_t Color_TilebackgroundG = 0;
	uint8_t Color_TilebackgroundB = 0;
	uint8_t ChosenCharacterState = 0;
	uint8_t PreviousTileState = 0;
     6fa:	e1 e0       	ldi	r30, 0x01	; 1
     6fc:	80 91 04 02 	lds	r24, 0x0204
     700:	81 30       	cpi	r24, 0x01	; 1
     702:	09 f4       	brne	.+2      	; 0x706 <WriteTile+0x4a>
     704:	e0 e0       	ldi	r30, 0x00	; 0
	}
	else if (TileNumber == Tile_3){
		if (Tile_3_State != State_Idle){
			PreviousTileState = 1;
		}
		Tile_3_State = TileState;
     706:	60 93 04 02 	sts	0x0204, r22
     70a:	22 c0       	rjmp	.+68     	; 0x750 <WriteTile+0x94>
	}
	else if (TileNumber == Tile_4){
     70c:	84 30       	cpi	r24, 0x04	; 4
     70e:	49 f4       	brne	.+18     	; 0x722 <WriteTile+0x66>
void WriteTile(uint8_t TileNumber, uint8_t TileState){
	uint8_t Color_TilebackgroundR = 0;
	uint8_t Color_TilebackgroundG = 0;
	uint8_t Color_TilebackgroundB = 0;
	uint8_t ChosenCharacterState = 0;
	uint8_t PreviousTileState = 0;
     710:	e1 e0       	ldi	r30, 0x01	; 1
     712:	80 91 fb 01 	lds	r24, 0x01FB
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	09 f4       	brne	.+2      	; 0x71c <WriteTile+0x60>
     71a:	e0 e0       	ldi	r30, 0x00	; 0
	}
	else if (TileNumber == Tile_4){
		if (Tile_4_State != State_Idle){
			PreviousTileState = 1;
		}
		Tile_4_State = TileState;
     71c:	60 93 fb 01 	sts	0x01FB, r22
     720:	17 c0       	rjmp	.+46     	; 0x750 <WriteTile+0x94>
	}
	else if (TileNumber == Tile_5){
     722:	85 30       	cpi	r24, 0x05	; 5
     724:	49 f4       	brne	.+18     	; 0x738 <WriteTile+0x7c>
void WriteTile(uint8_t TileNumber, uint8_t TileState){
	uint8_t Color_TilebackgroundR = 0;
	uint8_t Color_TilebackgroundG = 0;
	uint8_t Color_TilebackgroundB = 0;
	uint8_t ChosenCharacterState = 0;
	uint8_t PreviousTileState = 0;
     726:	e1 e0       	ldi	r30, 0x01	; 1
     728:	80 91 f2 01 	lds	r24, 0x01F2
     72c:	81 30       	cpi	r24, 0x01	; 1
     72e:	09 f4       	brne	.+2      	; 0x732 <WriteTile+0x76>
     730:	e0 e0       	ldi	r30, 0x00	; 0
	}
	else if (TileNumber == Tile_5){
		if (Tile_5_State != State_Idle){
			PreviousTileState = 1;
		}
		Tile_5_State = TileState;
     732:	60 93 f2 01 	sts	0x01F2, r22
     736:	0c c0       	rjmp	.+24     	; 0x750 <WriteTile+0x94>
	}
	else if (TileNumber == Tile_6){
     738:	86 30       	cpi	r24, 0x06	; 6
     73a:	49 f4       	brne	.+18     	; 0x74e <WriteTile+0x92>
void WriteTile(uint8_t TileNumber, uint8_t TileState){
	uint8_t Color_TilebackgroundR = 0;
	uint8_t Color_TilebackgroundG = 0;
	uint8_t Color_TilebackgroundB = 0;
	uint8_t ChosenCharacterState = 0;
	uint8_t PreviousTileState = 0;
     73c:	e1 e0       	ldi	r30, 0x01	; 1
     73e:	80 91 e9 01 	lds	r24, 0x01E9
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	09 f4       	brne	.+2      	; 0x748 <WriteTile+0x8c>
     746:	e0 e0       	ldi	r30, 0x00	; 0
	}
	else if (TileNumber == Tile_6){
		if (Tile_6_State != State_Idle){
			PreviousTileState = 1;
		}
		Tile_6_State = TileState;
     748:	60 93 e9 01 	sts	0x01E9, r22
     74c:	01 c0       	rjmp	.+2      	; 0x750 <WriteTile+0x94>
void WriteTile(uint8_t TileNumber, uint8_t TileState){
	uint8_t Color_TilebackgroundR = 0;
	uint8_t Color_TilebackgroundG = 0;
	uint8_t Color_TilebackgroundB = 0;
	uint8_t ChosenCharacterState = 0;
	uint8_t PreviousTileState = 0;
     74e:	e0 e0       	ldi	r30, 0x00	; 0
		}
		Tile_6_State = TileState;
	}
	
	
	if (TileState == State_Idle)
     750:	61 30       	cpi	r22, 0x01	; 1
     752:	41 f4       	brne	.+16     	; 0x764 <WriteTile+0xa8>
	{
		Color_TilebackgroundR = TileColor_Idle[0];
     754:	00 91 de 01 	lds	r16, 0x01DE
		Color_TilebackgroundG = TileColor_Idle[1];
     758:	e0 90 df 01 	lds	r14, 0x01DF
		Color_TilebackgroundB = TileColor_Idle[2];
     75c:	c0 90 e0 01 	lds	r12, 0x01E0
		ChosenCharacterState = CharStateIdle;
     760:	d7 e0       	ldi	r29, 0x07	; 7
     762:	18 c0       	rjmp	.+48     	; 0x794 <WriteTile+0xd8>
	}
	else if (TileState == State_Good)
     764:	62 30       	cpi	r22, 0x02	; 2
     766:	41 f4       	brne	.+16     	; 0x778 <WriteTile+0xbc>
	{
		Color_TilebackgroundR = TileColor_Good[0];
     768:	00 91 d8 01 	lds	r16, 0x01D8
		Color_TilebackgroundG = TileColor_Good[1];
     76c:	e0 90 d9 01 	lds	r14, 0x01D9
		Color_TilebackgroundB = TileColor_Good[2];
     770:	c0 90 da 01 	lds	r12, 0x01DA
		ChosenCharacterState = CharStateGood;
     774:	d8 e0       	ldi	r29, 0x08	; 8
     776:	0e c0       	rjmp	.+28     	; 0x794 <WriteTile+0xd8>
	}
	else if (TileState == State_Bad)
     778:	63 30       	cpi	r22, 0x03	; 3
     77a:	41 f4       	brne	.+16     	; 0x78c <WriteTile+0xd0>
	{
		Color_TilebackgroundR = TileColor_Bad[0];
     77c:	00 91 db 01 	lds	r16, 0x01DB
		Color_TilebackgroundG = TileColor_Bad[1];
     780:	e0 90 dc 01 	lds	r14, 0x01DC
		Color_TilebackgroundB = TileColor_Bad[2];
     784:	c0 90 dd 01 	lds	r12, 0x01DD
		ChosenCharacterState = CharStateBad;
     788:	d9 e0       	ldi	r29, 0x09	; 9
     78a:	04 c0       	rjmp	.+8      	; 0x794 <WriteTile+0xd8>

void WriteTile(uint8_t TileNumber, uint8_t TileState){
	uint8_t Color_TilebackgroundR = 0;
	uint8_t Color_TilebackgroundG = 0;
	uint8_t Color_TilebackgroundB = 0;
	uint8_t ChosenCharacterState = 0;
     78c:	d0 e0       	ldi	r29, 0x00	; 0
}

void WriteTile(uint8_t TileNumber, uint8_t TileState){
	uint8_t Color_TilebackgroundR = 0;
	uint8_t Color_TilebackgroundG = 0;
	uint8_t Color_TilebackgroundB = 0;
     78e:	cc 24       	eor	r12, r12
	}
}

void WriteTile(uint8_t TileNumber, uint8_t TileState){
	uint8_t Color_TilebackgroundR = 0;
	uint8_t Color_TilebackgroundG = 0;
     790:	ee 24       	eor	r14, r14
		CharEngine(Char_K, xMinTile+((xMaxTile-xMinTile)/2)+(WidthCharacters)+(WidthCharacters/2), (yMinTile+HeightCharacters*2));
	}
}

void WriteTile(uint8_t TileNumber, uint8_t TileState){
	uint8_t Color_TilebackgroundR = 0;
     792:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t ChosenCharacterTile = 0;
	
	uint16_t xCharacterTile = 0;
	uint16_t yCharacterTile = 0;
	
	if (TileNumber == Tile_1){
     794:	c1 30       	cpi	r28, 0x01	; 1
     796:	91 f4       	brne	.+36     	; 0x7bc <WriteTile+0x100>
		// Set position window
		Tile_xMin = Tile_1_Dimensions[0];
     798:	80 91 0e 02 	lds	r24, 0x020E
     79c:	90 91 0f 02 	lds	r25, 0x020F
		Tile_yMin = Tile_1_Dimensions[1];
     7a0:	60 91 10 02 	lds	r22, 0x0210
     7a4:	70 91 11 02 	lds	r23, 0x0211
		Tile_xMax = Tile_1_Dimensions[2];
     7a8:	40 91 12 02 	lds	r20, 0x0212
     7ac:	50 91 13 02 	lds	r21, 0x0213
		Tile_yMax = Tile_1_Dimensions[3];
     7b0:	20 91 14 02 	lds	r18, 0x0214
     7b4:	30 91 15 02 	lds	r19, 0x0215
		// Set character write
		ChosenCharacterTile = CharTileOne;
     7b8:	11 e0       	ldi	r17, 0x01	; 1
     7ba:	6d c0       	rjmp	.+218    	; 0x896 <WriteTile+0x1da>
	}
	else if (TileNumber == Tile_2){
     7bc:	c2 30       	cpi	r28, 0x02	; 2
     7be:	91 f4       	brne	.+36     	; 0x7e4 <WriteTile+0x128>
		// Set position window
		Tile_xMin = Tile_2_Dimensions[0];
     7c0:	80 91 05 02 	lds	r24, 0x0205
     7c4:	90 91 06 02 	lds	r25, 0x0206
		Tile_yMin = Tile_2_Dimensions[1];
     7c8:	60 91 07 02 	lds	r22, 0x0207
     7cc:	70 91 08 02 	lds	r23, 0x0208
		Tile_xMax = Tile_2_Dimensions[2];
     7d0:	40 91 09 02 	lds	r20, 0x0209
     7d4:	50 91 0a 02 	lds	r21, 0x020A
		Tile_yMax = Tile_2_Dimensions[3];
     7d8:	20 91 0b 02 	lds	r18, 0x020B
     7dc:	30 91 0c 02 	lds	r19, 0x020C
		// Set character write
		ChosenCharacterTile = CharTileTwo;
     7e0:	12 e0       	ldi	r17, 0x02	; 2
     7e2:	59 c0       	rjmp	.+178    	; 0x896 <WriteTile+0x1da>
	}
	else if (TileNumber == Tile_3){
     7e4:	c3 30       	cpi	r28, 0x03	; 3
     7e6:	91 f4       	brne	.+36     	; 0x80c <WriteTile+0x150>
		// Set position window
		Tile_xMin = Tile_3_Dimensions[0];
     7e8:	80 91 fc 01 	lds	r24, 0x01FC
     7ec:	90 91 fd 01 	lds	r25, 0x01FD
		Tile_yMin = Tile_3_Dimensions[1];
     7f0:	60 91 fe 01 	lds	r22, 0x01FE
     7f4:	70 91 ff 01 	lds	r23, 0x01FF
		Tile_xMax = Tile_3_Dimensions[2];
     7f8:	40 91 00 02 	lds	r20, 0x0200
     7fc:	50 91 01 02 	lds	r21, 0x0201
		Tile_yMax = Tile_3_Dimensions[3];
     800:	20 91 02 02 	lds	r18, 0x0202
     804:	30 91 03 02 	lds	r19, 0x0203
		// Set character write
		ChosenCharacterTile = CharTileThree;
     808:	13 e0       	ldi	r17, 0x03	; 3
     80a:	45 c0       	rjmp	.+138    	; 0x896 <WriteTile+0x1da>
	}
	else if (TileNumber == Tile_4){
     80c:	c4 30       	cpi	r28, 0x04	; 4
     80e:	91 f4       	brne	.+36     	; 0x834 <WriteTile+0x178>
		// Set position window
		Tile_xMin = Tile_4_Dimensions[0];
     810:	80 91 f3 01 	lds	r24, 0x01F3
     814:	90 91 f4 01 	lds	r25, 0x01F4
		Tile_yMin = Tile_4_Dimensions[1];
     818:	60 91 f5 01 	lds	r22, 0x01F5
     81c:	70 91 f6 01 	lds	r23, 0x01F6
		Tile_xMax = Tile_4_Dimensions[2];
     820:	40 91 f7 01 	lds	r20, 0x01F7
     824:	50 91 f8 01 	lds	r21, 0x01F8
		Tile_yMax = Tile_4_Dimensions[3];
     828:	20 91 f9 01 	lds	r18, 0x01F9
     82c:	30 91 fa 01 	lds	r19, 0x01FA
		// Set character write
		ChosenCharacterTile = CharTileFour;
     830:	14 e0       	ldi	r17, 0x04	; 4
     832:	31 c0       	rjmp	.+98     	; 0x896 <WriteTile+0x1da>
	}
	else if (TileNumber == Tile_5){
     834:	c5 30       	cpi	r28, 0x05	; 5
     836:	91 f4       	brne	.+36     	; 0x85c <WriteTile+0x1a0>
		// Set position window
		Tile_xMin = Tile_5_Dimensions[0];
     838:	80 91 ea 01 	lds	r24, 0x01EA
     83c:	90 91 eb 01 	lds	r25, 0x01EB
		Tile_yMin = Tile_5_Dimensions[1];
     840:	60 91 ec 01 	lds	r22, 0x01EC
     844:	70 91 ed 01 	lds	r23, 0x01ED
		Tile_xMax = Tile_5_Dimensions[2];
     848:	40 91 ee 01 	lds	r20, 0x01EE
     84c:	50 91 ef 01 	lds	r21, 0x01EF
		Tile_yMax = Tile_5_Dimensions[3];
     850:	20 91 f0 01 	lds	r18, 0x01F0
     854:	30 91 f1 01 	lds	r19, 0x01F1
		// Set character write
		ChosenCharacterTile = CharTileFive;
     858:	15 e0       	ldi	r17, 0x05	; 5
     85a:	1d c0       	rjmp	.+58     	; 0x896 <WriteTile+0x1da>
	}
	else if (TileNumber == Tile_6){
     85c:	c6 30       	cpi	r28, 0x06	; 6
     85e:	91 f4       	brne	.+36     	; 0x884 <WriteTile+0x1c8>
		// Set position window
		Tile_xMin = Tile_6_Dimensions[0];
     860:	80 91 e1 01 	lds	r24, 0x01E1
     864:	90 91 e2 01 	lds	r25, 0x01E2
		Tile_yMin = Tile_6_Dimensions[1];
     868:	60 91 e3 01 	lds	r22, 0x01E3
     86c:	70 91 e4 01 	lds	r23, 0x01E4
		Tile_xMax = Tile_6_Dimensions[2];
     870:	40 91 e5 01 	lds	r20, 0x01E5
     874:	50 91 e6 01 	lds	r21, 0x01E6
		Tile_yMax = Tile_6_Dimensions[3];
     878:	20 91 e7 01 	lds	r18, 0x01E7
     87c:	30 91 e8 01 	lds	r19, 0x01E8
		// Set character write
		ChosenCharacterTile = CharTileSix;
     880:	16 e0       	ldi	r17, 0x06	; 6
     882:	09 c0       	rjmp	.+18     	; 0x896 <WriteTile+0x1da>
	
	uint16_t Tile_xMin = 0;
	uint16_t Tile_xMax = 0;
	uint16_t Tile_yMin = 0;
	uint16_t Tile_yMax = 0;
	uint8_t ChosenCharacterTile = 0;
     884:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	uint16_t Tile_xMin = 0;
	uint16_t Tile_xMax = 0;
	uint16_t Tile_yMin = 0;
	uint16_t Tile_yMax = 0;
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
		ChosenCharacterState = CharStateBad;
	}
	
	uint16_t Tile_xMin = 0;
	uint16_t Tile_xMax = 0;
	uint16_t Tile_yMin = 0;
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	70 e0       	ldi	r23, 0x00	; 0
		Color_TilebackgroundB = TileColor_Bad[2];
		ChosenCharacterState = CharStateBad;
	}
	
	uint16_t Tile_xMin = 0;
	uint16_t Tile_xMax = 0;
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	50 e0       	ldi	r21, 0x00	; 0
		Color_TilebackgroundG = TileColor_Bad[1];
		Color_TilebackgroundB = TileColor_Bad[2];
		ChosenCharacterState = CharStateBad;
	}
	
	uint16_t Tile_xMin = 0;
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
		Tile_xMax = Tile_6_Dimensions[2];
		Tile_yMax = Tile_6_Dimensions[3];
		// Set character write
		ChosenCharacterTile = CharTileSix;
	}
	if (PreviousTileState){
     896:	ee 23       	and	r30, r30
     898:	29 f0       	breq	.+10     	; 0x8a4 <WriteTile+0x1e8>
		Window(Tile_xMin, Tile_yMin+HeightCharacters*4, Tile_xMax, Tile_yMax, Color_TilebackgroundR, Color_TilebackgroundG, Color_TilebackgroundB);
     89a:	60 5d       	subi	r22, 0xD0	; 208
     89c:	7f 4f       	sbci	r23, 0xFF	; 255
     89e:	0e 94 bd 00 	call	0x17a	; 0x17a <Window>
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <WriteTile+0x1ec>
	}
	else{
		Window(Tile_xMin, Tile_yMin, Tile_xMax, Tile_yMax, Color_TilebackgroundR, Color_TilebackgroundG, Color_TilebackgroundB);
     8a4:	0e 94 bd 00 	call	0x17a	; 0x17a <Window>
	}
	
	CharacterWrite(ChosenCharacterTile, TileNumber);
     8a8:	81 2f       	mov	r24, r17
     8aa:	6c 2f       	mov	r22, r28
     8ac:	0e 94 33 02 	call	0x466	; 0x466 <CharacterWrite>
	CharacterWrite(ChosenCharacterState, TileNumber);
     8b0:	8d 2f       	mov	r24, r29
     8b2:	6c 2f       	mov	r22, r28
     8b4:	0e 94 33 02 	call	0x466	; 0x466 <CharacterWrite>
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	ef 90       	pop	r14
     8c2:	cf 90       	pop	r12
     8c4:	08 95       	ret

000008c6 <LCD_Startscreen>:

void LCD_Startscreen(){
     8c6:	cf 92       	push	r12
     8c8:	ef 92       	push	r14
     8ca:	0f 93       	push	r16
	
	Window(L_xMax+1,LCDMin,R_xMin-1,LCDyMax,0x00,0x00,0x00);
     8cc:	86 e7       	ldi	r24, 0x76	; 118
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	4a e7       	ldi	r20, 0x7A	; 122
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	20 e4       	ldi	r18, 0x40	; 64
     8da:	31 e0       	ldi	r19, 0x01	; 1
     8dc:	00 e0       	ldi	r16, 0x00	; 0
     8de:	ee 24       	eor	r14, r14
     8e0:	cc 24       	eor	r12, r12
     8e2:	0e 94 bd 00 	call	0x17a	; 0x17a <Window>
	Window(LCDMin,LR3_yMax+1,LCDxMax,LR2_yMin-1,0x00,0x00,0x00);
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	67 e6       	ldi	r22, 0x67	; 103
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	40 ef       	ldi	r20, 0xF0	; 240
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	2b e6       	ldi	r18, 0x6B	; 107
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	0e 94 bd 00 	call	0x17a	; 0x17a <Window>
	Window(LCDMin,LR2_yMax+1,LCDxMax,LR1_yMin-1,0x00,0x00,0x00);
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	62 ed       	ldi	r22, 0xD2	; 210
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	40 ef       	ldi	r20, 0xF0	; 240
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	26 ed       	ldi	r18, 0xD6	; 214
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	0e 94 bd 00 	call	0x17a	; 0x17a <Window>
	
	WriteTile(Tile_1, State_Idle);
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
	WriteTile(Tile_2, State_Idle);
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
	WriteTile(Tile_3, State_Idle);
     91e:	83 e0       	ldi	r24, 0x03	; 3
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
	WriteTile(Tile_4, State_Idle);
     926:	84 e0       	ldi	r24, 0x04	; 4
     928:	61 e0       	ldi	r22, 0x01	; 1
     92a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
	WriteTile(Tile_5, State_Idle);
     92e:	85 e0       	ldi	r24, 0x05	; 5
     930:	61 e0       	ldi	r22, 0x01	; 1
     932:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
	WriteTile(Tile_6, State_Idle);
     936:	86 e0       	ldi	r24, 0x06	; 6
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
}	
     93e:	0f 91       	pop	r16
     940:	ef 90       	pop	r14
     942:	cf 90       	pop	r12
     944:	08 95       	ret

00000946 <setup>:
 
void setup()
{
	LCD_Init();
     946:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Init>
	LCD_Startscreen();
     94a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_Startscreen>
}
     94e:	08 95       	ret

00000950 <LCDTest>:



void LCDTest(){
     950:	0f 93       	push	r16
	#define IS_ODD(x)   ((x) & 1)
	#define IS_EVEN(x)  (!(IS_ODD(x)))
	
	if ((ButtonL1) && (ButtonL2) && (ButtonL3) && (ButtonR1) && (ButtonR2) && (ButtonR3))
     952:	33 99       	sbic	0x06, 3	; 6
     954:	16 c0       	rjmp	.+44     	; 0x982 <LCDTest+0x32>
     956:	34 99       	sbic	0x06, 4	; 6
     958:	14 c0       	rjmp	.+40     	; 0x982 <LCDTest+0x32>
     95a:	35 99       	sbic	0x06, 5	; 6
     95c:	12 c0       	rjmp	.+36     	; 0x982 <LCDTest+0x32>
     95e:	30 99       	sbic	0x06, 0	; 6
     960:	10 c0       	rjmp	.+32     	; 0x982 <LCDTest+0x32>
     962:	31 99       	sbic	0x06, 1	; 6
     964:	0e c0       	rjmp	.+28     	; 0x982 <LCDTest+0x32>
     966:	32 99       	sbic	0x06, 2	; 6
     968:	0c c0       	rjmp	.+24     	; 0x982 <LCDTest+0x32>
	{
		LCD_Startscreen();
     96a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_Startscreen>
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	99 e6       	ldi	r25, 0x69	; 105
     972:	a8 e1       	ldi	r26, 0x18	; 24
     974:	81 50       	subi	r24, 0x01	; 1
     976:	90 40       	sbci	r25, 0x00	; 0
     978:	a0 40       	sbci	r26, 0x00	; 0
     97a:	e1 f7       	brne	.-8      	; 0x974 <LCDTest+0x24>
     97c:	00 c0       	rjmp	.+0      	; 0x97e <LCDTest+0x2e>
     97e:	00 00       	nop
     980:	4a c1       	rjmp	.+660    	; 0xc16 <LCDTest+0x2c6>
		_delay_ms(500);
	}
	else if (ButtonL1)
     982:	33 99       	sbic	0x06, 3	; 6
     984:	0f c0       	rjmp	.+30     	; 0x9a4 <LCDTest+0x54>
	{
		WriteTile(Tile_1, State_Good);
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	62 e0       	ldi	r22, 0x02	; 2
     98a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
		WS2811_DebugTest(Group1_Start, Group1_Length);
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	66 e0       	ldi	r22, 0x06	; 6
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	0e 94 40 17 	call	0x2e80	; 0x2e80 <WS2811_DebugTest>
		WriteTile(Tile_1, State_Idle);
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
     9a2:	39 c1       	rjmp	.+626    	; 0xc16 <LCDTest+0x2c6>
	}
	else if (ButtonL2)
     9a4:	34 99       	sbic	0x06, 4	; 6
     9a6:	0f c0       	rjmp	.+30     	; 0x9c6 <LCDTest+0x76>
	{
		WriteTile(Tile_2, State_Good);
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	62 e0       	ldi	r22, 0x02	; 2
     9ac:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
		WS2811_DebugTest(Group3_Start, Group3_Length);
     9b0:	8c e0       	ldi	r24, 0x0C	; 12
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	65 e0       	ldi	r22, 0x05	; 5
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	0e 94 40 17 	call	0x2e80	; 0x2e80 <WS2811_DebugTest>
 		WriteTile(Tile_2, State_Idle);
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
     9c4:	28 c1       	rjmp	.+592    	; 0xc16 <LCDTest+0x2c6>
	}
	else if (ButtonL3)
     9c6:	35 99       	sbic	0x06, 5	; 6
     9c8:	5b c0       	rjmp	.+182    	; 0xa80 <LCDTest+0x130>
	{
		WriteTile(Tile_3, State_Good);
     9ca:	83 e0       	ldi	r24, 0x03	; 3
     9cc:	62 e0       	ldi	r22, 0x02	; 2
     9ce:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
		WS2811_SetMidUpdate(GroupALL_Start, GroupALL_Length, COLOR_UIT, Neen);
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	69 e1       	ldi	r22, 0x19	; 25
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	a9 01       	movw	r20, r18
     9dc:	02 e0       	ldi	r16, 0x02	; 2
     9de:	0e 94 a6 14 	call	0x294c	; 0x294c <WS2811_SetMidUpdate>
		WS2811_SetMidUpdate(1,1,COLOR_ROOD, Neen);
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	4f ef       	ldi	r20, 0xFF	; 255
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	0e 94 a6 14 	call	0x294c	; 0x294c <WS2811_SetMidUpdate>
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	93 ed       	ldi	r25, 0xD3	; 211
     9f6:	a0 e3       	ldi	r26, 0x30	; 48
     9f8:	81 50       	subi	r24, 0x01	; 1
     9fa:	90 40       	sbci	r25, 0x00	; 0
     9fc:	a0 40       	sbci	r26, 0x00	; 0
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <LCDTest+0xa8>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <LCDTest+0xb2>
     a02:	00 00       	nop
		_delay_ms(1000);
		WS2811_SetMidUpdate(2,1,COLOR_BLAUW, Neen);
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	61 e0       	ldi	r22, 0x01	; 1
     a08:	2f ef       	ldi	r18, 0xFF	; 255
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	0e 94 a6 14 	call	0x294c	; 0x294c <WS2811_SetMidUpdate>
     a14:	8f ef       	ldi	r24, 0xFF	; 255
     a16:	93 ed       	ldi	r25, 0xD3	; 211
     a18:	a0 e3       	ldi	r26, 0x30	; 48
     a1a:	81 50       	subi	r24, 0x01	; 1
     a1c:	90 40       	sbci	r25, 0x00	; 0
     a1e:	a0 40       	sbci	r26, 0x00	; 0
     a20:	e1 f7       	brne	.-8      	; 0xa1a <LCDTest+0xca>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <LCDTest+0xd4>
     a24:	00 00       	nop
		_delay_ms(1000);
		WS2811_SetMidUpdate(1,2,COLOR_UIT, Neen);
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	62 e0       	ldi	r22, 0x02	; 2
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	a9 01       	movw	r20, r18
     a30:	0e 94 a6 14 	call	0x294c	; 0x294c <WS2811_SetMidUpdate>
     a34:	8f ef       	ldi	r24, 0xFF	; 255
     a36:	93 ed       	ldi	r25, 0xD3	; 211
     a38:	a0 e3       	ldi	r26, 0x30	; 48
     a3a:	81 50       	subi	r24, 0x01	; 1
     a3c:	90 40       	sbci	r25, 0x00	; 0
     a3e:	a0 40       	sbci	r26, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <LCDTest+0xea>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <LCDTest+0xf4>
     a44:	00 00       	nop
		_delay_ms(1000);
		WS2811_SetMidUpdate(1,2,COLOR_GROEN, Neen);
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	62 e0       	ldi	r22, 0x02	; 2
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	3f ef       	ldi	r19, 0xFF	; 255
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	0e 94 a6 14 	call	0x294c	; 0x294c <WS2811_SetMidUpdate>
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	93 ed       	ldi	r25, 0xD3	; 211
     a5a:	a0 e3       	ldi	r26, 0x30	; 48
     a5c:	81 50       	subi	r24, 0x01	; 1
     a5e:	90 40       	sbci	r25, 0x00	; 0
     a60:	a0 40       	sbci	r26, 0x00	; 0
     a62:	e1 f7       	brne	.-8      	; 0xa5c <LCDTest+0x10c>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <LCDTest+0x116>
     a66:	00 00       	nop
		_delay_ms(1000);
		WS2811_SetMidUpdate(1,2,COLOR_UIT, Neen);
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	62 e0       	ldi	r22, 0x02	; 2
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	a9 01       	movw	r20, r18
     a72:	0e 94 a6 14 	call	0x294c	; 0x294c <WS2811_SetMidUpdate>
		WriteTile(Tile_3, State_Idle);
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
     a7e:	cb c0       	rjmp	.+406    	; 0xc16 <LCDTest+0x2c6>
	}
	else if (ButtonR1)
     a80:	30 99       	sbic	0x06, 0	; 6
     a82:	0f c0       	rjmp	.+30     	; 0xaa2 <LCDTest+0x152>
	{
		WriteTile(Tile_4, State_Good);
     a84:	84 e0       	ldi	r24, 0x04	; 4
     a86:	62 e0       	ldi	r22, 0x02	; 2
     a88:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
		WS2811_DebugTest(Group2_Start, Group2_Length);
     a8c:	87 e0       	ldi	r24, 0x07	; 7
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	65 e0       	ldi	r22, 0x05	; 5
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	0e 94 40 17 	call	0x2e80	; 0x2e80 <WS2811_DebugTest>
 		WriteTile(Tile_4, State_Idle);
     a98:	84 e0       	ldi	r24, 0x04	; 4
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
     aa0:	ba c0       	rjmp	.+372    	; 0xc16 <LCDTest+0x2c6>
	}
	else if (ButtonR2)
     aa2:	31 99       	sbic	0x06, 1	; 6
     aa4:	0f c0       	rjmp	.+30     	; 0xac4 <LCDTest+0x174>
	{
		WriteTile(Tile_5, State_Good);
     aa6:	85 e0       	ldi	r24, 0x05	; 5
     aa8:	62 e0       	ldi	r22, 0x02	; 2
     aaa:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
		WS2811_DebugTest(Group4_Start, Group4_Length);
     aae:	81 e1       	ldi	r24, 0x11	; 17
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	69 e0       	ldi	r22, 0x09	; 9
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <WS2811_DebugTest>
 		WriteTile(Tile_5, State_Idle);
     aba:	85 e0       	ldi	r24, 0x05	; 5
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
     ac2:	a9 c0       	rjmp	.+338    	; 0xc16 <LCDTest+0x2c6>
	}
	else if (ButtonR3)
     ac4:	32 99       	sbic	0x06, 2	; 6
     ac6:	a7 c0       	rjmp	.+334    	; 0xc16 <LCDTest+0x2c6>
	{
		WriteTile(Tile_6, State_Good);
     ac8:	86 e0       	ldi	r24, 0x06	; 6
     aca:	62 e0       	ldi	r22, 0x02	; 2
     acc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
		WS2801_SetColorUpdate(0x10);
     ad0:	80 e1       	ldi	r24, 0x10	; 16
     ad2:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	91 ee       	ldi	r25, 0xE1	; 225
     ada:	a4 e0       	ldi	r26, 0x04	; 4
     adc:	81 50       	subi	r24, 0x01	; 1
     ade:	90 40       	sbci	r25, 0x00	; 0
     ae0:	a0 40       	sbci	r26, 0x00	; 0
     ae2:	e1 f7       	brne	.-8      	; 0xadc <LCDTest+0x18c>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <LCDTest+0x196>
     ae6:	00 00       	nop
		_delay_ms(100);
		WS2801_SetColorUpdate(0x20);
     ae8:	80 e2       	ldi	r24, 0x20	; 32
     aea:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
     aee:	8f ef       	ldi	r24, 0xFF	; 255
     af0:	91 ee       	ldi	r25, 0xE1	; 225
     af2:	a4 e0       	ldi	r26, 0x04	; 4
     af4:	81 50       	subi	r24, 0x01	; 1
     af6:	90 40       	sbci	r25, 0x00	; 0
     af8:	a0 40       	sbci	r26, 0x00	; 0
     afa:	e1 f7       	brne	.-8      	; 0xaf4 <LCDTest+0x1a4>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <LCDTest+0x1ae>
     afe:	00 00       	nop
		_delay_ms(100);
		WS2801_SetColorUpdate(0x30);
     b00:	80 e3       	ldi	r24, 0x30	; 48
     b02:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
     b06:	8f ef       	ldi	r24, 0xFF	; 255
     b08:	91 ee       	ldi	r25, 0xE1	; 225
     b0a:	a4 e0       	ldi	r26, 0x04	; 4
     b0c:	81 50       	subi	r24, 0x01	; 1
     b0e:	90 40       	sbci	r25, 0x00	; 0
     b10:	a0 40       	sbci	r26, 0x00	; 0
     b12:	e1 f7       	brne	.-8      	; 0xb0c <LCDTest+0x1bc>
     b14:	00 c0       	rjmp	.+0      	; 0xb16 <LCDTest+0x1c6>
     b16:	00 00       	nop
		_delay_ms(100);
		WS2801_SetColorUpdate(0x40);
     b18:	80 e4       	ldi	r24, 0x40	; 64
     b1a:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	91 ee       	ldi	r25, 0xE1	; 225
     b22:	a4 e0       	ldi	r26, 0x04	; 4
     b24:	81 50       	subi	r24, 0x01	; 1
     b26:	90 40       	sbci	r25, 0x00	; 0
     b28:	a0 40       	sbci	r26, 0x00	; 0
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <LCDTest+0x1d4>
     b2c:	00 c0       	rjmp	.+0      	; 0xb2e <LCDTest+0x1de>
     b2e:	00 00       	nop
		_delay_ms(100);
		WS2801_SetColorUpdate(0x50);
     b30:	80 e5       	ldi	r24, 0x50	; 80
     b32:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
     b36:	8f ef       	ldi	r24, 0xFF	; 255
     b38:	91 ee       	ldi	r25, 0xE1	; 225
     b3a:	a4 e0       	ldi	r26, 0x04	; 4
     b3c:	81 50       	subi	r24, 0x01	; 1
     b3e:	90 40       	sbci	r25, 0x00	; 0
     b40:	a0 40       	sbci	r26, 0x00	; 0
     b42:	e1 f7       	brne	.-8      	; 0xb3c <LCDTest+0x1ec>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <LCDTest+0x1f6>
     b46:	00 00       	nop
		_delay_ms(100);
		WS2801_SetColorUpdate(0x60);
     b48:	80 e6       	ldi	r24, 0x60	; 96
     b4a:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	91 ee       	ldi	r25, 0xE1	; 225
     b52:	a4 e0       	ldi	r26, 0x04	; 4
     b54:	81 50       	subi	r24, 0x01	; 1
     b56:	90 40       	sbci	r25, 0x00	; 0
     b58:	a0 40       	sbci	r26, 0x00	; 0
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <LCDTest+0x204>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <LCDTest+0x20e>
     b5e:	00 00       	nop
		_delay_ms(100);
		WS2801_SetColorUpdate(0xff);
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	95 ee       	ldi	r25, 0xE5	; 229
     b6a:	aa ea       	ldi	r26, 0xAA	; 170
     b6c:	81 50       	subi	r24, 0x01	; 1
     b6e:	90 40       	sbci	r25, 0x00	; 0
     b70:	a0 40       	sbci	r26, 0x00	; 0
     b72:	e1 f7       	brne	.-8      	; 0xb6c <LCDTest+0x21c>
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <LCDTest+0x226>
     b76:	00 00       	nop
		_delay_ms(3500);
		WS2801_SetColorUpdate(0x60);
     b78:	80 e6       	ldi	r24, 0x60	; 96
     b7a:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	91 ee       	ldi	r25, 0xE1	; 225
     b82:	a4 e0       	ldi	r26, 0x04	; 4
     b84:	81 50       	subi	r24, 0x01	; 1
     b86:	90 40       	sbci	r25, 0x00	; 0
     b88:	a0 40       	sbci	r26, 0x00	; 0
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <LCDTest+0x234>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <LCDTest+0x23e>
     b8e:	00 00       	nop
		_delay_ms(100);
		WS2801_SetColorUpdate(0x50);
     b90:	80 e5       	ldi	r24, 0x50	; 80
     b92:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
     b96:	8f ef       	ldi	r24, 0xFF	; 255
     b98:	91 ee       	ldi	r25, 0xE1	; 225
     b9a:	a4 e0       	ldi	r26, 0x04	; 4
     b9c:	81 50       	subi	r24, 0x01	; 1
     b9e:	90 40       	sbci	r25, 0x00	; 0
     ba0:	a0 40       	sbci	r26, 0x00	; 0
     ba2:	e1 f7       	brne	.-8      	; 0xb9c <LCDTest+0x24c>
     ba4:	00 c0       	rjmp	.+0      	; 0xba6 <LCDTest+0x256>
     ba6:	00 00       	nop
		_delay_ms(100);
		WS2801_SetColorUpdate(0x40);
     ba8:	80 e4       	ldi	r24, 0x40	; 64
     baa:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	91 ee       	ldi	r25, 0xE1	; 225
     bb2:	a4 e0       	ldi	r26, 0x04	; 4
     bb4:	81 50       	subi	r24, 0x01	; 1
     bb6:	90 40       	sbci	r25, 0x00	; 0
     bb8:	a0 40       	sbci	r26, 0x00	; 0
     bba:	e1 f7       	brne	.-8      	; 0xbb4 <LCDTest+0x264>
     bbc:	00 c0       	rjmp	.+0      	; 0xbbe <LCDTest+0x26e>
     bbe:	00 00       	nop
		_delay_ms(100);
		WS2801_SetColorUpdate(0x30);
     bc0:	80 e3       	ldi	r24, 0x30	; 48
     bc2:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
     bc6:	8f ef       	ldi	r24, 0xFF	; 255
     bc8:	91 ee       	ldi	r25, 0xE1	; 225
     bca:	a4 e0       	ldi	r26, 0x04	; 4
     bcc:	81 50       	subi	r24, 0x01	; 1
     bce:	90 40       	sbci	r25, 0x00	; 0
     bd0:	a0 40       	sbci	r26, 0x00	; 0
     bd2:	e1 f7       	brne	.-8      	; 0xbcc <LCDTest+0x27c>
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <LCDTest+0x286>
     bd6:	00 00       	nop
		_delay_ms(100);
		WS2801_SetColorUpdate(0x20);
     bd8:	80 e2       	ldi	r24, 0x20	; 32
     bda:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
     bde:	8f ef       	ldi	r24, 0xFF	; 255
     be0:	91 ee       	ldi	r25, 0xE1	; 225
     be2:	a4 e0       	ldi	r26, 0x04	; 4
     be4:	81 50       	subi	r24, 0x01	; 1
     be6:	90 40       	sbci	r25, 0x00	; 0
     be8:	a0 40       	sbci	r26, 0x00	; 0
     bea:	e1 f7       	brne	.-8      	; 0xbe4 <LCDTest+0x294>
     bec:	00 c0       	rjmp	.+0      	; 0xbee <LCDTest+0x29e>
     bee:	00 00       	nop
		_delay_ms(100);
		WS2801_SetColorUpdate(0x10);
     bf0:	80 e1       	ldi	r24, 0x10	; 16
     bf2:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
     bf6:	8f ef       	ldi	r24, 0xFF	; 255
     bf8:	91 ee       	ldi	r25, 0xE1	; 225
     bfa:	a4 e0       	ldi	r26, 0x04	; 4
     bfc:	81 50       	subi	r24, 0x01	; 1
     bfe:	90 40       	sbci	r25, 0x00	; 0
     c00:	a0 40       	sbci	r26, 0x00	; 0
     c02:	e1 f7       	brne	.-8      	; 0xbfc <LCDTest+0x2ac>
     c04:	00 c0       	rjmp	.+0      	; 0xc06 <LCDTest+0x2b6>
     c06:	00 00       	nop
		_delay_ms(100);
		WS2801_SetColorUpdate(0x00);
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
		WriteTile(Tile_6, State_Idle);
     c0e:	86 e0       	ldi	r24, 0x06	; 6
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	0e 94 5e 03 	call	0x6bc	; 0x6bc <WriteTile>
		
	}
     c16:	0f 91       	pop	r16
     c18:	08 95       	ret

00000c1a <WS2801_Update>:
#include "GlobalDefinitions.h"
#include <avr/io.h>
#include <util/delay.h>
#define NOP_1M for (uint16_t g=0;g<795;g++){__asm__("nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t");}

void WS2801_Update(void){
     c1a:	87 e0       	ldi	r24, 0x07	; 7
     c1c:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t bits = 8 ; bits != 0; bits--) {
	 	WS2801_CKI_LOW;
	 	uint8_t mask = 1 << bits-1;
     c1e:	41 e0       	ldi	r20, 0x01	; 1
     c20:	50 e0       	ldi	r21, 0x00	; 0
	 	if(WS2801[0] & mask){
     c22:	e8 e1       	ldi	r30, 0x18	; 24
     c24:	f3 e0       	ldi	r31, 0x03	; 3
#include <util/delay.h>
#define NOP_1M for (uint16_t g=0;g<795;g++){__asm__("nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t");}

void WS2801_Update(void){
	for(uint8_t bits = 8 ; bits != 0; bits--) {
	 	WS2801_CKI_LOW;
     c26:	5f 98       	cbi	0x0b, 7	; 11
	 	uint8_t mask = 1 << bits-1;
     c28:	9a 01       	movw	r18, r20
     c2a:	08 2e       	mov	r0, r24
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <WS2801_Update+0x18>
     c2e:	22 0f       	add	r18, r18
     c30:	33 1f       	adc	r19, r19
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <WS2801_Update+0x14>
	 	if(WS2801[0] & mask){
     c36:	30 81       	ld	r19, Z
     c38:	23 23       	and	r18, r19
     c3a:	11 f0       	breq	.+4      	; 0xc40 <WS2801_Update+0x26>
	 	WS2801_SDI_HIGH;
     c3c:	28 9a       	sbi	0x05, 0	; 5
     c3e:	01 c0       	rjmp	.+2      	; 0xc42 <WS2801_Update+0x28>
		}
	 	else{WS2801_SDI_LOW;}
     c40:	28 98       	cbi	0x05, 0	; 5
	 	WS2801_CKI_HIGH;
     c42:	5f 9a       	sbi	0x0b, 7	; 11
     c44:	01 97       	sbiw	r24, 0x01	; 1
#include <avr/io.h>
#include <util/delay.h>
#define NOP_1M for (uint16_t g=0;g<795;g++){__asm__("nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t""nop\n\t");}

void WS2801_Update(void){
	for(uint8_t bits = 8 ; bits != 0; bits--) {
     c46:	2f ef       	ldi	r18, 0xFF	; 255
     c48:	8f 3f       	cpi	r24, 0xFF	; 255
     c4a:	92 07       	cpc	r25, r18
     c4c:	61 f7       	brne	.-40     	; 0xc26 <WS2801_Update+0xc>
     c4e:	81 e1       	ldi	r24, 0x11	; 17
	 	else{WS2801_SDI_LOW;}
	 	WS2801_CKI_HIGH;
	}

	for(uint8_t bits = 17 ; bits != 0; bits--) {
		WS2801_CKI_LOW;
     c50:	5f 98       	cbi	0x0b, 7	; 11
		WS2801_SDI_LOW;
     c52:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c54:	95 e0       	ldi	r25, 0x05	; 5
     c56:	9a 95       	dec	r25
     c58:	f1 f7       	brne	.-4      	; 0xc56 <WS2801_Update+0x3c>
     c5a:	00 00       	nop
		_delay_us(1);
		WS2801_CKI_HIGH;
     c5c:	5f 9a       	sbi	0x0b, 7	; 11
     c5e:	81 50       	subi	r24, 0x01	; 1
		}
	 	else{WS2801_SDI_LOW;}
	 	WS2801_CKI_HIGH;
	}

	for(uint8_t bits = 17 ; bits != 0; bits--) {
     c60:	b9 f7       	brne	.-18     	; 0xc50 <WS2801_Update+0x36>
     c62:	8f ec       	ldi	r24, 0xCF	; 207
     c64:	97 e0       	ldi	r25, 0x07	; 7
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <WS2801_Update+0x4c>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <WS2801_Update+0x52>
     c6c:	00 00       	nop
		_delay_us(1);
		WS2801_CKI_HIGH;
	}
	
	_delay_us(500);
}
     c6e:	08 95       	ret

00000c70 <WS2801_SetColor>:

void WS2801_SetColor(uint8_t Color){
	WS2801[0] = Color;
     c70:	80 93 18 03 	sts	0x0318, r24
}
     c74:	08 95       	ret

00000c76 <WS2801_SetColorUpdate>:
void WS2801_SetColorUpdate(uint8_t Color){
	WS2801[0] = Color;
     c76:	80 93 18 03 	sts	0x0318, r24
	WS2801_Update();
     c7a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <WS2801_Update>
}
     c7e:	08 95       	ret

00000c80 <WS2801_Set_Delay_Update>:

void WS2801_Set_Delay_Update(uint8_t Color, uint32_t Vertraging_totaal, uint32_t Aantijd, uint8_t UpdateRGB){
     c80:	4f 92       	push	r4
     c82:	5f 92       	push	r5
     c84:	6f 92       	push	r6
     c86:	7f 92       	push	r7
     c88:	8f 92       	push	r8
     c8a:	9f 92       	push	r9
     c8c:	af 92       	push	r10
     c8e:	bf 92       	push	r11
     c90:	ef 92       	push	r14
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	2a 01       	movw	r4, r20
     c98:	3b 01       	movw	r6, r22
     c9a:	48 01       	movw	r8, r16
     c9c:	59 01       	movw	r10, r18
	WS2801[0] = Color;
     c9e:	80 93 18 03 	sts	0x0318, r24
	WS2801_Update();
     ca2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <WS2801_Update>
	if (UpdateRGB == Ja){
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	e8 16       	cp	r14, r24
     caa:	11 f4       	brne	.+4      	; 0xcb0 <WS2801_Set_Delay_Update+0x30>
		WS2811_Update();}
     cac:	0e 94 42 13 	call	0x2684	; 0x2684 <WS2811_Update>
	for (uint32_t y=0; y<Aantijd; y++)
     cb0:	81 14       	cp	r8, r1
     cb2:	91 04       	cpc	r9, r1
     cb4:	a1 04       	cpc	r10, r1
     cb6:	b1 04       	cpc	r11, r1
     cb8:	e9 f4       	brne	.+58     	; 0xcf4 <WS2801_Set_Delay_Update+0x74>
     cba:	23 c0       	rjmp	.+70     	; 0xd02 <WS2801_Set_Delay_Update+0x82>
	...
	{
		NOP_1M
     cdc:	21 50       	subi	r18, 0x01	; 1
     cde:	30 40       	sbci	r19, 0x00	; 0
     ce0:	69 f7       	brne	.-38     	; 0xcbc <WS2801_Set_Delay_Update+0x3c>
void WS2801_Set_Delay_Update(uint8_t Color, uint32_t Vertraging_totaal, uint32_t Aantijd, uint8_t UpdateRGB){
	WS2801[0] = Color;
	WS2801_Update();
	if (UpdateRGB == Ja){
		WS2811_Update();}
	for (uint32_t y=0; y<Aantijd; y++)
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	a1 1d       	adc	r26, r1
     ce6:	b1 1d       	adc	r27, r1
     ce8:	88 15       	cp	r24, r8
     cea:	99 05       	cpc	r25, r9
     cec:	aa 05       	cpc	r26, r10
     cee:	bb 05       	cpc	r27, r11
     cf0:	31 f4       	brne	.+12     	; 0xcfe <WS2801_Set_Delay_Update+0x7e>
     cf2:	07 c0       	rjmp	.+14     	; 0xd02 <WS2801_Set_Delay_Update+0x82>
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	dc 01       	movw	r26, r24
void WS2801_SetColorUpdate(uint8_t Color){
	WS2801[0] = Color;
	WS2801_Update();
}

void WS2801_Set_Delay_Update(uint8_t Color, uint32_t Vertraging_totaal, uint32_t Aantijd, uint8_t UpdateRGB){
     cfa:	4b e1       	ldi	r20, 0x1B	; 27
     cfc:	53 e0       	ldi	r21, 0x03	; 3
     cfe:	9a 01       	movw	r18, r20
     d00:	dd cf       	rjmp	.-70     	; 0xcbc <WS2801_Set_Delay_Update+0x3c>
		WS2811_Update();}
	for (uint32_t y=0; y<Aantijd; y++)
	{
		NOP_1M
	}
	WS2801[0] = LS_COLOR_UIT;
     d02:	10 92 18 03 	sts	0x0318, r1
	WS2801_Update();
     d06:	0e 94 0d 06 	call	0xc1a	; 0xc1a <WS2801_Update>
	if (Vertraging_totaal > Aantijd)
     d0a:	84 14       	cp	r8, r4
     d0c:	95 04       	cpc	r9, r5
     d0e:	a6 04       	cpc	r10, r6
     d10:	b7 04       	cpc	r11, r7
     d12:	08 f0       	brcs	.+2      	; 0xd16 <WS2801_Set_Delay_Update+0x96>
     d14:	2b c0       	rjmp	.+86     	; 0xd6c <WS2801_Set_Delay_Update+0xec>
	{
		for (uint32_t y=0; y<Vertraging_totaal-Aantijd; y++)
     d16:	b3 01       	movw	r22, r6
     d18:	a2 01       	movw	r20, r4
     d1a:	48 19       	sub	r20, r8
     d1c:	59 09       	sbc	r21, r9
     d1e:	6a 09       	sbc	r22, r10
     d20:	7b 09       	sbc	r23, r11
     d22:	e9 f4       	brne	.+58     	; 0xd5e <WS2801_Set_Delay_Update+0xde>
     d24:	23 c0       	rjmp	.+70     	; 0xd6c <WS2801_Set_Delay_Update+0xec>
	...
		{
			NOP_1M
     d46:	21 50       	subi	r18, 0x01	; 1
     d48:	30 40       	sbci	r19, 0x00	; 0
     d4a:	69 f7       	brne	.-38     	; 0xd26 <WS2801_Set_Delay_Update+0xa6>
	}
	WS2801[0] = LS_COLOR_UIT;
	WS2801_Update();
	if (Vertraging_totaal > Aantijd)
	{
		for (uint32_t y=0; y<Vertraging_totaal-Aantijd; y++)
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	a1 1d       	adc	r26, r1
     d50:	b1 1d       	adc	r27, r1
     d52:	84 17       	cp	r24, r20
     d54:	95 07       	cpc	r25, r21
     d56:	a6 07       	cpc	r26, r22
     d58:	b7 07       	cpc	r27, r23
     d5a:	31 f4       	brne	.+12     	; 0xd68 <WS2801_Set_Delay_Update+0xe8>
     d5c:	07 c0       	rjmp	.+14     	; 0xd6c <WS2801_Set_Delay_Update+0xec>
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	dc 01       	movw	r26, r24
void WS2801_Set_Delay_Update(uint8_t Color, uint32_t Vertraging_totaal, uint32_t Aantijd, uint8_t UpdateRGB){
	WS2801[0] = Color;
	WS2801_Update();
	if (UpdateRGB == Ja){
		WS2811_Update();}
	for (uint32_t y=0; y<Aantijd; y++)
     d64:	eb e1       	ldi	r30, 0x1B	; 27
     d66:	f3 e0       	ldi	r31, 0x03	; 3
     d68:	9f 01       	movw	r18, r30
     d6a:	dd cf       	rjmp	.-70     	; 0xd26 <WS2801_Set_Delay_Update+0xa6>
		{
			NOP_1M
		}		
	}

}
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ef 90       	pop	r14
     d72:	bf 90       	pop	r11
     d74:	af 90       	pop	r10
     d76:	9f 90       	pop	r9
     d78:	8f 90       	pop	r8
     d7a:	7f 90       	pop	r7
     d7c:	6f 90       	pop	r6
     d7e:	5f 90       	pop	r5
     d80:	4f 90       	pop	r4
     d82:	08 95       	ret

00000d84 <WS2801_Set_Delay_Update_All>:
void WS2801_Set_Delay_Update_All(uint8_t Color, uint32_t Vertraging_totaal, uint32_t Aantijd, uint8_t UpdateRGB){
     d84:	ef 92       	push	r14
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	ce 2d       	mov	r28, r14
	WS2801_Set_Delay_Update(Color, Vertraging_totaal, Aantijd, UpdateRGB);
     d8e:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColorUpdate(GroupAll, COLOR_UIT, UpdateRGB);
     d92:	86 e0       	ldi	r24, 0x06	; 6
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	50 e0       	ldi	r21, 0x00	; 0
     d9a:	ba 01       	movw	r22, r20
     d9c:	2c 2f       	mov	r18, r28
     d9e:	0e 94 6d 15 	call	0x2ada	; 0x2ada <WS2811_SetGroupColorUpdate>
     da2:	cf 91       	pop	r28
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ef 90       	pop	r14
     daa:	08 95       	ret

00000dac <DEEL3>:
	WS2801_Set_Delay_Update(Intensity, 311-ROTATE_DELAY, LS_DELAY_1, Ja); //311
	WS2811_SetGroupColor(GroupAll, COLOR_UIT, Neen);
	WS2801_Set_Delay_Update(Intensity, 810, LS_DELAY_1, Ja); //810
}

void DEEL3(Intensity){
     dac:	ef 92       	push	r14
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	c8 2f       	mov	r28, r24
	long Naar_Climax = 0xffffff;
	#define DECREMENT Naar_Climax -= 0x505050;

	WS2811_SetGroupColor(GroupAll, Naar_Climax, Ja);
     db6:	86 e0       	ldi	r24, 0x06	; 6
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	4f ef       	ldi	r20, 0xFF	; 255
     dbc:	5f ef       	ldi	r21, 0xFF	; 255
     dbe:	6f ef       	ldi	r22, 0xFF	; 255
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	21 e0       	ldi	r18, 0x01	; 1
     dc4:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 308, LS_DELAY_1, Ja); //308
     dc8:	8c 2f       	mov	r24, r28
     dca:	44 e3       	ldi	r20, 0x34	; 52
     dcc:	51 e0       	ldi	r21, 0x01	; 1
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	0a ef       	ldi	r16, 0xFA	; 250
     dd4:	10 e0       	ldi	r17, 0x00	; 0
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	ee 24       	eor	r14, r14
     ddc:	e3 94       	inc	r14
     dde:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	DECREMENT
	WS2811_SetGroupColor(GroupAll, Naar_Climax, Ja);
     de2:	86 e0       	ldi	r24, 0x06	; 6
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	4f ea       	ldi	r20, 0xAF	; 175
     de8:	5f ea       	ldi	r21, 0xAF	; 175
     dea:	6f ea       	ldi	r22, 0xAF	; 175
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	21 e0       	ldi	r18, 0x01	; 1
     df0:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 377, LS_DELAY_1, Ja); //377
     df4:	8c 2f       	mov	r24, r28
     df6:	49 e7       	ldi	r20, 0x79	; 121
     df8:	51 e0       	ldi	r21, 0x01	; 1
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	0a ef       	ldi	r16, 0xFA	; 250
     e00:	10 e0       	ldi	r17, 0x00	; 0
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	DECREMENT
	WS2811_SetGroupColor(GroupAll, Naar_Climax, Ja);
     e0a:	86 e0       	ldi	r24, 0x06	; 6
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	4f e5       	ldi	r20, 0x5F	; 95
     e10:	5f e5       	ldi	r21, 0x5F	; 95
     e12:	6f e5       	ldi	r22, 0x5F	; 95
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	21 e0       	ldi	r18, 0x01	; 1
     e18:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(GroupAll, Naar_Climax, Speciaal);
     e1c:	86 e0       	ldi	r24, 0x06	; 6
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	4f e5       	ldi	r20, 0x5F	; 95
     e22:	5f e5       	ldi	r21, 0x5F	; 95
     e24:	6f e5       	ldi	r22, 0x5F	; 95
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	25 e0       	ldi	r18, 0x05	; 5
     e2a:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 391, LS_DELAY_1, Ja); //391
     e2e:	8c 2f       	mov	r24, r28
     e30:	47 e8       	ldi	r20, 0x87	; 135
     e32:	51 e0       	ldi	r21, 0x01	; 1
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	0a ef       	ldi	r16, 0xFA	; 250
     e3a:	10 e0       	ldi	r17, 0x00	; 0
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	DECREMENT
	WS2811_SetGroupColor(GroupAll, Naar_Climax, Ja);
     e44:	86 e0       	ldi	r24, 0x06	; 6
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	4f e0       	ldi	r20, 0x0F	; 15
     e4a:	5f e0       	ldi	r21, 0x0F	; 15
     e4c:	6f e0       	ldi	r22, 0x0F	; 15
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	21 e0       	ldi	r18, 0x01	; 1
     e52:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 304, LS_DELAY_1, Ja); //304
     e56:	8c 2f       	mov	r24, r28
     e58:	40 e3       	ldi	r20, 0x30	; 48
     e5a:	51 e0       	ldi	r21, 0x01	; 1
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	0a ef       	ldi	r16, 0xFA	; 250
     e62:	10 e0       	ldi	r17, 0x00	; 0
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	DECREMENT
	WS2811_SetGroupColor(GroupAll, Naar_Climax, Ja);
     e6c:	86 e0       	ldi	r24, 0x06	; 6
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	4f eb       	ldi	r20, 0xBF	; 191
     e72:	5e eb       	ldi	r21, 0xBE	; 190
     e74:	6e eb       	ldi	r22, 0xBE	; 190
     e76:	7f ef       	ldi	r23, 0xFF	; 255
     e78:	21 e0       	ldi	r18, 0x01	; 1
     e7a:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 801, LS_DELAY_1, Ja); //801
     e7e:	8c 2f       	mov	r24, r28
     e80:	41 e2       	ldi	r20, 0x21	; 33
     e82:	53 e0       	ldi	r21, 0x03	; 3
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	0a ef       	ldi	r16, 0xFA	; 250
     e8a:	10 e0       	ldi	r17, 0x00	; 0
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	DECREMENT
	WS2811_SetGroupColor(GroupAll, Naar_Climax, Speciaal);
     e94:	86 e0       	ldi	r24, 0x06	; 6
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	4f e6       	ldi	r20, 0x6F	; 111
     e9a:	5e e6       	ldi	r21, 0x6E	; 110
     e9c:	6e e6       	ldi	r22, 0x6E	; 110
     e9e:	7f ef       	ldi	r23, 0xFF	; 255
     ea0:	25 e0       	ldi	r18, 0x05	; 5
     ea2:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 294, LS_DELAY_1, Ja); //294
     ea6:	8c 2f       	mov	r24, r28
     ea8:	46 e2       	ldi	r20, 0x26	; 38
     eaa:	51 e0       	ldi	r21, 0x01	; 1
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	0a ef       	ldi	r16, 0xFA	; 250
     eb2:	10 e0       	ldi	r17, 0x00	; 0
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	DECREMENT
	WS2811_SetGroupColor(GroupAll, Naar_Climax, Speciaal);
     ebc:	86 e0       	ldi	r24, 0x06	; 6
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	4f e1       	ldi	r20, 0x1F	; 31
     ec2:	5e e1       	ldi	r21, 0x1E	; 30
     ec4:	6e e1       	ldi	r22, 0x1E	; 30
     ec6:	7f ef       	ldi	r23, 0xFF	; 255
     ec8:	25 e0       	ldi	r18, 0x05	; 5
     eca:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(GroupAll, Naar_Climax, Ja);
     ece:	86 e0       	ldi	r24, 0x06	; 6
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	4f e1       	ldi	r20, 0x1F	; 31
     ed4:	5e e1       	ldi	r21, 0x1E	; 30
     ed6:	6e e1       	ldi	r22, 0x1E	; 30
     ed8:	7f ef       	ldi	r23, 0xFF	; 255
     eda:	21 e0       	ldi	r18, 0x01	; 1
     edc:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 369, LS_DELAY_1, Ja); //369
     ee0:	8c 2f       	mov	r24, r28
     ee2:	41 e7       	ldi	r20, 0x71	; 113
     ee4:	51 e0       	ldi	r21, 0x01	; 1
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	0a ef       	ldi	r16, 0xFA	; 250
     eec:	10 e0       	ldi	r17, 0x00	; 0
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	DECREMENT
	WS2811_SetGroupColor(GroupAll, Naar_Climax, Speciaal);
     ef6:	86 e0       	ldi	r24, 0x06	; 6
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	4f ec       	ldi	r20, 0xCF	; 207
     efc:	5d ec       	ldi	r21, 0xCD	; 205
     efe:	6d ec       	ldi	r22, 0xCD	; 205
     f00:	7e ef       	ldi	r23, 0xFE	; 254
     f02:	25 e0       	ldi	r18, 0x05	; 5
     f04:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 399, LS_DELAY_1, Ja); //399
     f08:	8c 2f       	mov	r24, r28
     f0a:	4f e8       	ldi	r20, 0x8F	; 143
     f0c:	51 e0       	ldi	r21, 0x01	; 1
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	0a ef       	ldi	r16, 0xFA	; 250
     f14:	10 e0       	ldi	r17, 0x00	; 0
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	DECREMENT
	WS2811_SetGroupColor(GroupAll, Naar_Climax, Speciaal);
     f1e:	86 e0       	ldi	r24, 0x06	; 6
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	4f e7       	ldi	r20, 0x7F	; 127
     f24:	5d e7       	ldi	r21, 0x7D	; 125
     f26:	6d e7       	ldi	r22, 0x7D	; 125
     f28:	7e ef       	ldi	r23, 0xFE	; 254
     f2a:	25 e0       	ldi	r18, 0x05	; 5
     f2c:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 258, LS_DELAY_1, Ja); //258
     f30:	8c 2f       	mov	r24, r28
     f32:	42 e0       	ldi	r20, 0x02	; 2
     f34:	51 e0       	ldi	r21, 0x01	; 1
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	0a ef       	ldi	r16, 0xFA	; 250
     f3c:	10 e0       	ldi	r17, 0x00	; 0
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(GroupAll, COLOR_UIT, Neen);
     f46:	86 e0       	ldi	r24, 0x06	; 6
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	40 e0       	ldi	r20, 0x00	; 0
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	ba 01       	movw	r22, r20
     f50:	22 e0       	ldi	r18, 0x02	; 2
     f52:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 1141, LS_DELAY_1, Ja); //1141
     f56:	8c 2f       	mov	r24, r28
     f58:	45 e7       	ldi	r20, 0x75	; 117
     f5a:	54 e0       	ldi	r21, 0x04	; 4
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	0a ef       	ldi	r16, 0xFA	; 250
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
}
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ef 90       	pop	r14
     f74:	08 95       	ret

00000f76 <DEEL1>:


	
}

void DEEL1(Intensity){
     f76:	ef 92       	push	r14
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	c8 2f       	mov	r28, r24
	
	WS2801_Set_Delay_Update(Intensity, 419, LS_DELAY_1, Ja); //419
     f80:	43 ea       	ldi	r20, 0xA3	; 163
     f82:	51 e0       	ldi	r21, 0x01	; 1
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	0a ef       	ldi	r16, 0xFA	; 250
     f8a:	10 e0       	ldi	r17, 0x00	; 0
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	ee 24       	eor	r14, r14
     f92:	e3 94       	inc	r14
     f94:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 396, LS_DELAY_1, Ja); //396
     f98:	8c 2f       	mov	r24, r28
     f9a:	4c e8       	ldi	r20, 0x8C	; 140
     f9c:	51 e0       	ldi	r21, 0x01	; 1
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	0a ef       	ldi	r16, 0xFA	; 250
     fa4:	10 e0       	ldi	r17, 0x00	; 0
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 281, LS_DELAY_1, Ja); //281
     fae:	8c 2f       	mov	r24, r28
     fb0:	49 e1       	ldi	r20, 0x19	; 25
     fb2:	51 e0       	ldi	r21, 0x01	; 1
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	0a ef       	ldi	r16, 0xFA	; 250
     fba:	10 e0       	ldi	r17, 0x00	; 0
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 796, LS_DELAY_1, Ja); //796
     fc4:	8c 2f       	mov	r24, r28
     fc6:	4c e1       	ldi	r20, 0x1C	; 28
     fc8:	53 e0       	ldi	r21, 0x03	; 3
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	0a ef       	ldi	r16, 0xFA	; 250
     fd0:	10 e0       	ldi	r17, 0x00	; 0
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 276, LS_DELAY_1, Ja); //276
     fda:	8c 2f       	mov	r24, r28
     fdc:	44 e1       	ldi	r20, 0x14	; 20
     fde:	51 e0       	ldi	r21, 0x01	; 1
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	0a ef       	ldi	r16, 0xFA	; 250
     fe6:	10 e0       	ldi	r17, 0x00	; 0
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 437, LS_DELAY_1, Ja); //437
     ff0:	8c 2f       	mov	r24, r28
     ff2:	45 eb       	ldi	r20, 0xB5	; 181
     ff4:	51 e0       	ldi	r21, 0x01	; 1
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	0a ef       	ldi	r16, 0xFA	; 250
     ffc:	10 e0       	ldi	r17, 0x00	; 0
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 373, LS_DELAY_1, Ja); //373
    1006:	8c 2f       	mov	r24, r28
    1008:	45 e7       	ldi	r20, 0x75	; 117
    100a:	51 e0       	ldi	r21, 0x01	; 1
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	0a ef       	ldi	r16, 0xFA	; 250
    1012:	10 e0       	ldi	r17, 0x00	; 0
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 299, LS_DELAY_1, Ja); //299
    101c:	8c 2f       	mov	r24, r28
    101e:	4b e2       	ldi	r20, 0x2B	; 43
    1020:	51 e0       	ldi	r21, 0x01	; 1
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	0a ef       	ldi	r16, 0xFA	; 250
    1028:	10 e0       	ldi	r17, 0x00	; 0
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 1054, LS_DELAY_1, Ja); //1054
    1032:	8c 2f       	mov	r24, r28
    1034:	4e e1       	ldi	r20, 0x1E	; 30
    1036:	54 e0       	ldi	r21, 0x04	; 4
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	0a ef       	ldi	r16, 0xFA	; 250
    103e:	10 e0       	ldi	r17, 0x00	; 0
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 419, LS_DELAY_1, Ja); //419
    1048:	8c 2f       	mov	r24, r28
    104a:	43 ea       	ldi	r20, 0xA3	; 163
    104c:	51 e0       	ldi	r21, 0x01	; 1
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	0a ef       	ldi	r16, 0xFA	; 250
    1054:	10 e0       	ldi	r17, 0x00	; 0
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 386, LS_DELAY_1, Ja); //386
    105e:	8c 2f       	mov	r24, r28
    1060:	42 e8       	ldi	r20, 0x82	; 130
    1062:	51 e0       	ldi	r21, 0x01	; 1
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	0a ef       	ldi	r16, 0xFA	; 250
    106a:	10 e0       	ldi	r17, 0x00	; 0
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 308, LS_DELAY_1, Ja); //308
    1074:	8c 2f       	mov	r24, r28
    1076:	44 e3       	ldi	r20, 0x34	; 52
    1078:	51 e0       	ldi	r21, 0x01	; 1
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	0a ef       	ldi	r16, 0xFA	; 250
    1080:	10 e0       	ldi	r17, 0x00	; 0
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 782, LS_DELAY_1, Ja); //782
    108a:	8c 2f       	mov	r24, r28
    108c:	4e e0       	ldi	r20, 0x0E	; 14
    108e:	53 e0       	ldi	r21, 0x03	; 3
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	0a ef       	ldi	r16, 0xFA	; 250
    1096:	10 e0       	ldi	r17, 0x00	; 0
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 308, LS_DELAY_1, Ja); //308
    10a0:	8c 2f       	mov	r24, r28
    10a2:	44 e3       	ldi	r20, 0x34	; 52
    10a4:	51 e0       	ldi	r21, 0x01	; 1
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	0a ef       	ldi	r16, 0xFA	; 250
    10ac:	10 e0       	ldi	r17, 0x00	; 0
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 409, LS_DELAY_1, Ja); //409
    10b6:	8c 2f       	mov	r24, r28
    10b8:	49 e9       	ldi	r20, 0x99	; 153
    10ba:	51 e0       	ldi	r21, 0x01	; 1
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	0a ef       	ldi	r16, 0xFA	; 250
    10c2:	10 e0       	ldi	r17, 0x00	; 0
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 382, LS_DELAY_1, Ja); //382
    10cc:	8c 2f       	mov	r24, r28
    10ce:	4e e7       	ldi	r20, 0x7E	; 126
    10d0:	51 e0       	ldi	r21, 0x01	; 1
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	0a ef       	ldi	r16, 0xFA	; 250
    10d8:	10 e0       	ldi	r17, 0x00	; 0
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 1366, LS_DELAY_1, Ja); //1366
    10e2:	8c 2f       	mov	r24, r28
    10e4:	46 e5       	ldi	r20, 0x56	; 86
    10e6:	55 e0       	ldi	r21, 0x05	; 5
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	0a ef       	ldi	r16, 0xFA	; 250
    10ee:	10 e0       	ldi	r17, 0x00	; 0
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
}
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ef 90       	pop	r14
    1100:	08 95       	ret

00001102 <DEEL2>:

void DEEL2(Intensity){
    1102:	ef 92       	push	r14
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	c8 2f       	mov	r28, r24
	WS2811_SetGroupColor(Group2, COLOR_PAARS, Ja);
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	4f ef       	ldi	r20, 0xFF	; 255
    1112:	5f e5       	ldi	r21, 0x5F	; 95
    1114:	6f eb       	ldi	r22, 0xBF	; 191
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	21 e0       	ldi	r18, 0x01	; 1
    111a:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group3, COLOR_PAARS, Ja);
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	4f ef       	ldi	r20, 0xFF	; 255
    1124:	5f e5       	ldi	r21, 0x5F	; 95
    1126:	6f eb       	ldi	r22, 0xBF	; 191
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	21 e0       	ldi	r18, 0x01	; 1
    112c:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 391, LS_DELAY_1, Ja); //391
    1130:	8c 2f       	mov	r24, r28
    1132:	47 e8       	ldi	r20, 0x87	; 135
    1134:	51 e0       	ldi	r21, 0x01	; 1
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	0a ef       	ldi	r16, 0xFA	; 250
    113c:	10 e0       	ldi	r17, 0x00	; 0
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	ee 24       	eor	r14, r14
    1144:	e3 94       	inc	r14
    1146:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(Group2, COLOR_PAARS, Speciaal);
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	4f ef       	ldi	r20, 0xFF	; 255
    1150:	5f e5       	ldi	r21, 0x5F	; 95
    1152:	6f eb       	ldi	r22, 0xBF	; 191
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	25 e0       	ldi	r18, 0x05	; 5
    1158:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group3, COLOR_PAARS, Speciaal);
    115c:	83 e0       	ldi	r24, 0x03	; 3
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	4f ef       	ldi	r20, 0xFF	; 255
    1162:	5f e5       	ldi	r21, 0x5F	; 95
    1164:	6f eb       	ldi	r22, 0xBF	; 191
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	25 e0       	ldi	r18, 0x05	; 5
    116a:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 396, LS_DELAY_1, Ja); //396
    116e:	8c 2f       	mov	r24, r28
    1170:	4c e8       	ldi	r20, 0x8C	; 140
    1172:	51 e0       	ldi	r21, 0x01	; 1
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	0a ef       	ldi	r16, 0xFA	; 250
    117a:	10 e0       	ldi	r17, 0x00	; 0
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(Group2, COLOR_UIT, Ja);
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	40 e0       	ldi	r20, 0x00	; 0
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	ba 01       	movw	r22, r20
    118e:	21 e0       	ldi	r18, 0x01	; 1
    1190:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group3, COLOR_UIT, Ja);
    1194:	83 e0       	ldi	r24, 0x03	; 3
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	ba 01       	movw	r22, r20
    119e:	21 e0       	ldi	r18, 0x01	; 1
    11a0:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group1, COLOR_LIGHT_PURPLE, Speciaal);
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	4f ed       	ldi	r20, 0xDF	; 223
    11aa:	50 ed       	ldi	r21, 0xD0	; 208
    11ac:	68 ee       	ldi	r22, 0xE8	; 232
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	25 e0       	ldi	r18, 0x05	; 5
    11b2:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group4, COLOR_LIGHT_PURPLE, Speciaal);
    11b6:	84 e0       	ldi	r24, 0x04	; 4
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	4f ed       	ldi	r20, 0xDF	; 223
    11bc:	50 ed       	ldi	r21, 0xD0	; 208
    11be:	68 ee       	ldi	r22, 0xE8	; 232
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	25 e0       	ldi	r18, 0x05	; 5
    11c4:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 290, LS_DELAY_1, Ja); //290
    11c8:	8c 2f       	mov	r24, r28
    11ca:	42 e2       	ldi	r20, 0x22	; 34
    11cc:	51 e0       	ldi	r21, 0x01	; 1
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	0a ef       	ldi	r16, 0xFA	; 250
    11d4:	10 e0       	ldi	r17, 0x00	; 0
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(GroupAll, COLOR_UIT, Neen);
    11de:	86 e0       	ldi	r24, 0x06	; 6
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	40 e0       	ldi	r20, 0x00	; 0
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	ba 01       	movw	r22, r20
    11e8:	22 e0       	ldi	r18, 0x02	; 2
    11ea:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 801, LS_DELAY_1, Ja); //801
    11ee:	8c 2f       	mov	r24, r28
    11f0:	41 e2       	ldi	r20, 0x21	; 33
    11f2:	53 e0       	ldi	r21, 0x03	; 3
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	0a ef       	ldi	r16, 0xFA	; 250
    11fa:	10 e0       	ldi	r17, 0x00	; 0
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2811_SetGroupColor(Group2, COLOR_PAARS, Ja);
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	4f ef       	ldi	r20, 0xFF	; 255
    120a:	5f e5       	ldi	r21, 0x5F	; 95
    120c:	6f eb       	ldi	r22, 0xBF	; 191
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	21 e0       	ldi	r18, 0x01	; 1
    1212:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group3, COLOR_PAARS, Ja);
    1216:	83 e0       	ldi	r24, 0x03	; 3
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	4f ef       	ldi	r20, 0xFF	; 255
    121c:	5f e5       	ldi	r21, 0x5F	; 95
    121e:	6f eb       	ldi	r22, 0xBF	; 191
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	21 e0       	ldi	r18, 0x01	; 1
    1224:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 340, LS_DELAY_1, Ja); //340
    1228:	8c 2f       	mov	r24, r28
    122a:	44 e5       	ldi	r20, 0x54	; 84
    122c:	51 e0       	ldi	r21, 0x01	; 1
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	0a ef       	ldi	r16, 0xFA	; 250
    1234:	10 e0       	ldi	r17, 0x00	; 0
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(Group2, COLOR_PAARS, Speciaal);
    123e:	82 e0       	ldi	r24, 0x02	; 2
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	4f ef       	ldi	r20, 0xFF	; 255
    1244:	5f e5       	ldi	r21, 0x5F	; 95
    1246:	6f eb       	ldi	r22, 0xBF	; 191
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	25 e0       	ldi	r18, 0x05	; 5
    124c:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group3, COLOR_PAARS, Speciaal);
    1250:	83 e0       	ldi	r24, 0x03	; 3
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	4f ef       	ldi	r20, 0xFF	; 255
    1256:	5f e5       	ldi	r21, 0x5F	; 95
    1258:	6f eb       	ldi	r22, 0xBF	; 191
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	25 e0       	ldi	r18, 0x05	; 5
    125e:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 373, LS_DELAY_1, Ja); //373
    1262:	8c 2f       	mov	r24, r28
    1264:	45 e7       	ldi	r20, 0x75	; 117
    1266:	51 e0       	ldi	r21, 0x01	; 1
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	0a ef       	ldi	r16, 0xFA	; 250
    126e:	10 e0       	ldi	r17, 0x00	; 0
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(Group2, COLOR_UIT, Ja);
    1278:	82 e0       	ldi	r24, 0x02	; 2
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	ba 01       	movw	r22, r20
    1282:	21 e0       	ldi	r18, 0x01	; 1
    1284:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group3, COLOR_UIT, Ja);
    1288:	83 e0       	ldi	r24, 0x03	; 3
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	ba 01       	movw	r22, r20
    1292:	21 e0       	ldi	r18, 0x01	; 1
    1294:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group1, COLOR_LIGHT_PURPLE, Speciaal);
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	4f ed       	ldi	r20, 0xDF	; 223
    129e:	50 ed       	ldi	r21, 0xD0	; 208
    12a0:	68 ee       	ldi	r22, 0xE8	; 232
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	25 e0       	ldi	r18, 0x05	; 5
    12a6:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group4, COLOR_LIGHT_PURPLE, Speciaal);
    12aa:	84 e0       	ldi	r24, 0x04	; 4
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	4f ed       	ldi	r20, 0xDF	; 223
    12b0:	50 ed       	ldi	r21, 0xD0	; 208
    12b2:	68 ee       	ldi	r22, 0xE8	; 232
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	25 e0       	ldi	r18, 0x05	; 5
    12b8:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 373, LS_DELAY_1, Ja); //373
    12bc:	8c 2f       	mov	r24, r28
    12be:	45 e7       	ldi	r20, 0x75	; 117
    12c0:	51 e0       	ldi	r21, 0x01	; 1
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	0a ef       	ldi	r16, 0xFA	; 250
    12c8:	10 e0       	ldi	r17, 0x00	; 0
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(Group1, COLOR_LIGHT_PURPLE, Ja);
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	4f ed       	ldi	r20, 0xDF	; 223
    12d8:	50 ed       	ldi	r21, 0xD0	; 208
    12da:	68 ee       	ldi	r22, 0xE8	; 232
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	21 e0       	ldi	r18, 0x01	; 1
    12e0:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group4, COLOR_LIGHT_PURPLE, Ja);
    12e4:	84 e0       	ldi	r24, 0x04	; 4
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	4f ed       	ldi	r20, 0xDF	; 223
    12ea:	50 ed       	ldi	r21, 0xD0	; 208
    12ec:	68 ee       	ldi	r22, 0xE8	; 232
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	21 e0       	ldi	r18, 0x01	; 1
    12f2:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 299, LS_DELAY_1, Ja); //299
    12f6:	8c 2f       	mov	r24, r28
    12f8:	4b e2       	ldi	r20, 0x2B	; 43
    12fa:	51 e0       	ldi	r21, 0x01	; 1
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	0a ef       	ldi	r16, 0xFA	; 250
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(GroupAll, COLOR_UIT, Neen);
    130c:	86 e0       	ldi	r24, 0x06	; 6
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	ba 01       	movw	r22, r20
    1316:	22 e0       	ldi	r18, 0x02	; 2
    1318:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 1132, LS_DELAY_1, Ja); //1132
    131c:	8c 2f       	mov	r24, r28
    131e:	4c e6       	ldi	r20, 0x6C	; 108
    1320:	54 e0       	ldi	r21, 0x04	; 4
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	0a ef       	ldi	r16, 0xFA	; 250
    1328:	10 e0       	ldi	r17, 0x00	; 0
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2811_SetGroupColor(Group2, COLOR_PAARS, Ja);
    1332:	82 e0       	ldi	r24, 0x02	; 2
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	4f ef       	ldi	r20, 0xFF	; 255
    1338:	5f e5       	ldi	r21, 0x5F	; 95
    133a:	6f eb       	ldi	r22, 0xBF	; 191
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	21 e0       	ldi	r18, 0x01	; 1
    1340:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group3, COLOR_PAARS, Ja);
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	4f ef       	ldi	r20, 0xFF	; 255
    134a:	5f e5       	ldi	r21, 0x5F	; 95
    134c:	6f eb       	ldi	r22, 0xBF	; 191
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	21 e0       	ldi	r18, 0x01	; 1
    1352:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 386, LS_DELAY_1, Ja); //386
    1356:	8c 2f       	mov	r24, r28
    1358:	42 e8       	ldi	r20, 0x82	; 130
    135a:	51 e0       	ldi	r21, 0x01	; 1
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	0a ef       	ldi	r16, 0xFA	; 250
    1362:	10 e0       	ldi	r17, 0x00	; 0
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(Group2, COLOR_PAARS, Speciaal);
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	4f ef       	ldi	r20, 0xFF	; 255
    1372:	5f e5       	ldi	r21, 0x5F	; 95
    1374:	6f eb       	ldi	r22, 0xBF	; 191
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	25 e0       	ldi	r18, 0x05	; 5
    137a:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group3, COLOR_PAARS, Speciaal);
    137e:	83 e0       	ldi	r24, 0x03	; 3
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	4f ef       	ldi	r20, 0xFF	; 255
    1384:	5f e5       	ldi	r21, 0x5F	; 95
    1386:	6f eb       	ldi	r22, 0xBF	; 191
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	25 e0       	ldi	r18, 0x05	; 5
    138c:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 391, LS_DELAY_1, Ja); //391
    1390:	8c 2f       	mov	r24, r28
    1392:	47 e8       	ldi	r20, 0x87	; 135
    1394:	51 e0       	ldi	r21, 0x01	; 1
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	0a ef       	ldi	r16, 0xFA	; 250
    139c:	10 e0       	ldi	r17, 0x00	; 0
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(Group2, COLOR_UIT, Ja);
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	ba 01       	movw	r22, r20
    13b0:	21 e0       	ldi	r18, 0x01	; 1
    13b2:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group3, COLOR_UIT, Ja);
    13b6:	83 e0       	ldi	r24, 0x03	; 3
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	ba 01       	movw	r22, r20
    13c0:	21 e0       	ldi	r18, 0x01	; 1
    13c2:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group1, COLOR_LIGHT_PURPLE, Speciaal);
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	4f ed       	ldi	r20, 0xDF	; 223
    13cc:	50 ed       	ldi	r21, 0xD0	; 208
    13ce:	68 ee       	ldi	r22, 0xE8	; 232
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	25 e0       	ldi	r18, 0x05	; 5
    13d4:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group4, COLOR_LIGHT_PURPLE, Speciaal);
    13d8:	84 e0       	ldi	r24, 0x04	; 4
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	4f ed       	ldi	r20, 0xDF	; 223
    13de:	50 ed       	ldi	r21, 0xD0	; 208
    13e0:	68 ee       	ldi	r22, 0xE8	; 232
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	25 e0       	ldi	r18, 0x05	; 5
    13e6:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 285, LS_DELAY_1, Ja); //285
    13ea:	8c 2f       	mov	r24, r28
    13ec:	4d e1       	ldi	r20, 0x1D	; 29
    13ee:	51 e0       	ldi	r21, 0x01	; 1
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	0a ef       	ldi	r16, 0xFA	; 250
    13f6:	10 e0       	ldi	r17, 0x00	; 0
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(GroupAll, COLOR_UIT, Neen);
    1400:	86 e0       	ldi	r24, 0x06	; 6
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	40 e0       	ldi	r20, 0x00	; 0
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	ba 01       	movw	r22, r20
    140a:	22 e0       	ldi	r18, 0x02	; 2
    140c:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 791, LS_DELAY_1, Ja); //791
    1410:	8c 2f       	mov	r24, r28
    1412:	47 e1       	ldi	r20, 0x17	; 23
    1414:	53 e0       	ldi	r21, 0x03	; 3
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	0a ef       	ldi	r16, 0xFA	; 250
    141c:	10 e0       	ldi	r17, 0x00	; 0
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2811_SetGroupColor(Group2, COLOR_PAARS, Ja);
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	4f ef       	ldi	r20, 0xFF	; 255
    142c:	5f e5       	ldi	r21, 0x5F	; 95
    142e:	6f eb       	ldi	r22, 0xBF	; 191
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	21 e0       	ldi	r18, 0x01	; 1
    1434:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group3, COLOR_PAARS, Ja);
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	4f ef       	ldi	r20, 0xFF	; 255
    143e:	5f e5       	ldi	r21, 0x5F	; 95
    1440:	6f eb       	ldi	r22, 0xBF	; 191
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	21 e0       	ldi	r18, 0x01	; 1
    1446:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 308, LS_DELAY_1, Ja); //308
    144a:	8c 2f       	mov	r24, r28
    144c:	44 e3       	ldi	r20, 0x34	; 52
    144e:	51 e0       	ldi	r21, 0x01	; 1
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	0a ef       	ldi	r16, 0xFA	; 250
    1456:	10 e0       	ldi	r17, 0x00	; 0
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(Group1, COLOR_PAARS, Ja);
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	4f ef       	ldi	r20, 0xFF	; 255
    1466:	5f e5       	ldi	r21, 0x5F	; 95
    1468:	6f eb       	ldi	r22, 0xBF	; 191
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	21 e0       	ldi	r18, 0x01	; 1
    146e:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 396, LS_DELAY_1, Ja); //396
    1472:	8c 2f       	mov	r24, r28
    1474:	4c e8       	ldi	r20, 0x8C	; 140
    1476:	51 e0       	ldi	r21, 0x01	; 1
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	0a ef       	ldi	r16, 0xFA	; 250
    147e:	10 e0       	ldi	r17, 0x00	; 0
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(Group4, COLOR_PAARS, Ja);
    1488:	84 e0       	ldi	r24, 0x04	; 4
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	4f ef       	ldi	r20, 0xFF	; 255
    148e:	5f e5       	ldi	r21, 0x5F	; 95
    1490:	6f eb       	ldi	r22, 0xBF	; 191
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	21 e0       	ldi	r18, 0x01	; 1
    1496:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 405, LS_DELAY_1, Ja); //405
    149a:	8c 2f       	mov	r24, r28
    149c:	45 e9       	ldi	r20, 0x95	; 149
    149e:	51 e0       	ldi	r21, 0x01	; 1
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	0a ef       	ldi	r16, 0xFA	; 250
    14a6:	10 e0       	ldi	r17, 0x00	; 0
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(GroupAll, COLOR_LIGHT_PURPLE, Neen);
    14b0:	86 e0       	ldi	r24, 0x06	; 6
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	4f ed       	ldi	r20, 0xDF	; 223
    14b6:	50 ed       	ldi	r21, 0xD0	; 208
    14b8:	68 ee       	ldi	r22, 0xE8	; 232
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	22 e0       	ldi	r18, 0x02	; 2
    14be:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 1371, LS_DELAY_1, Ja); //1371
    14c2:	8c 2f       	mov	r24, r28
    14c4:	4b e5       	ldi	r20, 0x5B	; 91
    14c6:	55 e0       	ldi	r21, 0x05	; 5
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	70 e0       	ldi	r23, 0x00	; 0
    14cc:	0a ef       	ldi	r16, 0xFA	; 250
    14ce:	10 e0       	ldi	r17, 0x00	; 0
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2811_SetGroupColor(GroupAll, COLOR_UIT, Neen);
    14d8:	86 e0       	ldi	r24, 0x06	; 6
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	ba 01       	movw	r22, r20
    14e2:	22 e0       	ldi	r18, 0x02	; 2
    14e4:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 437, LS_DELAY_1, Ja); //437
    14e8:	8c 2f       	mov	r24, r28
    14ea:	45 eb       	ldi	r20, 0xB5	; 181
    14ec:	51 e0       	ldi	r21, 0x01	; 1
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	0a ef       	ldi	r16, 0xFA	; 250
    14f4:	10 e0       	ldi	r17, 0x00	; 0
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(Group2, COLOR_PAARS, Ja);
    14fe:	82 e0       	ldi	r24, 0x02	; 2
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	4f ef       	ldi	r20, 0xFF	; 255
    1504:	5f e5       	ldi	r21, 0x5F	; 95
    1506:	6f eb       	ldi	r22, 0xBF	; 191
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	21 e0       	ldi	r18, 0x01	; 1
    150c:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group3, COLOR_PAARS, Ja);
    1510:	83 e0       	ldi	r24, 0x03	; 3
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	4f ef       	ldi	r20, 0xFF	; 255
    1516:	5f e5       	ldi	r21, 0x5F	; 95
    1518:	6f eb       	ldi	r22, 0xBF	; 191
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	21 e0       	ldi	r18, 0x01	; 1
    151e:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 301, LS_DELAY_1, Ja); //301
    1522:	8c 2f       	mov	r24, r28
    1524:	4d e2       	ldi	r20, 0x2D	; 45
    1526:	51 e0       	ldi	r21, 0x01	; 1
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	0a ef       	ldi	r16, 0xFA	; 250
    152e:	10 e0       	ldi	r17, 0x00	; 0
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(Group1, COLOR_PAARS, Ja);
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	4f ef       	ldi	r20, 0xFF	; 255
    153e:	5f e5       	ldi	r21, 0x5F	; 95
    1540:	6f eb       	ldi	r22, 0xBF	; 191
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	21 e0       	ldi	r18, 0x01	; 1
    1546:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 327, LS_DELAY_1, Ja); //327
    154a:	8c 2f       	mov	r24, r28
    154c:	47 e4       	ldi	r20, 0x47	; 71
    154e:	51 e0       	ldi	r21, 0x01	; 1
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	0a ef       	ldi	r16, 0xFA	; 250
    1556:	10 e0       	ldi	r17, 0x00	; 0
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(Group4, COLOR_PAARS, Ja);
    1560:	84 e0       	ldi	r24, 0x04	; 4
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	4f ef       	ldi	r20, 0xFF	; 255
    1566:	5f e5       	ldi	r21, 0x5F	; 95
    1568:	6f eb       	ldi	r22, 0xBF	; 191
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	21 e0       	ldi	r18, 0x01	; 1
    156e:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 810, LS_DELAY_1, Ja); //810
    1572:	8c 2f       	mov	r24, r28
    1574:	4a e2       	ldi	r20, 0x2A	; 42
    1576:	53 e0       	ldi	r21, 0x03	; 3
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	0a ef       	ldi	r16, 0xFA	; 250
    157e:	10 e0       	ldi	r17, 0x00	; 0
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2811_SetGroupColor(Group4, COLOR_PAARS, Ja);
    1588:	84 e0       	ldi	r24, 0x04	; 4
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	4f ef       	ldi	r20, 0xFF	; 255
    158e:	5f e5       	ldi	r21, 0x5F	; 95
    1590:	6f eb       	ldi	r22, 0xBF	; 191
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	21 e0       	ldi	r18, 0x01	; 1
    1596:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 299, LS_DELAY_1, Ja); //299
    159a:	8c 2f       	mov	r24, r28
    159c:	4b e2       	ldi	r20, 0x2B	; 43
    159e:	51 e0       	ldi	r21, 0x01	; 1
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	0a ef       	ldi	r16, 0xFA	; 250
    15a6:	10 e0       	ldi	r17, 0x00	; 0
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(Group2, COLOR_PAARS, Ja);
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	4f ef       	ldi	r20, 0xFF	; 255
    15b6:	5f e5       	ldi	r21, 0x5F	; 95
    15b8:	6f eb       	ldi	r22, 0xBF	; 191
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	21 e0       	ldi	r18, 0x01	; 1
    15be:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group3, COLOR_PAARS, Ja);
    15c2:	83 e0       	ldi	r24, 0x03	; 3
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	4f ef       	ldi	r20, 0xFF	; 255
    15c8:	5f e5       	ldi	r21, 0x5F	; 95
    15ca:	6f eb       	ldi	r22, 0xBF	; 191
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	21 e0       	ldi	r18, 0x01	; 1
    15d0:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_RotateGroup(Group4, 1, Rechts, Neen, 0);
    15d4:	84 e0       	ldi	r24, 0x04	; 4
    15d6:	61 e0       	ldi	r22, 0x01	; 1
    15d8:	42 e0       	ldi	r20, 0x02	; 2
    15da:	22 e0       	ldi	r18, 0x02	; 2
    15dc:	00 e0       	ldi	r16, 0x00	; 0
    15de:	10 e0       	ldi	r17, 0x00	; 0
    15e0:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2801_Set_Delay_Update(Intensity, 170-ROTATE_DELAY, LS_DELAY_1, Ja); //170
    15e4:	8c 2f       	mov	r24, r28
    15e6:	45 e6       	ldi	r20, 0x65	; 101
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	0a ef       	ldi	r16, 0xFA	; 250
    15f0:	10 e0       	ldi	r17, 0x00	; 0
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_RotateGroup(Group4, 1, Rechts, Neen, 0);
    15fa:	84 e0       	ldi	r24, 0x04	; 4
    15fc:	61 e0       	ldi	r22, 0x01	; 1
    15fe:	42 e0       	ldi	r20, 0x02	; 2
    1600:	22 e0       	ldi	r18, 0x02	; 2
    1602:	00 e0       	ldi	r16, 0x00	; 0
    1604:	10 e0       	ldi	r17, 0x00	; 0
    1606:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2801_Set_Delay_Update(Intensity, 258-ROTATE_DELAY, LS_DELAY_1, Ja); //258
    160a:	8c 2f       	mov	r24, r28
    160c:	4d eb       	ldi	r20, 0xBD	; 189
    160e:	50 e0       	ldi	r21, 0x00	; 0
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	0a ef       	ldi	r16, 0xFA	; 250
    1616:	10 e0       	ldi	r17, 0x00	; 0
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_RotateGroup(Group4, 1, Rechts, Neen, 0);
    1620:	84 e0       	ldi	r24, 0x04	; 4
    1622:	61 e0       	ldi	r22, 0x01	; 1
    1624:	42 e0       	ldi	r20, 0x02	; 2
    1626:	22 e0       	ldi	r18, 0x02	; 2
    1628:	00 e0       	ldi	r16, 0x00	; 0
    162a:	10 e0       	ldi	r17, 0x00	; 0
    162c:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2801_Set_Delay_Update(Intensity, 368-ROTATE_DELAY, LS_DELAY_1, Ja); //368
    1630:	8c 2f       	mov	r24, r28
    1632:	4b e2       	ldi	r20, 0x2B	; 43
    1634:	51 e0       	ldi	r21, 0x01	; 1
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	0a ef       	ldi	r16, 0xFA	; 250
    163c:	10 e0       	ldi	r17, 0x00	; 0
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(Group2, COLOR_PAARS, Speciaal);
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	4f ef       	ldi	r20, 0xFF	; 255
    164c:	5f e5       	ldi	r21, 0x5F	; 95
    164e:	6f eb       	ldi	r22, 0xBF	; 191
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	25 e0       	ldi	r18, 0x05	; 5
    1654:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group3, COLOR_PAARS, Speciaal);
    1658:	83 e0       	ldi	r24, 0x03	; 3
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	4f ef       	ldi	r20, 0xFF	; 255
    165e:	5f e5       	ldi	r21, 0x5F	; 95
    1660:	6f eb       	ldi	r22, 0xBF	; 191
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	25 e0       	ldi	r18, 0x05	; 5
    1666:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_SetGroupColor(Group1, COLOR_PAARS, Ja);
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	4f ef       	ldi	r20, 0xFF	; 255
    1670:	5f e5       	ldi	r21, 0x5F	; 95
    1672:	6f eb       	ldi	r22, 0xBF	; 191
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	21 e0       	ldi	r18, 0x01	; 1
    1678:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_RotateGroup(Group4, 1, Rechts, Neen, 0);
    167c:	84 e0       	ldi	r24, 0x04	; 4
    167e:	61 e0       	ldi	r22, 0x01	; 1
    1680:	42 e0       	ldi	r20, 0x02	; 2
    1682:	22 e0       	ldi	r18, 0x02	; 2
    1684:	00 e0       	ldi	r16, 0x00	; 0
    1686:	10 e0       	ldi	r17, 0x00	; 0
    1688:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2801_Set_Delay_Update(Intensity, 311-ROTATE_DELAY, LS_DELAY_1, Ja); //311
    168c:	8c 2f       	mov	r24, r28
    168e:	42 ef       	ldi	r20, 0xF2	; 242
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	0a ef       	ldi	r16, 0xFA	; 250
    1698:	10 e0       	ldi	r17, 0x00	; 0
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupColor(GroupAll, COLOR_UIT, Neen);
    16a2:	86 e0       	ldi	r24, 0x06	; 6
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	ba 01       	movw	r22, r20
    16ac:	22 e0       	ldi	r18, 0x02	; 2
    16ae:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2801_Set_Delay_Update(Intensity, 810, LS_DELAY_1, Ja); //810
    16b2:	8c 2f       	mov	r24, r28
    16b4:	4a e2       	ldi	r20, 0x2A	; 42
    16b6:	53 e0       	ldi	r21, 0x03	; 3
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	0a ef       	ldi	r16, 0xFA	; 250
    16be:	10 e0       	ldi	r17, 0x00	; 0
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
}
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	ef 90       	pop	r14
    16d0:	08 95       	ret

000016d2 <ALLON>:
#ifndef COLORS_RAINBOW
const long COLORS_RAINBOW [COLORS_RAINBOW_LENGTH] = {0xFF2100, 0xFF4200, 0xFF6300, 0xFF8400, 0xFFA500, 0xFFC600, 0xFFE700, 0xFFff00, 0xDEff00, 0xBDff00, 0x9Cff00, 0x7Bff00, 0x5Aff00, 0x39ff00, 0x18ff00, 0x00ff00, 0x00ff21, 0x00ff42, 0x00ff63, 0x00ff84, 0x00ffA5, 0x00ffC6, 0x00ffE7, 0x00ffff, 0x00E7ff, 0x00C6ff, 0x00A5ff, 0x0084ff, 0x0063ff, 0x0042ff, 0x0021ff, 0x0000ff};
#endif

void ALLON(void){
	WS2811_SetMid(GroupALL_Start, GroupALL_Length, COLOR_WIT);
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	69 e1       	ldi	r22, 0x19	; 25
    16d6:	2f ef       	ldi	r18, 0xFF	; 255
    16d8:	3f ef       	ldi	r19, 0xFF	; 255
    16da:	4f ef       	ldi	r20, 0xFF	; 255
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	0e 94 41 14 	call	0x2882	; 0x2882 <WS2811_SetMid>
	WS2811_Update();
    16e2:	0e 94 42 13 	call	0x2684	; 0x2684 <WS2811_Update>
	WS2801_SetColorUpdate(LS_COLOR_WIT);
    16e6:	89 e7       	ldi	r24, 0x79	; 121
    16e8:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
}
    16ec:	08 95       	ret

000016ee <TEST>:

void TEST(void){
    16ee:	0f 93       	push	r16
    16f0:	cf 93       	push	r28
	WS2801_SetColorUpdate(LS_COLOR_WIT);
    16f2:	89 e7       	ldi	r24, 0x79	; 121
    16f4:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
    16f8:	c1 e0       	ldi	r28, 0x01	; 1
	for (int i=GroupALL_Start; i<GroupALL_Length+1; i++)
	{
		WS2811_SetMidUpdate(GroupALL_Start,i,COLOR_WIT,Neen);
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	6c 2f       	mov	r22, r28
    16fe:	2f ef       	ldi	r18, 0xFF	; 255
    1700:	3f ef       	ldi	r19, 0xFF	; 255
    1702:	4f ef       	ldi	r20, 0xFF	; 255
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	02 e0       	ldi	r16, 0x02	; 2
    1708:	0e 94 a6 14 	call	0x294c	; 0x294c <WS2811_SetMidUpdate>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    170c:	8f ef       	ldi	r24, 0xFF	; 255
    170e:	99 e6       	ldi	r25, 0x69	; 105
    1710:	a8 e1       	ldi	r26, 0x18	; 24
    1712:	81 50       	subi	r24, 0x01	; 1
    1714:	90 40       	sbci	r25, 0x00	; 0
    1716:	a0 40       	sbci	r26, 0x00	; 0
    1718:	e1 f7       	brne	.-8      	; 0x1712 <TEST+0x24>
    171a:	00 c0       	rjmp	.+0      	; 0x171c <TEST+0x2e>
    171c:	00 00       	nop
    171e:	cf 5f       	subi	r28, 0xFF	; 255
	WS2801_SetColorUpdate(LS_COLOR_WIT);
}

void TEST(void){
	WS2801_SetColorUpdate(LS_COLOR_WIT);
	for (int i=GroupALL_Start; i<GroupALL_Length+1; i++)
    1720:	ca 31       	cpi	r28, 0x1A	; 26
    1722:	59 f7       	brne	.-42     	; 0x16fa <TEST+0xc>
	{
		WS2811_SetMidUpdate(GroupALL_Start,i,COLOR_WIT,Neen);
		_delay_ms(500);
	}
	WS2801_SetColorUpdate(LS_COLOR_UIT);
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
	WS2811_SetMidUpdate(GroupALL_Start,GroupALL_Length,COLOR_UIT,Neen);
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	69 e1       	ldi	r22, 0x19	; 25
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	a9 01       	movw	r20, r18
    1734:	0e 94 a6 14 	call	0x294c	; 0x294c <WS2811_SetMidUpdate>
    1738:	8f ef       	ldi	r24, 0xFF	; 255
    173a:	93 ed       	ldi	r25, 0xD3	; 211
    173c:	a0 e3       	ldi	r26, 0x30	; 48
    173e:	81 50       	subi	r24, 0x01	; 1
    1740:	90 40       	sbci	r25, 0x00	; 0
    1742:	a0 40       	sbci	r26, 0x00	; 0
    1744:	e1 f7       	brne	.-8      	; 0x173e <TEST+0x50>
    1746:	00 c0       	rjmp	.+0      	; 0x1748 <TEST+0x5a>
    1748:	00 00       	nop
	_delay_ms(1000);
	WS2801_SetColorUpdate(LS_COLOR_WIT);
    174a:	89 e7       	ldi	r24, 0x79	; 121
    174c:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
    1750:	c1 e0       	ldi	r28, 0x01	; 1
	for (int i=GroupALL_Start; i<GroupALL_Length+1; i++)
	{
		WS2811_SetMidUpdate(i,i,COLOR_WIT,Neen);
    1752:	8c 2f       	mov	r24, r28
    1754:	6c 2f       	mov	r22, r28
    1756:	2f ef       	ldi	r18, 0xFF	; 255
    1758:	3f ef       	ldi	r19, 0xFF	; 255
    175a:	4f ef       	ldi	r20, 0xFF	; 255
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	02 e0       	ldi	r16, 0x02	; 2
    1760:	0e 94 a6 14 	call	0x294c	; 0x294c <WS2811_SetMidUpdate>
    1764:	8f ef       	ldi	r24, 0xFF	; 255
    1766:	99 e6       	ldi	r25, 0x69	; 105
    1768:	a8 e1       	ldi	r26, 0x18	; 24
    176a:	81 50       	subi	r24, 0x01	; 1
    176c:	90 40       	sbci	r25, 0x00	; 0
    176e:	a0 40       	sbci	r26, 0x00	; 0
    1770:	e1 f7       	brne	.-8      	; 0x176a <TEST+0x7c>
    1772:	00 c0       	rjmp	.+0      	; 0x1774 <TEST+0x86>
    1774:	00 00       	nop
    1776:	cf 5f       	subi	r28, 0xFF	; 255
	}
	WS2801_SetColorUpdate(LS_COLOR_UIT);
	WS2811_SetMidUpdate(GroupALL_Start,GroupALL_Length,COLOR_UIT,Neen);
	_delay_ms(1000);
	WS2801_SetColorUpdate(LS_COLOR_WIT);
	for (int i=GroupALL_Start; i<GroupALL_Length+1; i++)
    1778:	ca 31       	cpi	r28, 0x1A	; 26
    177a:	59 f7       	brne	.-42     	; 0x1752 <TEST+0x64>
	{
		WS2811_SetMidUpdate(i,i,COLOR_WIT,Neen);
		_delay_ms(500);
	}
	WS2801_SetColorUpdate(LS_COLOR_UIT);
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	0e 94 3b 06 	call	0xc76	; 0xc76 <WS2801_SetColorUpdate>
	WS2811_SetMidUpdate(GroupALL_Start,GroupALL_Length,COLOR_UIT,Neen);
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	69 e1       	ldi	r22, 0x19	; 25
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	a9 01       	movw	r20, r18
    178c:	0e 94 a6 14 	call	0x294c	; 0x294c <WS2811_SetMidUpdate>
}
    1790:	cf 91       	pop	r28
    1792:	0f 91       	pop	r16
    1794:	08 95       	ret

00001796 <SONGMIX1>:

void SONGMIX1(void){
    1796:	ef 92       	push	r14
    1798:	0f 93       	push	r16
    179a:	1f 93       	push	r17
	#define LS_DELAY_1 250
	#define ROTATE_DELAY 69
	#define ROTATE_DELAYM 45
	uint8_t Intensity = 0x09;
	DEEL1(Intensity);
    179c:	89 e0       	ldi	r24, 0x09	; 9
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	0e 94 bb 07 	call	0xf76	; 0xf76 <DEEL1>
	//Rustig
	Intensity = 0x30;
	DEEL2(Intensity);
    17a4:	80 e3       	ldi	r24, 0x30	; 48
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	0e 94 81 08 	call	0x1102	; 0x1102 <DEEL2>

	Intensity = 0x50;
	DEEL3(Intensity);
    17ac:	80 e5       	ldi	r24, 0x50	; 80
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 d6 06 	call	0xdac	; 0xdac <DEEL3>

	//Climax
	Intensity = 0xFF;

	WS2811_SetGroupRainbowColor(Group4, 1);
    17b4:	84 e0       	ldi	r24, 0x04	; 4
    17b6:	61 e0       	ldi	r22, 0x01	; 1
    17b8:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2811_SetGroupRainbowColor(Group5, 9);
    17bc:	85 e0       	ldi	r24, 0x05	; 5
    17be:	69 e0       	ldi	r22, 0x09	; 9
    17c0:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2801_Set_Delay_Update(Intensity, 367, LS_DELAY_1, Ja); //367 - Climax
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	4f e6       	ldi	r20, 0x6F	; 111
    17c8:	51 e0       	ldi	r21, 0x01	; 1
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	0a ef       	ldi	r16, 0xFA	; 250
    17d0:	10 e0       	ldi	r17, 0x00	; 0
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	ee 24       	eor	r14, r14
    17d8:	e3 94       	inc	r14
    17da:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupRainbowColor(Group4, 9);
    17de:	84 e0       	ldi	r24, 0x04	; 4
    17e0:	69 e0       	ldi	r22, 0x09	; 9
    17e2:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2811_SetGroupRainbowColor(Group5, 1);
    17e6:	85 e0       	ldi	r24, 0x05	; 5
    17e8:	61 e0       	ldi	r22, 0x01	; 1
    17ea:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2801_Set_Delay_Update(Intensity, 676, LS_DELAY_1, Ja); //676
    17ee:	8f ef       	ldi	r24, 0xFF	; 255
    17f0:	44 ea       	ldi	r20, 0xA4	; 164
    17f2:	52 e0       	ldi	r21, 0x02	; 2
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	0a ef       	ldi	r16, 0xFA	; 250
    17fa:	10 e0       	ldi	r17, 0x00	; 0
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupRainbowColor(Group4, 1);
    1804:	84 e0       	ldi	r24, 0x04	; 4
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2811_SetGroupRainbowColor(Group5, 9);
    180c:	85 e0       	ldi	r24, 0x05	; 5
    180e:	69 e0       	ldi	r22, 0x09	; 9
    1810:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2801_Set_Delay_Update(Intensity, 400, LS_DELAY_1, Ja); //400
    1814:	8f ef       	ldi	r24, 0xFF	; 255
    1816:	40 e9       	ldi	r20, 0x90	; 144
    1818:	51 e0       	ldi	r21, 0x01	; 1
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	0a ef       	ldi	r16, 0xFA	; 250
    1820:	10 e0       	ldi	r17, 0x00	; 0
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupRainbowColor(Group4, 12);
    182a:	84 e0       	ldi	r24, 0x04	; 4
    182c:	6c e0       	ldi	r22, 0x0C	; 12
    182e:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2811_SetGroupRainbowColor(Group5, 1);
    1832:	85 e0       	ldi	r24, 0x05	; 5
    1834:	61 e0       	ldi	r22, 0x01	; 1
    1836:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2801_Set_Delay_Update(Intensity, 686, LS_DELAY_1, Ja); //686
    183a:	8f ef       	ldi	r24, 0xFF	; 255
    183c:	4e ea       	ldi	r20, 0xAE	; 174
    183e:	52 e0       	ldi	r21, 0x02	; 2
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	0a ef       	ldi	r16, 0xFA	; 250
    1846:	10 e0       	ldi	r17, 0x00	; 0
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupRainbowColor(Group4, 1);
    1850:	84 e0       	ldi	r24, 0x04	; 4
    1852:	61 e0       	ldi	r22, 0x01	; 1
    1854:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2811_SetGroupRainbowColor(Group5, 12);
    1858:	85 e0       	ldi	r24, 0x05	; 5
    185a:	6c e0       	ldi	r22, 0x0C	; 12
    185c:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2801_Set_Delay_Update(Intensity, 432, LS_DELAY_1, Ja); //432
    1860:	8f ef       	ldi	r24, 0xFF	; 255
    1862:	40 eb       	ldi	r20, 0xB0	; 176
    1864:	51 e0       	ldi	r21, 0x01	; 1
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	0a ef       	ldi	r16, 0xFA	; 250
    186c:	10 e0       	ldi	r17, 0x00	; 0
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupRainbowColor(Group4, 15);
    1876:	84 e0       	ldi	r24, 0x04	; 4
    1878:	6f e0       	ldi	r22, 0x0F	; 15
    187a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2811_SetGroupRainbowColor(Group5, 1);
    187e:	85 e0       	ldi	r24, 0x05	; 5
    1880:	61 e0       	ldi	r22, 0x01	; 1
    1882:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2801_Set_Delay_Update(Intensity, 373, LS_DELAY_1, Ja); //373
    1886:	8f ef       	ldi	r24, 0xFF	; 255
    1888:	45 e7       	ldi	r20, 0x75	; 117
    188a:	51 e0       	ldi	r21, 0x01	; 1
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	0a ef       	ldi	r16, 0xFA	; 250
    1892:	10 e0       	ldi	r17, 0x00	; 0
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupRainbowColor(Group4, 1);
    189c:	84 e0       	ldi	r24, 0x04	; 4
    189e:	61 e0       	ldi	r22, 0x01	; 1
    18a0:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2811_SetGroupRainbowColor(Group5, 15);
    18a4:	85 e0       	ldi	r24, 0x05	; 5
    18a6:	6f e0       	ldi	r22, 0x0F	; 15
    18a8:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2801_Set_Delay_Update(Intensity, 267, LS_DELAY_1, Ja); //267
    18ac:	8f ef       	ldi	r24, 0xFF	; 255
    18ae:	4b e0       	ldi	r20, 0x0B	; 11
    18b0:	51 e0       	ldi	r21, 0x01	; 1
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	0a ef       	ldi	r16, 0xFA	; 250
    18b8:	10 e0       	ldi	r17, 0x00	; 0
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupRainbowColor(Group4, 18);
    18c2:	84 e0       	ldi	r24, 0x04	; 4
    18c4:	62 e1       	ldi	r22, 0x12	; 18
    18c6:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2811_SetGroupRainbowColor(Group5, 1);
    18ca:	85 e0       	ldi	r24, 0x05	; 5
    18cc:	61 e0       	ldi	r22, 0x01	; 1
    18ce:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2801_Set_Delay_Update(Intensity, 432, LS_DELAY_1, Ja); //432
    18d2:	8f ef       	ldi	r24, 0xFF	; 255
    18d4:	40 eb       	ldi	r20, 0xB0	; 176
    18d6:	51 e0       	ldi	r21, 0x01	; 1
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	0a ef       	ldi	r16, 0xFA	; 250
    18de:	10 e0       	ldi	r17, 0x00	; 0
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_SetGroupRainbowColor(Group4, 1);
    18e8:	84 e0       	ldi	r24, 0x04	; 4
    18ea:	61 e0       	ldi	r22, 0x01	; 1
    18ec:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2811_SetGroupRainbowColor(Group5, 1);
    18f0:	85 e0       	ldi	r24, 0x05	; 5
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <WS2811_SetGroupRainbowColor>
	WS2811_SetMidAlternerend(Group4_Start, Group4_Length, COLOR_UIT, Ja);
    18f8:	81 e1       	ldi	r24, 0x11	; 17
    18fa:	69 e0       	ldi	r22, 0x09	; 9
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	a9 01       	movw	r20, r18
    1902:	01 e0       	ldi	r16, 0x01	; 1
    1904:	0e 94 66 14 	call	0x28cc	; 0x28cc <WS2811_SetMidAlternerend>
	WS2811_SetMidAlternerend(Group5_Start, Group5_Length, COLOR_UIT, Ja);
    1908:	87 e0       	ldi	r24, 0x07	; 7
    190a:	6a e0       	ldi	r22, 0x0A	; 10
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	a9 01       	movw	r20, r18
    1912:	0e 94 66 14 	call	0x28cc	; 0x28cc <WS2811_SetMidAlternerend>
	WS2801_Set_Delay_Update(Intensity, 676, LS_DELAY_1, Ja); //676
    1916:	8f ef       	ldi	r24, 0xFF	; 255
    1918:	44 ea       	ldi	r20, 0xA4	; 164
    191a:	52 e0       	ldi	r21, 0x02	; 2
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	0a ef       	ldi	r16, 0xFA	; 250
    1922:	10 e0       	ldi	r17, 0x00	; 0
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2811_RotateGroup(Group2, 1, Rechts, Neen, 0);
    192c:	82 e0       	ldi	r24, 0x02	; 2
    192e:	61 e0       	ldi	r22, 0x01	; 1
    1930:	42 e0       	ldi	r20, 0x02	; 2
    1932:	22 e0       	ldi	r18, 0x02	; 2
    1934:	00 e0       	ldi	r16, 0x00	; 0
    1936:	10 e0       	ldi	r17, 0x00	; 0
    1938:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group3, 1, Rechts, Neen, 0);
    193c:	83 e0       	ldi	r24, 0x03	; 3
    193e:	61 e0       	ldi	r22, 0x01	; 1
    1940:	42 e0       	ldi	r20, 0x02	; 2
    1942:	22 e0       	ldi	r18, 0x02	; 2
    1944:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group4, 1, Rechts, Neen, 0);
    1948:	84 e0       	ldi	r24, 0x04	; 4
    194a:	61 e0       	ldi	r22, 0x01	; 1
    194c:	42 e0       	ldi	r20, 0x02	; 2
    194e:	22 e0       	ldi	r18, 0x02	; 2
    1950:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2801_Set_Delay_Update(Intensity, 428-ROTATE_DELAYM, LS_DELAY_1, Ja); //428
    1954:	8f ef       	ldi	r24, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	51 e0       	ldi	r21, 0x01	; 1
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	0a ef       	ldi	r16, 0xFA	; 250
    1960:	10 e0       	ldi	r17, 0x00	; 0
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_RotateGroup(Group2, 1, Rechts, Neen, 0);
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	42 e0       	ldi	r20, 0x02	; 2
    1970:	22 e0       	ldi	r18, 0x02	; 2
    1972:	00 e0       	ldi	r16, 0x00	; 0
    1974:	10 e0       	ldi	r17, 0x00	; 0
    1976:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group3, 1, Rechts, Neen, 0);
    197a:	83 e0       	ldi	r24, 0x03	; 3
    197c:	61 e0       	ldi	r22, 0x01	; 1
    197e:	42 e0       	ldi	r20, 0x02	; 2
    1980:	22 e0       	ldi	r18, 0x02	; 2
    1982:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group4, 1, Rechts, Neen, 0);
    1986:	84 e0       	ldi	r24, 0x04	; 4
    1988:	61 e0       	ldi	r22, 0x01	; 1
    198a:	42 e0       	ldi	r20, 0x02	; 2
    198c:	22 e0       	ldi	r18, 0x02	; 2
    198e:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2801_Set_Delay_Update(Intensity, 631-ROTATE_DELAYM, LS_DELAY_1, Ja); //631
    1992:	8f ef       	ldi	r24, 0xFF	; 255
    1994:	4a e4       	ldi	r20, 0x4A	; 74
    1996:	52 e0       	ldi	r21, 0x02	; 2
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	0a ef       	ldi	r16, 0xFA	; 250
    199e:	10 e0       	ldi	r17, 0x00	; 0
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_RotateGroup(Group2, 1, Rechts, Neen, 0);
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	61 e0       	ldi	r22, 0x01	; 1
    19ac:	42 e0       	ldi	r20, 0x02	; 2
    19ae:	22 e0       	ldi	r18, 0x02	; 2
    19b0:	00 e0       	ldi	r16, 0x00	; 0
    19b2:	10 e0       	ldi	r17, 0x00	; 0
    19b4:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group3, 1, Rechts, Neen, 0);
    19b8:	83 e0       	ldi	r24, 0x03	; 3
    19ba:	61 e0       	ldi	r22, 0x01	; 1
    19bc:	42 e0       	ldi	r20, 0x02	; 2
    19be:	22 e0       	ldi	r18, 0x02	; 2
    19c0:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group4, 1, Rechts, Neen, 0);
    19c4:	84 e0       	ldi	r24, 0x04	; 4
    19c6:	61 e0       	ldi	r22, 0x01	; 1
    19c8:	42 e0       	ldi	r20, 0x02	; 2
    19ca:	22 e0       	ldi	r18, 0x02	; 2
    19cc:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2801_Set_Delay_Update(Intensity, 446-ROTATE_DELAYM, LS_DELAY_1, Ja); //446
    19d0:	8f ef       	ldi	r24, 0xFF	; 255
    19d2:	41 e9       	ldi	r20, 0x91	; 145
    19d4:	51 e0       	ldi	r21, 0x01	; 1
    19d6:	60 e0       	ldi	r22, 0x00	; 0
    19d8:	70 e0       	ldi	r23, 0x00	; 0
    19da:	0a ef       	ldi	r16, 0xFA	; 250
    19dc:	10 e0       	ldi	r17, 0x00	; 0
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_RotateGroup(Group2, 1, Rechts, Neen, 0);
    19e6:	82 e0       	ldi	r24, 0x02	; 2
    19e8:	61 e0       	ldi	r22, 0x01	; 1
    19ea:	42 e0       	ldi	r20, 0x02	; 2
    19ec:	22 e0       	ldi	r18, 0x02	; 2
    19ee:	00 e0       	ldi	r16, 0x00	; 0
    19f0:	10 e0       	ldi	r17, 0x00	; 0
    19f2:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group3, 1, Rechts, Neen, 0);
    19f6:	83 e0       	ldi	r24, 0x03	; 3
    19f8:	61 e0       	ldi	r22, 0x01	; 1
    19fa:	42 e0       	ldi	r20, 0x02	; 2
    19fc:	22 e0       	ldi	r18, 0x02	; 2
    19fe:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group4, 1, Rechts, Neen, 0);
    1a02:	84 e0       	ldi	r24, 0x04	; 4
    1a04:	61 e0       	ldi	r22, 0x01	; 1
    1a06:	42 e0       	ldi	r20, 0x02	; 2
    1a08:	22 e0       	ldi	r18, 0x02	; 2
    1a0a:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2801_Set_Delay_Update(Intensity, 391-ROTATE_DELAYM, LS_DELAY_1, Ja); //391
    1a0e:	8f ef       	ldi	r24, 0xFF	; 255
    1a10:	4a e5       	ldi	r20, 0x5A	; 90
    1a12:	51 e0       	ldi	r21, 0x01	; 1
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	0a ef       	ldi	r16, 0xFA	; 250
    1a1a:	10 e0       	ldi	r17, 0x00	; 0
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_RotateGroup(Group2, 1, Rechts, Neen, 0);
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	61 e0       	ldi	r22, 0x01	; 1
    1a28:	42 e0       	ldi	r20, 0x02	; 2
    1a2a:	22 e0       	ldi	r18, 0x02	; 2
    1a2c:	00 e0       	ldi	r16, 0x00	; 0
    1a2e:	10 e0       	ldi	r17, 0x00	; 0
    1a30:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group3, 1, Rechts, Neen, 0);
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	61 e0       	ldi	r22, 0x01	; 1
    1a38:	42 e0       	ldi	r20, 0x02	; 2
    1a3a:	22 e0       	ldi	r18, 0x02	; 2
    1a3c:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group4, 1, Rechts, Neen, 0);
    1a40:	84 e0       	ldi	r24, 0x04	; 4
    1a42:	61 e0       	ldi	r22, 0x01	; 1
    1a44:	42 e0       	ldi	r20, 0x02	; 2
    1a46:	22 e0       	ldi	r18, 0x02	; 2
    1a48:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2801_Set_Delay_Update(Intensity, 276-ROTATE_DELAYM, LS_DELAY_1, Ja); //276
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	47 ee       	ldi	r20, 0xE7	; 231
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	60 e0       	ldi	r22, 0x00	; 0
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	0a ef       	ldi	r16, 0xFA	; 250
    1a58:	10 e0       	ldi	r17, 0x00	; 0
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_RotateGroup(Group2, 1, Rechts, Neen, 0);
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	61 e0       	ldi	r22, 0x01	; 1
    1a66:	42 e0       	ldi	r20, 0x02	; 2
    1a68:	22 e0       	ldi	r18, 0x02	; 2
    1a6a:	00 e0       	ldi	r16, 0x00	; 0
    1a6c:	10 e0       	ldi	r17, 0x00	; 0
    1a6e:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group3, 1, Rechts, Neen, 0);
    1a72:	83 e0       	ldi	r24, 0x03	; 3
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	42 e0       	ldi	r20, 0x02	; 2
    1a78:	22 e0       	ldi	r18, 0x02	; 2
    1a7a:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group4, 1, Rechts, Neen, 0);
    1a7e:	84 e0       	ldi	r24, 0x04	; 4
    1a80:	61 e0       	ldi	r22, 0x01	; 1
    1a82:	42 e0       	ldi	r20, 0x02	; 2
    1a84:	22 e0       	ldi	r18, 0x02	; 2
    1a86:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2801_Set_Delay_Update(Intensity, 409-ROTATE_DELAYM, LS_DELAY_1, Ja); //409
    1a8a:	8f ef       	ldi	r24, 0xFF	; 255
    1a8c:	4c e6       	ldi	r20, 0x6C	; 108
    1a8e:	51 e0       	ldi	r21, 0x01	; 1
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	0a ef       	ldi	r16, 0xFA	; 250
    1a96:	10 e0       	ldi	r17, 0x00	; 0
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_RotateGroup(Group2, 1, Rechts, Neen, 0);
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	61 e0       	ldi	r22, 0x01	; 1
    1aa4:	42 e0       	ldi	r20, 0x02	; 2
    1aa6:	22 e0       	ldi	r18, 0x02	; 2
    1aa8:	00 e0       	ldi	r16, 0x00	; 0
    1aaa:	10 e0       	ldi	r17, 0x00	; 0
    1aac:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group3, 1, Rechts, Neen, 0);
    1ab0:	83 e0       	ldi	r24, 0x03	; 3
    1ab2:	61 e0       	ldi	r22, 0x01	; 1
    1ab4:	42 e0       	ldi	r20, 0x02	; 2
    1ab6:	22 e0       	ldi	r18, 0x02	; 2
    1ab8:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group4, 1, Rechts, Neen, 0);
    1abc:	84 e0       	ldi	r24, 0x04	; 4
    1abe:	61 e0       	ldi	r22, 0x01	; 1
    1ac0:	42 e0       	ldi	r20, 0x02	; 2
    1ac2:	22 e0       	ldi	r18, 0x02	; 2
    1ac4:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2801_Set_Delay_Update(Intensity, 387-ROTATE_DELAYM, LS_DELAY_1, Ja); //387
    1ac8:	8f ef       	ldi	r24, 0xFF	; 255
    1aca:	46 e5       	ldi	r20, 0x56	; 86
    1acc:	51 e0       	ldi	r21, 0x01	; 1
    1ace:	60 e0       	ldi	r22, 0x00	; 0
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	0a ef       	ldi	r16, 0xFA	; 250
    1ad4:	10 e0       	ldi	r17, 0x00	; 0
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_RotateGroup(Group2, 1, Rechts, Neen, 0);
    1ade:	82 e0       	ldi	r24, 0x02	; 2
    1ae0:	61 e0       	ldi	r22, 0x01	; 1
    1ae2:	42 e0       	ldi	r20, 0x02	; 2
    1ae4:	22 e0       	ldi	r18, 0x02	; 2
    1ae6:	00 e0       	ldi	r16, 0x00	; 0
    1ae8:	10 e0       	ldi	r17, 0x00	; 0
    1aea:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group3, 1, Rechts, Neen, 0);
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	61 e0       	ldi	r22, 0x01	; 1
    1af2:	42 e0       	ldi	r20, 0x02	; 2
    1af4:	22 e0       	ldi	r18, 0x02	; 2
    1af6:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group4, 1, Rechts, Neen, 0);
    1afa:	84 e0       	ldi	r24, 0x04	; 4
    1afc:	61 e0       	ldi	r22, 0x01	; 1
    1afe:	42 e0       	ldi	r20, 0x02	; 2
    1b00:	22 e0       	ldi	r18, 0x02	; 2
    1b02:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2801_Set_Delay_Update(Intensity, 276-ROTATE_DELAYM, LS_DELAY_1, Ja); //276
    1b06:	8f ef       	ldi	r24, 0xFF	; 255
    1b08:	47 ee       	ldi	r20, 0xE7	; 231
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	0a ef       	ldi	r16, 0xFA	; 250
    1b12:	10 e0       	ldi	r17, 0x00	; 0
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_RotateGroup(Group2, 1, Rechts, Neen, 0);
    1b1c:	82 e0       	ldi	r24, 0x02	; 2
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	42 e0       	ldi	r20, 0x02	; 2
    1b22:	22 e0       	ldi	r18, 0x02	; 2
    1b24:	00 e0       	ldi	r16, 0x00	; 0
    1b26:	10 e0       	ldi	r17, 0x00	; 0
    1b28:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group3, 1, Rechts, Neen, 0);
    1b2c:	83 e0       	ldi	r24, 0x03	; 3
    1b2e:	61 e0       	ldi	r22, 0x01	; 1
    1b30:	42 e0       	ldi	r20, 0x02	; 2
    1b32:	22 e0       	ldi	r18, 0x02	; 2
    1b34:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group4, 1, Rechts, Neen, 0);
    1b38:	84 e0       	ldi	r24, 0x04	; 4
    1b3a:	61 e0       	ldi	r22, 0x01	; 1
    1b3c:	42 e0       	ldi	r20, 0x02	; 2
    1b3e:	22 e0       	ldi	r18, 0x02	; 2
    1b40:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2801_Set_Delay_Update(Intensity, 414-ROTATE_DELAYM, LS_DELAY_1, Ja); //414
    1b44:	8f ef       	ldi	r24, 0xFF	; 255
    1b46:	41 e7       	ldi	r20, 0x71	; 113
    1b48:	51 e0       	ldi	r21, 0x01	; 1
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	0a ef       	ldi	r16, 0xFA	; 250
    1b50:	10 e0       	ldi	r17, 0x00	; 0
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2811_RotateGroup(Group2, 1, Rechts, Neen, 0);
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	61 e0       	ldi	r22, 0x01	; 1
    1b5e:	42 e0       	ldi	r20, 0x02	; 2
    1b60:	22 e0       	ldi	r18, 0x02	; 2
    1b62:	00 e0       	ldi	r16, 0x00	; 0
    1b64:	10 e0       	ldi	r17, 0x00	; 0
    1b66:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group3, 1, Rechts, Neen, 0);
    1b6a:	83 e0       	ldi	r24, 0x03	; 3
    1b6c:	61 e0       	ldi	r22, 0x01	; 1
    1b6e:	42 e0       	ldi	r20, 0x02	; 2
    1b70:	22 e0       	ldi	r18, 0x02	; 2
    1b72:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_RotateGroup(Group4, 1, Rechts, Neen, 0);
    1b76:	84 e0       	ldi	r24, 0x04	; 4
    1b78:	61 e0       	ldi	r22, 0x01	; 1
    1b7a:	42 e0       	ldi	r20, 0x02	; 2
    1b7c:	22 e0       	ldi	r18, 0x02	; 2
    1b7e:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2801_Set_Delay_Update(Intensity, 672-ROTATE_DELAYM, LS_DELAY_1, Ja); //672
    1b82:	8f ef       	ldi	r24, 0xFF	; 255
    1b84:	43 e7       	ldi	r20, 0x73	; 115
    1b86:	52 e0       	ldi	r21, 0x02	; 2
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	70 e0       	ldi	r23, 0x00	; 0
    1b8c:	0a ef       	ldi	r16, 0xFA	; 250
    1b8e:	10 e0       	ldi	r17, 0x00	; 0
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2801_Set_Delay_Update(Intensity, 455, LS_DELAY_1, Ja); //455
    1b98:	8f ef       	ldi	r24, 0xFF	; 255
    1b9a:	47 ec       	ldi	r20, 0xC7	; 199
    1b9c:	51 e0       	ldi	r21, 0x01	; 1
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	0a ef       	ldi	r16, 0xFA	; 250
    1ba4:	10 e0       	ldi	r17, 0x00	; 0
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 644, LS_DELAY_1, Ja); //644
    1bae:	8f ef       	ldi	r24, 0xFF	; 255
    1bb0:	44 e8       	ldi	r20, 0x84	; 132
    1bb2:	52 e0       	ldi	r21, 0x02	; 2
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	0a ef       	ldi	r16, 0xFA	; 250
    1bba:	10 e0       	ldi	r17, 0x00	; 0
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 419, LS_DELAY_1, Ja); //419
    1bc4:	8f ef       	ldi	r24, 0xFF	; 255
    1bc6:	43 ea       	ldi	r20, 0xA3	; 163
    1bc8:	51 e0       	ldi	r21, 0x01	; 1
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	0a ef       	ldi	r16, 0xFA	; 250
    1bd0:	10 e0       	ldi	r17, 0x00	; 0
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 386, LS_DELAY_1, Ja); //386
    1bda:	8f ef       	ldi	r24, 0xFF	; 255
    1bdc:	42 e8       	ldi	r20, 0x82	; 130
    1bde:	51 e0       	ldi	r21, 0x01	; 1
    1be0:	60 e0       	ldi	r22, 0x00	; 0
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	0a ef       	ldi	r16, 0xFA	; 250
    1be6:	10 e0       	ldi	r17, 0x00	; 0
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 258, LS_DELAY_1, Ja); //258
    1bf0:	8f ef       	ldi	r24, 0xFF	; 255
    1bf2:	42 e0       	ldi	r20, 0x02	; 2
    1bf4:	51 e0       	ldi	r21, 0x01	; 1
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	70 e0       	ldi	r23, 0x00	; 0
    1bfa:	0a ef       	ldi	r16, 0xFA	; 250
    1bfc:	10 e0       	ldi	r17, 0x00	; 0
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 423, LS_DELAY_1, Ja); //423
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	47 ea       	ldi	r20, 0xA7	; 167
    1c0a:	51 e0       	ldi	r21, 0x01	; 1
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	0a ef       	ldi	r16, 0xFA	; 250
    1c12:	10 e0       	ldi	r17, 0x00	; 0
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 396, LS_DELAY_1, Ja); //396
    1c1c:	8f ef       	ldi	r24, 0xFF	; 255
    1c1e:	4c e8       	ldi	r20, 0x8C	; 140
    1c20:	51 e0       	ldi	r21, 0x01	; 1
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	70 e0       	ldi	r23, 0x00	; 0
    1c26:	0a ef       	ldi	r16, 0xFA	; 250
    1c28:	10 e0       	ldi	r17, 0x00	; 0
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 281, LS_DELAY_1, Ja); //281
    1c32:	8f ef       	ldi	r24, 0xFF	; 255
    1c34:	49 e1       	ldi	r20, 0x19	; 25
    1c36:	51 e0       	ldi	r21, 0x01	; 1
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	0a ef       	ldi	r16, 0xFA	; 250
    1c3e:	10 e0       	ldi	r17, 0x00	; 0
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 432, LS_DELAY_1, Ja); //432 -
    1c48:	8f ef       	ldi	r24, 0xFF	; 255
    1c4a:	40 eb       	ldi	r20, 0xB0	; 176
    1c4c:	51 e0       	ldi	r21, 0x01	; 1
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	0a ef       	ldi	r16, 0xFA	; 250
    1c54:	10 e0       	ldi	r17, 0x00	; 0
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 635, LS_DELAY_1, Ja); //635
    1c5e:	8f ef       	ldi	r24, 0xFF	; 255
    1c60:	4b e7       	ldi	r20, 0x7B	; 123
    1c62:	52 e0       	ldi	r21, 0x02	; 2
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	0a ef       	ldi	r16, 0xFA	; 250
    1c6a:	10 e0       	ldi	r17, 0x00	; 0
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2801_Set_Delay_Update(Intensity, 469, LS_DELAY_1, Ja); //469
    1c74:	8f ef       	ldi	r24, 0xFF	; 255
    1c76:	45 ed       	ldi	r20, 0xD5	; 213
    1c78:	51 e0       	ldi	r21, 0x01	; 1
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	70 e0       	ldi	r23, 0x00	; 0
    1c7e:	0a ef       	ldi	r16, 0xFA	; 250
    1c80:	10 e0       	ldi	r17, 0x00	; 0
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 400, LS_DELAY_1, Ja); //400
    1c8a:	8f ef       	ldi	r24, 0xFF	; 255
    1c8c:	40 e9       	ldi	r20, 0x90	; 144
    1c8e:	51 e0       	ldi	r21, 0x01	; 1
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	0a ef       	ldi	r16, 0xFA	; 250
    1c96:	10 e0       	ldi	r17, 0x00	; 0
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 276, LS_DELAY_1, Ja); //276
    1ca0:	8f ef       	ldi	r24, 0xFF	; 255
    1ca2:	44 e1       	ldi	r20, 0x14	; 20
    1ca4:	51 e0       	ldi	r21, 0x01	; 1
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	0a ef       	ldi	r16, 0xFA	; 250
    1cac:	10 e0       	ldi	r17, 0x00	; 0
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2801_Set_Delay_Update(Intensity, 401, LS_DELAY_1, Ja); //401 - Hard stuk tot einde climax
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	41 e9       	ldi	r20, 0x91	; 145
    1cba:	51 e0       	ldi	r21, 0x01	; 1
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	70 e0       	ldi	r23, 0x00	; 0
    1cc0:	0a ef       	ldi	r16, 0xFA	; 250
    1cc2:	10 e0       	ldi	r17, 0x00	; 0
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 368, LS_DELAY_1, Ja); //368
    1ccc:	8f ef       	ldi	r24, 0xFF	; 255
    1cce:	40 e7       	ldi	r20, 0x70	; 112
    1cd0:	51 e0       	ldi	r21, 0x01	; 1
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	70 e0       	ldi	r23, 0x00	; 0
    1cd6:	0a ef       	ldi	r16, 0xFA	; 250
    1cd8:	10 e0       	ldi	r17, 0x00	; 0
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 317, LS_DELAY_1, Ja); //317
    1ce2:	8f ef       	ldi	r24, 0xFF	; 255
    1ce4:	4d e3       	ldi	r20, 0x3D	; 61
    1ce6:	51 e0       	ldi	r21, 0x01	; 1
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	70 e0       	ldi	r23, 0x00	; 0
    1cec:	0a ef       	ldi	r16, 0xFA	; 250
    1cee:	10 e0       	ldi	r17, 0x00	; 0
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 442, LS_DELAY_1, Ja); //442
    1cf8:	8f ef       	ldi	r24, 0xFF	; 255
    1cfa:	4a eb       	ldi	r20, 0xBA	; 186
    1cfc:	51 e0       	ldi	r21, 0x01	; 1
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	0a ef       	ldi	r16, 0xFA	; 250
    1d04:	10 e0       	ldi	r17, 0x00	; 0
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 359, LS_DELAY_1, Ja); //359
    1d0e:	8f ef       	ldi	r24, 0xFF	; 255
    1d10:	47 e6       	ldi	r20, 0x67	; 103
    1d12:	51 e0       	ldi	r21, 0x01	; 1
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	0a ef       	ldi	r16, 0xFA	; 250
    1d1a:	10 e0       	ldi	r17, 0x00	; 0
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 299, LS_DELAY_1, Ja); //299
    1d24:	8f ef       	ldi	r24, 0xFF	; 255
    1d26:	4b e2       	ldi	r20, 0x2B	; 43
    1d28:	51 e0       	ldi	r21, 0x01	; 1
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	0a ef       	ldi	r16, 0xFA	; 250
    1d30:	10 e0       	ldi	r17, 0x00	; 0
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 837, LS_DELAY_1, Ja); //837
    1d3a:	8f ef       	ldi	r24, 0xFF	; 255
    1d3c:	45 e4       	ldi	r20, 0x45	; 69
    1d3e:	53 e0       	ldi	r21, 0x03	; 3
    1d40:	60 e0       	ldi	r22, 0x00	; 0
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	0a ef       	ldi	r16, 0xFA	; 250
    1d46:	10 e0       	ldi	r17, 0x00	; 0
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2801_Set_Delay_Update(Intensity, 216, LS_DELAY_1, Ja); //216 - Einde climax
    1d50:	8f ef       	ldi	r24, 0xFF	; 255
    1d52:	48 ed       	ldi	r20, 0xD8	; 216
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	60 e0       	ldi	r22, 0x00	; 0
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	0a ef       	ldi	r16, 0xFA	; 250
    1d5c:	10 e0       	ldi	r17, 0x00	; 0
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 428, LS_DELAY_1, Ja); //428
    1d66:	8f ef       	ldi	r24, 0xFF	; 255
    1d68:	4c ea       	ldi	r20, 0xAC	; 172
    1d6a:	51 e0       	ldi	r21, 0x01	; 1
    1d6c:	60 e0       	ldi	r22, 0x00	; 0
    1d6e:	70 e0       	ldi	r23, 0x00	; 0
    1d70:	0a ef       	ldi	r16, 0xFA	; 250
    1d72:	10 e0       	ldi	r17, 0x00	; 0
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 433, LS_DELAY_1, Ja); //433
    1d7c:	8f ef       	ldi	r24, 0xFF	; 255
    1d7e:	41 eb       	ldi	r20, 0xB1	; 177
    1d80:	51 e0       	ldi	r21, 0x01	; 1
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	70 e0       	ldi	r23, 0x00	; 0
    1d86:	0a ef       	ldi	r16, 0xFA	; 250
    1d88:	10 e0       	ldi	r17, 0x00	; 0
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 294, LS_DELAY_1, Ja); //294
    1d92:	8f ef       	ldi	r24, 0xFF	; 255
    1d94:	46 e2       	ldi	r20, 0x26	; 38
    1d96:	51 e0       	ldi	r21, 0x01	; 1
    1d98:	60 e0       	ldi	r22, 0x00	; 0
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	0a ef       	ldi	r16, 0xFA	; 250
    1d9e:	10 e0       	ldi	r17, 0x00	; 0
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 810, LS_DELAY_1, Ja); //810
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
    1daa:	4a e2       	ldi	r20, 0x2A	; 42
    1dac:	53 e0       	ldi	r21, 0x03	; 3
    1dae:	60 e0       	ldi	r22, 0x00	; 0
    1db0:	70 e0       	ldi	r23, 0x00	; 0
    1db2:	0a ef       	ldi	r16, 0xFA	; 250
    1db4:	10 e0       	ldi	r17, 0x00	; 0
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2801_Set_Delay_Update(Intensity, 299, LS_DELAY_1, Ja); //299
    1dbe:	8f ef       	ldi	r24, 0xFF	; 255
    1dc0:	4b e2       	ldi	r20, 0x2B	; 43
    1dc2:	51 e0       	ldi	r21, 0x01	; 1
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	0a ef       	ldi	r16, 0xFA	; 250
    1dca:	10 e0       	ldi	r17, 0x00	; 0
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 377, LS_DELAY_1, Ja); //377
    1dd4:	8f ef       	ldi	r24, 0xFF	; 255
    1dd6:	49 e7       	ldi	r20, 0x79	; 121
    1dd8:	51 e0       	ldi	r21, 0x01	; 1
    1dda:	60 e0       	ldi	r22, 0x00	; 0
    1ddc:	70 e0       	ldi	r23, 0x00	; 0
    1dde:	0a ef       	ldi	r16, 0xFA	; 250
    1de0:	10 e0       	ldi	r17, 0x00	; 0
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 405, LS_DELAY_1, Ja); //405
    1dea:	8f ef       	ldi	r24, 0xFF	; 255
    1dec:	45 e9       	ldi	r20, 0x95	; 149
    1dee:	51 e0       	ldi	r21, 0x01	; 1
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	70 e0       	ldi	r23, 0x00	; 0
    1df4:	0a ef       	ldi	r16, 0xFA	; 250
    1df6:	10 e0       	ldi	r17, 0x00	; 0
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 313, LS_DELAY_1, Ja); //313
    1e00:	8f ef       	ldi	r24, 0xFF	; 255
    1e02:	49 e3       	ldi	r20, 0x39	; 57
    1e04:	51 e0       	ldi	r21, 0x01	; 1
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	0a ef       	ldi	r16, 0xFA	; 250
    1e0c:	10 e0       	ldi	r17, 0x00	; 0
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 1044, LS_DELAY_1, Ja); //1044
    1e16:	8f ef       	ldi	r24, 0xFF	; 255
    1e18:	44 e1       	ldi	r20, 0x14	; 20
    1e1a:	54 e0       	ldi	r21, 0x04	; 4
    1e1c:	60 e0       	ldi	r22, 0x00	; 0
    1e1e:	70 e0       	ldi	r23, 0x00	; 0
    1e20:	0a ef       	ldi	r16, 0xFA	; 250
    1e22:	10 e0       	ldi	r17, 0x00	; 0
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2801_Set_Delay_Update(Intensity, 401, LS_DELAY_1, Ja); //401
    1e2c:	8f ef       	ldi	r24, 0xFF	; 255
    1e2e:	41 e9       	ldi	r20, 0x91	; 145
    1e30:	51 e0       	ldi	r21, 0x01	; 1
    1e32:	60 e0       	ldi	r22, 0x00	; 0
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	0a ef       	ldi	r16, 0xFA	; 250
    1e38:	10 e0       	ldi	r17, 0x00	; 0
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 414, LS_DELAY_1, Ja); //414
    1e42:	8f ef       	ldi	r24, 0xFF	; 255
    1e44:	4e e9       	ldi	r20, 0x9E	; 158
    1e46:	51 e0       	ldi	r21, 0x01	; 1
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	70 e0       	ldi	r23, 0x00	; 0
    1e4c:	0a ef       	ldi	r16, 0xFA	; 250
    1e4e:	10 e0       	ldi	r17, 0x00	; 0
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 303, LS_DELAY_1, Ja); //303
    1e58:	8f ef       	ldi	r24, 0xFF	; 255
    1e5a:	4f e2       	ldi	r20, 0x2F	; 47
    1e5c:	51 e0       	ldi	r21, 0x01	; 1
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	70 e0       	ldi	r23, 0x00	; 0
    1e62:	0a ef       	ldi	r16, 0xFA	; 250
    1e64:	10 e0       	ldi	r17, 0x00	; 0
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 801, LS_DELAY_1, Ja); //801
    1e6e:	8f ef       	ldi	r24, 0xFF	; 255
    1e70:	41 e2       	ldi	r20, 0x21	; 33
    1e72:	53 e0       	ldi	r21, 0x03	; 3
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	70 e0       	ldi	r23, 0x00	; 0
    1e78:	0a ef       	ldi	r16, 0xFA	; 250
    1e7a:	10 e0       	ldi	r17, 0x00	; 0
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2801_Set_Delay_Update(Intensity, 308, LS_DELAY_1, Ja); //308
    1e84:	8f ef       	ldi	r24, 0xFF	; 255
    1e86:	44 e3       	ldi	r20, 0x34	; 52
    1e88:	51 e0       	ldi	r21, 0x01	; 1
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	70 e0       	ldi	r23, 0x00	; 0
    1e8e:	0a ef       	ldi	r16, 0xFA	; 250
    1e90:	10 e0       	ldi	r17, 0x00	; 0
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 396, LS_DELAY_1, Ja); //396
    1e9a:	8f ef       	ldi	r24, 0xFF	; 255
    1e9c:	4c e8       	ldi	r20, 0x8C	; 140
    1e9e:	51 e0       	ldi	r21, 0x01	; 1
    1ea0:	60 e0       	ldi	r22, 0x00	; 0
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	0a ef       	ldi	r16, 0xFA	; 250
    1ea6:	10 e0       	ldi	r17, 0x00	; 0
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 359, LS_DELAY_1, Ja); //359
    1eb0:	8f ef       	ldi	r24, 0xFF	; 255
    1eb2:	47 e6       	ldi	r20, 0x67	; 103
    1eb4:	51 e0       	ldi	r21, 0x01	; 1
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	70 e0       	ldi	r23, 0x00	; 0
    1eba:	0a ef       	ldi	r16, 0xFA	; 250
    1ebc:	10 e0       	ldi	r17, 0x00	; 0
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 1127+2240, LS_DELAY_1, Ja); //1127
    1ec6:	8f ef       	ldi	r24, 0xFF	; 255
    1ec8:	47 e2       	ldi	r20, 0x27	; 39
    1eca:	5d e0       	ldi	r21, 0x0D	; 13
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	70 e0       	ldi	r23, 0x00	; 0
    1ed0:	0a ef       	ldi	r16, 0xFA	; 250
    1ed2:	10 e0       	ldi	r17, 0x00	; 0
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	//WS2801_Set_Delay_Update(Intensity, 2240, LS_DELAY_1, Ja); //2240 - Polka stuk

	WS2801_Set_Delay_Update(Intensity, 226, LS_DELAY_1, Ja); //226 - Harder stuk
    1edc:	8f ef       	ldi	r24, 0xFF	; 255
    1ede:	42 ee       	ldi	r20, 0xE2	; 226
    1ee0:	50 e0       	ldi	r21, 0x00	; 0
    1ee2:	60 e0       	ldi	r22, 0x00	; 0
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	0a ef       	ldi	r16, 0xFA	; 250
    1ee8:	10 e0       	ldi	r17, 0x00	; 0
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 340, LS_DELAY_1, Ja); //340
    1ef2:	8f ef       	ldi	r24, 0xFF	; 255
    1ef4:	44 e5       	ldi	r20, 0x54	; 84
    1ef6:	51 e0       	ldi	r21, 0x01	; 1
    1ef8:	60 e0       	ldi	r22, 0x00	; 0
    1efa:	70 e0       	ldi	r23, 0x00	; 0
    1efc:	0a ef       	ldi	r16, 0xFA	; 250
    1efe:	10 e0       	ldi	r17, 0x00	; 0
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 405, LS_DELAY_1, Ja); //405
    1f08:	8f ef       	ldi	r24, 0xFF	; 255
    1f0a:	45 e9       	ldi	r20, 0x95	; 149
    1f0c:	51 e0       	ldi	r21, 0x01	; 1
    1f0e:	60 e0       	ldi	r22, 0x00	; 0
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	0a ef       	ldi	r16, 0xFA	; 250
    1f14:	10 e0       	ldi	r17, 0x00	; 0
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 322, LS_DELAY_1, Ja); //322
    1f1e:	8f ef       	ldi	r24, 0xFF	; 255
    1f20:	42 e4       	ldi	r20, 0x42	; 66
    1f22:	51 e0       	ldi	r21, 0x01	; 1
    1f24:	60 e0       	ldi	r22, 0x00	; 0
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	0a ef       	ldi	r16, 0xFA	; 250
    1f2a:	10 e0       	ldi	r17, 0x00	; 0
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 502, LS_DELAY_1, Ja); //502
    1f34:	8f ef       	ldi	r24, 0xFF	; 255
    1f36:	46 ef       	ldi	r20, 0xF6	; 246
    1f38:	51 e0       	ldi	r21, 0x01	; 1
    1f3a:	60 e0       	ldi	r22, 0x00	; 0
    1f3c:	70 e0       	ldi	r23, 0x00	; 0
    1f3e:	0a ef       	ldi	r16, 0xFA	; 250
    1f40:	10 e0       	ldi	r17, 0x00	; 0
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 450+2319, LS_DELAY_1, Ja); //450
    1f4a:	8f ef       	ldi	r24, 0xFF	; 255
    1f4c:	41 ed       	ldi	r20, 0xD1	; 209
    1f4e:	5a e0       	ldi	r21, 0x0A	; 10
    1f50:	60 e0       	ldi	r22, 0x00	; 0
    1f52:	70 e0       	ldi	r23, 0x00	; 0
    1f54:	0a ef       	ldi	r16, 0xFA	; 250
    1f56:	10 e0       	ldi	r17, 0x00	; 0
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	//WS2801_Set_Delay_Update(Intensity, 2319, LS_DELAY_1, Ja); //2319 - Polka stuk

	WS2801_Set_Delay_Update(Intensity, 405, LS_DELAY_1, Ja); //405
    1f60:	8f ef       	ldi	r24, 0xFF	; 255
    1f62:	45 e9       	ldi	r20, 0x95	; 149
    1f64:	51 e0       	ldi	r21, 0x01	; 1
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	0a ef       	ldi	r16, 0xFA	; 250
    1f6c:	10 e0       	ldi	r17, 0x00	; 0
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 373, LS_DELAY_1, Ja); //373
    1f76:	8f ef       	ldi	r24, 0xFF	; 255
    1f78:	45 e7       	ldi	r20, 0x75	; 117
    1f7a:	51 e0       	ldi	r21, 0x01	; 1
    1f7c:	60 e0       	ldi	r22, 0x00	; 0
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	0a ef       	ldi	r16, 0xFA	; 250
    1f82:	10 e0       	ldi	r17, 0x00	; 0
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 285, LS_DELAY_1, Ja); //285
    1f8c:	8f ef       	ldi	r24, 0xFF	; 255
    1f8e:	4d e1       	ldi	r20, 0x1D	; 29
    1f90:	51 e0       	ldi	r21, 0x01	; 1
    1f92:	60 e0       	ldi	r22, 0x00	; 0
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	0a ef       	ldi	r16, 0xFA	; 250
    1f98:	10 e0       	ldi	r17, 0x00	; 0
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 906+2126, LS_DELAY_1, Ja); //906
    1fa2:	8f ef       	ldi	r24, 0xFF	; 255
    1fa4:	48 ed       	ldi	r20, 0xD8	; 216
    1fa6:	5b e0       	ldi	r21, 0x0B	; 11
    1fa8:	60 e0       	ldi	r22, 0x00	; 0
    1faa:	70 e0       	ldi	r23, 0x00	; 0
    1fac:	0a ef       	ldi	r16, 0xFA	; 250
    1fae:	10 e0       	ldi	r17, 0x00	; 0
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	//WS2801_Set_Delay_Update(Intensity, 2126, LS_DELAY_1, Ja); //2126 - Polka stuk

	WS2801_Set_Delay_Update(Intensity, 294, LS_DELAY_1, Ja); //294
    1fb8:	8f ef       	ldi	r24, 0xFF	; 255
    1fba:	46 e2       	ldi	r20, 0x26	; 38
    1fbc:	51 e0       	ldi	r21, 0x01	; 1
    1fbe:	60 e0       	ldi	r22, 0x00	; 0
    1fc0:	70 e0       	ldi	r23, 0x00	; 0
    1fc2:	0a ef       	ldi	r16, 0xFA	; 250
    1fc4:	10 e0       	ldi	r17, 0x00	; 0
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 364, LS_DELAY_1, Ja); //364
    1fce:	8f ef       	ldi	r24, 0xFF	; 255
    1fd0:	4c e6       	ldi	r20, 0x6C	; 108
    1fd2:	51 e0       	ldi	r21, 0x01	; 1
    1fd4:	60 e0       	ldi	r22, 0x00	; 0
    1fd6:	70 e0       	ldi	r23, 0x00	; 0
    1fd8:	0a ef       	ldi	r16, 0xFA	; 250
    1fda:	10 e0       	ldi	r17, 0x00	; 0
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 382, LS_DELAY_1, Ja); //382
    1fe4:	8f ef       	ldi	r24, 0xFF	; 255
    1fe6:	4e e7       	ldi	r20, 0x7E	; 126
    1fe8:	51 e0       	ldi	r21, 0x01	; 1
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	0a ef       	ldi	r16, 0xFA	; 250
    1ff0:	10 e0       	ldi	r17, 0x00	; 0
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 294, LS_DELAY_1, Ja); //294
    1ffa:	8f ef       	ldi	r24, 0xFF	; 255
    1ffc:	46 e2       	ldi	r20, 0x26	; 38
    1ffe:	51 e0       	ldi	r21, 0x01	; 1
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	0a ef       	ldi	r16, 0xFA	; 250
    2006:	10 e0       	ldi	r17, 0x00	; 0
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 506, LS_DELAY_1, Ja); //506
    2010:	8f ef       	ldi	r24, 0xFF	; 255
    2012:	4a ef       	ldi	r20, 0xFA	; 250
    2014:	51 e0       	ldi	r21, 0x01	; 1
    2016:	60 e0       	ldi	r22, 0x00	; 0
    2018:	70 e0       	ldi	r23, 0x00	; 0
    201a:	0a ef       	ldi	r16, 0xFA	; 250
    201c:	10 e0       	ldi	r17, 0x00	; 0
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 423+2361, LS_DELAY_1, Ja); //423
    2026:	8f ef       	ldi	r24, 0xFF	; 255
    2028:	40 ee       	ldi	r20, 0xE0	; 224
    202a:	5a e0       	ldi	r21, 0x0A	; 10
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	0a ef       	ldi	r16, 0xFA	; 250
    2032:	10 e0       	ldi	r17, 0x00	; 0
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	//WS2801_Set_Delay_Update(Intensity, 2361, LS_DELAY_1, Ja); //2361 - Polka stuk

	WS2801_Set_Delay_Update(Intensity, 414, LS_DELAY_1, Ja); //414
    203c:	8f ef       	ldi	r24, 0xFF	; 255
    203e:	4e e9       	ldi	r20, 0x9E	; 158
    2040:	51 e0       	ldi	r21, 0x01	; 1
    2042:	60 e0       	ldi	r22, 0x00	; 0
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	0a ef       	ldi	r16, 0xFA	; 250
    2048:	10 e0       	ldi	r17, 0x00	; 0
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 363, LS_DELAY_1, Ja); //363
    2052:	8f ef       	ldi	r24, 0xFF	; 255
    2054:	4b e6       	ldi	r20, 0x6B	; 107
    2056:	51 e0       	ldi	r21, 0x01	; 1
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	0a ef       	ldi	r16, 0xFA	; 250
    205e:	10 e0       	ldi	r17, 0x00	; 0
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 281, LS_DELAY_1, Ja); //281
    2068:	8f ef       	ldi	r24, 0xFF	; 255
    206a:	49 e1       	ldi	r20, 0x19	; 25
    206c:	51 e0       	ldi	r21, 0x01	; 1
    206e:	60 e0       	ldi	r22, 0x00	; 0
    2070:	70 e0       	ldi	r23, 0x00	; 0
    2072:	0a ef       	ldi	r16, 0xFA	; 250
    2074:	10 e0       	ldi	r17, 0x00	; 0
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 1615, LS_DELAY_1, Ja); //1615
    207e:	8f ef       	ldi	r24, 0xFF	; 255
    2080:	4f e4       	ldi	r20, 0x4F	; 79
    2082:	56 e0       	ldi	r21, 0x06	; 6
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	0a ef       	ldi	r16, 0xFA	; 250
    208a:	10 e0       	ldi	r17, 0x00	; 0
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2801_Set_Delay_Update(Intensity, 1108, LS_DELAY_1, Ja); //1108 - Simbaal
    2094:	8f ef       	ldi	r24, 0xFF	; 255
    2096:	44 e5       	ldi	r20, 0x54	; 84
    2098:	54 e0       	ldi	r21, 0x04	; 4
    209a:	60 e0       	ldi	r22, 0x00	; 0
    209c:	70 e0       	ldi	r23, 0x00	; 0
    209e:	0a ef       	ldi	r16, 0xFA	; 250
    20a0:	10 e0       	ldi	r17, 0x00	; 0
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2801_Set_Delay_Update(Intensity, 635+2646, LS_DELAY_1, Ja); //635 - Simbaal
    20aa:	8f ef       	ldi	r24, 0xFF	; 255
    20ac:	41 ed       	ldi	r20, 0xD1	; 209
    20ae:	5c e0       	ldi	r21, 0x0C	; 12
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	70 e0       	ldi	r23, 0x00	; 0
    20b4:	0a ef       	ldi	r16, 0xFA	; 250
    20b6:	10 e0       	ldi	r17, 0x00	; 0
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	//WS2801_Set_Delay_Update(Intensity, 2646, LS_DELAY_1, Ja); //2646 - Polka stuk

	WS2801_Set_Delay_Update(Intensity, 1058, LS_DELAY_1, Ja); //1058 - Simbaal
    20c0:	8f ef       	ldi	r24, 0xFF	; 255
    20c2:	42 e2       	ldi	r20, 0x22	; 34
    20c4:	54 e0       	ldi	r21, 0x04	; 4
    20c6:	60 e0       	ldi	r22, 0x00	; 0
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	0a ef       	ldi	r16, 0xFA	; 250
    20cc:	10 e0       	ldi	r17, 0x00	; 0
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2801_Set_Delay_Update(Intensity, 635+2213+1596, LS_DELAY_1, Ja); //635 - Simbaal
    20d6:	8f ef       	ldi	r24, 0xFF	; 255
    20d8:	4c e5       	ldi	r20, 0x5C	; 92
    20da:	51 e1       	ldi	r21, 0x11	; 17
    20dc:	60 e0       	ldi	r22, 0x00	; 0
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	0a ef       	ldi	r16, 0xFA	; 250
    20e2:	10 e0       	ldi	r17, 0x00	; 0
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	//WS2801_Set_Delay_Update(Intensity, 2213, LS_DELAY_1, Ja); //2213 - Polka
	//WS2801_Set_Delay_Update(Intensity, 1596, LS_DELAY_1, Ja); //1596 - Aanloop climax

	WS2801_Set_Delay_Update(Intensity, 580, LS_DELAY_1, Ja); //580 - Simbaal
    20ec:	8f ef       	ldi	r24, 0xFF	; 255
    20ee:	44 e4       	ldi	r20, 0x44	; 68
    20f0:	52 e0       	ldi	r21, 0x02	; 2
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	70 e0       	ldi	r23, 0x00	; 0
    20f6:	0a ef       	ldi	r16, 0xFA	; 250
    20f8:	10 e0       	ldi	r17, 0x00	; 0
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 423, LS_DELAY_1, Ja); //423 - Tuut
    2102:	8f ef       	ldi	r24, 0xFF	; 255
    2104:	47 ea       	ldi	r20, 0xA7	; 167
    2106:	51 e0       	ldi	r21, 0x01	; 1
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	70 e0       	ldi	r23, 0x00	; 0
    210c:	0a ef       	ldi	r16, 0xFA	; 250
    210e:	10 e0       	ldi	r17, 0x00	; 0
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 681, LS_DELAY_1, Ja); //681
    2118:	8f ef       	ldi	r24, 0xFF	; 255
    211a:	49 ea       	ldi	r20, 0xA9	; 169
    211c:	52 e0       	ldi	r21, 0x02	; 2
    211e:	60 e0       	ldi	r22, 0x00	; 0
    2120:	70 e0       	ldi	r23, 0x00	; 0
    2122:	0a ef       	ldi	r16, 0xFA	; 250
    2124:	10 e0       	ldi	r17, 0x00	; 0
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 400, LS_DELAY_1, Ja); //400
    212e:	8f ef       	ldi	r24, 0xFF	; 255
    2130:	40 e9       	ldi	r20, 0x90	; 144
    2132:	51 e0       	ldi	r21, 0x01	; 1
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	70 e0       	ldi	r23, 0x00	; 0
    2138:	0a ef       	ldi	r16, 0xFA	; 250
    213a:	10 e0       	ldi	r17, 0x00	; 0
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 686, LS_DELAY_1, Ja); //686
    2144:	8f ef       	ldi	r24, 0xFF	; 255
    2146:	4e ea       	ldi	r20, 0xAE	; 174
    2148:	52 e0       	ldi	r21, 0x02	; 2
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	70 e0       	ldi	r23, 0x00	; 0
    214e:	0a ef       	ldi	r16, 0xFA	; 250
    2150:	10 e0       	ldi	r17, 0x00	; 0
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 423, LS_DELAY_1, Ja); //423
    215a:	8f ef       	ldi	r24, 0xFF	; 255
    215c:	47 ea       	ldi	r20, 0xA7	; 167
    215e:	51 e0       	ldi	r21, 0x01	; 1
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	0a ef       	ldi	r16, 0xFA	; 250
    2166:	10 e0       	ldi	r17, 0x00	; 0
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 386, LS_DELAY_1, Ja); //386
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	42 e8       	ldi	r20, 0x82	; 130
    2174:	51 e0       	ldi	r21, 0x01	; 1
    2176:	60 e0       	ldi	r22, 0x00	; 0
    2178:	70 e0       	ldi	r23, 0x00	; 0
    217a:	0a ef       	ldi	r16, 0xFA	; 250
    217c:	10 e0       	ldi	r17, 0x00	; 0
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 263, LS_DELAY_1, Ja); //263
    2186:	8f ef       	ldi	r24, 0xFF	; 255
    2188:	47 e0       	ldi	r20, 0x07	; 7
    218a:	51 e0       	ldi	r21, 0x01	; 1
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	70 e0       	ldi	r23, 0x00	; 0
    2190:	0a ef       	ldi	r16, 0xFA	; 250
    2192:	10 e0       	ldi	r17, 0x00	; 0
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 418, LS_DELAY_1, Ja); //418
    219c:	8f ef       	ldi	r24, 0xFF	; 255
    219e:	42 ea       	ldi	r20, 0xA2	; 162
    21a0:	51 e0       	ldi	r21, 0x01	; 1
    21a2:	60 e0       	ldi	r22, 0x00	; 0
    21a4:	70 e0       	ldi	r23, 0x00	; 0
    21a6:	0a ef       	ldi	r16, 0xFA	; 250
    21a8:	10 e0       	ldi	r17, 0x00	; 0
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 667, LS_DELAY_1, Ja); //667
    21b2:	8f ef       	ldi	r24, 0xFF	; 255
    21b4:	4b e9       	ldi	r20, 0x9B	; 155
    21b6:	52 e0       	ldi	r21, 0x02	; 2
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	70 e0       	ldi	r23, 0x00	; 0
    21bc:	0a ef       	ldi	r16, 0xFA	; 250
    21be:	10 e0       	ldi	r17, 0x00	; 0
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2801_Set_Delay_Update(Intensity, 428, LS_DELAY_1, Ja); //428 - Tuut
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	4c ea       	ldi	r20, 0xAC	; 172
    21cc:	51 e0       	ldi	r21, 0x01	; 1
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	70 e0       	ldi	r23, 0x00	; 0
    21d2:	0a ef       	ldi	r16, 0xFA	; 250
    21d4:	10 e0       	ldi	r17, 0x00	; 0
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 681, LS_DELAY_1, Ja); //681
    21de:	8f ef       	ldi	r24, 0xFF	; 255
    21e0:	49 ea       	ldi	r20, 0xA9	; 169
    21e2:	52 e0       	ldi	r21, 0x02	; 2
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	70 e0       	ldi	r23, 0x00	; 0
    21e8:	0a ef       	ldi	r16, 0xFA	; 250
    21ea:	10 e0       	ldi	r17, 0x00	; 0
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 400, LS_DELAY_1, Ja); //400
    21f4:	8f ef       	ldi	r24, 0xFF	; 255
    21f6:	40 e9       	ldi	r20, 0x90	; 144
    21f8:	51 e0       	ldi	r21, 0x01	; 1
    21fa:	60 e0       	ldi	r22, 0x00	; 0
    21fc:	70 e0       	ldi	r23, 0x00	; 0
    21fe:	0a ef       	ldi	r16, 0xFA	; 250
    2200:	10 e0       	ldi	r17, 0x00	; 0
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 668, LS_DELAY_1, Ja); //668
    220a:	8f ef       	ldi	r24, 0xFF	; 255
    220c:	4c e9       	ldi	r20, 0x9C	; 156
    220e:	52 e0       	ldi	r21, 0x02	; 2
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	0a ef       	ldi	r16, 0xFA	; 250
    2216:	10 e0       	ldi	r17, 0x00	; 0
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 414, LS_DELAY_1, Ja); //414
    2220:	8f ef       	ldi	r24, 0xFF	; 255
    2222:	4e e9       	ldi	r20, 0x9E	; 158
    2224:	51 e0       	ldi	r21, 0x01	; 1
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	0a ef       	ldi	r16, 0xFA	; 250
    222c:	10 e0       	ldi	r17, 0x00	; 0
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 763, LS_DELAY_1, Ja); //763
    2236:	8f ef       	ldi	r24, 0xFF	; 255
    2238:	4b ef       	ldi	r20, 0xFB	; 251
    223a:	52 e0       	ldi	r21, 0x02	; 2
    223c:	60 e0       	ldi	r22, 0x00	; 0
    223e:	70 e0       	ldi	r23, 0x00	; 0
    2240:	0a ef       	ldi	r16, 0xFA	; 250
    2242:	10 e0       	ldi	r17, 0x00	; 0
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 355, LS_DELAY_1, Ja); //355
    224c:	8f ef       	ldi	r24, 0xFF	; 255
    224e:	43 e6       	ldi	r20, 0x63	; 99
    2250:	51 e0       	ldi	r21, 0x01	; 1
    2252:	60 e0       	ldi	r22, 0x00	; 0
    2254:	70 e0       	ldi	r23, 0x00	; 0
    2256:	0a ef       	ldi	r16, 0xFA	; 250
    2258:	10 e0       	ldi	r17, 0x00	; 0
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 662, LS_DELAY_1, Ja); //662
    2262:	8f ef       	ldi	r24, 0xFF	; 255
    2264:	46 e9       	ldi	r20, 0x96	; 150
    2266:	52 e0       	ldi	r21, 0x02	; 2
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	70 e0       	ldi	r23, 0x00	; 0
    226c:	0a ef       	ldi	r16, 0xFA	; 250
    226e:	10 e0       	ldi	r17, 0x00	; 0
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 529, LS_DELAY_1, Ja); //529
    2278:	8f ef       	ldi	r24, 0xFF	; 255
    227a:	41 e1       	ldi	r20, 0x11	; 17
    227c:	52 e0       	ldi	r21, 0x02	; 2
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	0a ef       	ldi	r16, 0xFA	; 250
    2284:	10 e0       	ldi	r17, 0x00	; 0
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2801_Set_Delay_Update(Intensity, 594, LS_DELAY_1, Ja); //594 - Tuut
    228e:	8f ef       	ldi	r24, 0xFF	; 255
    2290:	42 e5       	ldi	r20, 0x52	; 82
    2292:	52 e0       	ldi	r21, 0x02	; 2
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	70 e0       	ldi	r23, 0x00	; 0
    2298:	0a ef       	ldi	r16, 0xFA	; 250
    229a:	10 e0       	ldi	r17, 0x00	; 0
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 510, LS_DELAY_1, Ja); //510
    22a4:	8f ef       	ldi	r24, 0xFF	; 255
    22a6:	4e ef       	ldi	r20, 0xFE	; 254
    22a8:	51 e0       	ldi	r21, 0x01	; 1
    22aa:	60 e0       	ldi	r22, 0x00	; 0
    22ac:	70 e0       	ldi	r23, 0x00	; 0
    22ae:	0a ef       	ldi	r16, 0xFA	; 250
    22b0:	10 e0       	ldi	r17, 0x00	; 0
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 378, LS_DELAY_1, Ja); //378
    22ba:	8f ef       	ldi	r24, 0xFF	; 255
    22bc:	4a e7       	ldi	r20, 0x7A	; 122
    22be:	51 e0       	ldi	r21, 0x01	; 1
    22c0:	60 e0       	ldi	r22, 0x00	; 0
    22c2:	70 e0       	ldi	r23, 0x00	; 0
    22c4:	0a ef       	ldi	r16, 0xFA	; 250
    22c6:	10 e0       	ldi	r17, 0x00	; 0
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 248, LS_DELAY_1, Ja); //248
    22d0:	8f ef       	ldi	r24, 0xFF	; 255
    22d2:	48 ef       	ldi	r20, 0xF8	; 248
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	70 e0       	ldi	r23, 0x00	; 0
    22da:	0a ef       	ldi	r16, 0xFA	; 250
    22dc:	10 e0       	ldi	r17, 0x00	; 0
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 410, LS_DELAY_1, Ja); //410
    22e6:	8f ef       	ldi	r24, 0xFF	; 255
    22e8:	4a e9       	ldi	r20, 0x9A	; 154
    22ea:	51 e0       	ldi	r21, 0x01	; 1
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	70 e0       	ldi	r23, 0x00	; 0
    22f0:	0a ef       	ldi	r16, 0xFA	; 250
    22f2:	10 e0       	ldi	r17, 0x00	; 0
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 386, LS_DELAY_1, Ja); //386
    22fc:	8f ef       	ldi	r24, 0xFF	; 255
    22fe:	42 e8       	ldi	r20, 0x82	; 130
    2300:	51 e0       	ldi	r21, 0x01	; 1
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	70 e0       	ldi	r23, 0x00	; 0
    2306:	0a ef       	ldi	r16, 0xFA	; 250
    2308:	10 e0       	ldi	r17, 0x00	; 0
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 290, LS_DELAY_1, Ja); //290
    2312:	8f ef       	ldi	r24, 0xFF	; 255
    2314:	42 e2       	ldi	r20, 0x22	; 34
    2316:	51 e0       	ldi	r21, 0x01	; 1
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	70 e0       	ldi	r23, 0x00	; 0
    231c:	0a ef       	ldi	r16, 0xFA	; 250
    231e:	10 e0       	ldi	r17, 0x00	; 0
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 423, LS_DELAY_1, Ja); //423
    2328:	8f ef       	ldi	r24, 0xFF	; 255
    232a:	47 ea       	ldi	r20, 0xA7	; 167
    232c:	51 e0       	ldi	r21, 0x01	; 1
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	70 e0       	ldi	r23, 0x00	; 0
    2332:	0a ef       	ldi	r16, 0xFA	; 250
    2334:	10 e0       	ldi	r17, 0x00	; 0
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 663, LS_DELAY_1, Ja); //663
    233e:	8f ef       	ldi	r24, 0xFF	; 255
    2340:	47 e9       	ldi	r20, 0x97	; 151
    2342:	52 e0       	ldi	r21, 0x02	; 2
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	70 e0       	ldi	r23, 0x00	; 0
    2348:	0a ef       	ldi	r16, 0xFA	; 250
    234a:	10 e0       	ldi	r17, 0x00	; 0
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>

	WS2801_Set_Delay_Update(Intensity, 488, LS_DELAY_1, Ja); //488 - Tuut
    2354:	8f ef       	ldi	r24, 0xFF	; 255
    2356:	48 ee       	ldi	r20, 0xE8	; 232
    2358:	51 e0       	ldi	r21, 0x01	; 1
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	70 e0       	ldi	r23, 0x00	; 0
    235e:	0a ef       	ldi	r16, 0xFA	; 250
    2360:	10 e0       	ldi	r17, 0x00	; 0
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 285, LS_DELAY_1, Ja); //285
    236a:	8f ef       	ldi	r24, 0xFF	; 255
    236c:	4d e1       	ldi	r20, 0x1D	; 29
    236e:	51 e0       	ldi	r21, 0x01	; 1
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	0a ef       	ldi	r16, 0xFA	; 250
    2376:	10 e0       	ldi	r17, 0x00	; 0
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 322, LS_DELAY_1, Ja); //322
    2380:	8f ef       	ldi	r24, 0xFF	; 255
    2382:	42 e4       	ldi	r20, 0x42	; 66
    2384:	51 e0       	ldi	r21, 0x01	; 1
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	0a ef       	ldi	r16, 0xFA	; 250
    238c:	10 e0       	ldi	r17, 0x00	; 0
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 428, LS_DELAY_1, Ja); //428
    2396:	8f ef       	ldi	r24, 0xFF	; 255
    2398:	4c ea       	ldi	r20, 0xAC	; 172
    239a:	51 e0       	ldi	r21, 0x01	; 1
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	0a ef       	ldi	r16, 0xFA	; 250
    23a2:	10 e0       	ldi	r17, 0x00	; 0
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 391, LS_DELAY_1, Ja); //391
    23ac:	8f ef       	ldi	r24, 0xFF	; 255
    23ae:	47 e8       	ldi	r20, 0x87	; 135
    23b0:	51 e0       	ldi	r21, 0x01	; 1
    23b2:	60 e0       	ldi	r22, 0x00	; 0
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	0a ef       	ldi	r16, 0xFA	; 250
    23b8:	10 e0       	ldi	r17, 0x00	; 0
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 230, LS_DELAY_1, Ja); //230
    23c2:	8f ef       	ldi	r24, 0xFF	; 255
    23c4:	46 ee       	ldi	r20, 0xE6	; 230
    23c6:	50 e0       	ldi	r21, 0x00	; 0
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	70 e0       	ldi	r23, 0x00	; 0
    23cc:	0a ef       	ldi	r16, 0xFA	; 250
    23ce:	10 e0       	ldi	r17, 0x00	; 0
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 488, LS_DELAY_1, Ja); //488
    23d8:	8f ef       	ldi	r24, 0xFF	; 255
    23da:	48 ee       	ldi	r20, 0xE8	; 232
    23dc:	51 e0       	ldi	r21, 0x01	; 1
    23de:	60 e0       	ldi	r22, 0x00	; 0
    23e0:	70 e0       	ldi	r23, 0x00	; 0
    23e2:	0a ef       	ldi	r16, 0xFA	; 250
    23e4:	10 e0       	ldi	r17, 0x00	; 0
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 354, LS_DELAY_1, Ja); //354
    23ee:	8f ef       	ldi	r24, 0xFF	; 255
    23f0:	42 e6       	ldi	r20, 0x62	; 98
    23f2:	51 e0       	ldi	r21, 0x01	; 1
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	70 e0       	ldi	r23, 0x00	; 0
    23f8:	0a ef       	ldi	r16, 0xFA	; 250
    23fa:	10 e0       	ldi	r17, 0x00	; 0
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 317, LS_DELAY_1, Ja); //317
    2404:	8f ef       	ldi	r24, 0xFF	; 255
    2406:	4d e3       	ldi	r20, 0x3D	; 61
    2408:	51 e0       	ldi	r21, 0x01	; 1
    240a:	60 e0       	ldi	r22, 0x00	; 0
    240c:	70 e0       	ldi	r23, 0x00	; 0
    240e:	0a ef       	ldi	r16, 0xFA	; 250
    2410:	10 e0       	ldi	r17, 0x00	; 0
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>
	WS2801_Set_Delay_Update(Intensity, 616, LS_DELAY_1, Ja); //616 - Uit
    241a:	8f ef       	ldi	r24, 0xFF	; 255
    241c:	48 e6       	ldi	r20, 0x68	; 104
    241e:	52 e0       	ldi	r21, 0x02	; 2
    2420:	60 e0       	ldi	r22, 0x00	; 0
    2422:	70 e0       	ldi	r23, 0x00	; 0
    2424:	0a ef       	ldi	r16, 0xFA	; 250
    2426:	10 e0       	ldi	r17, 0x00	; 0
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	0e 94 40 06 	call	0xc80	; 0xc80 <WS2801_Set_Delay_Update>




	
}
    2430:	1f 91       	pop	r17
    2432:	0f 91       	pop	r16
    2434:	ef 90       	pop	r14
    2436:	08 95       	ret

00002438 <DebugSectionOne>:
	WS2801_Set_Delay_Update(Intensity, 258, LS_DELAY_1, Ja); //258
	WS2811_SetGroupColor(GroupAll, COLOR_UIT, Neen);
	WS2801_Set_Delay_Update(Intensity, 1141, LS_DELAY_1, Ja); //1141
}

void DebugSectionOne(void){
    2438:	4f 92       	push	r4
    243a:	5f 92       	push	r5
    243c:	6f 92       	push	r6
    243e:	7f 92       	push	r7
    2440:	8f 92       	push	r8
    2442:	9f 92       	push	r9
    2444:	af 92       	push	r10
    2446:	bf 92       	push	r11
    2448:	cf 92       	push	r12
    244a:	df 92       	push	r13
    244c:	ef 92       	push	r14
    244e:	ff 92       	push	r15
// 	WS2811_OneToEndGroupUpdate(1,WS2811_ledcount,COLOR_ZEEBLAUW);
// 	WS2811_OneToEndGroupUpdate(1,WS2811_ledcount,COLOR_UIT);
// 	WS2811_OneToEndGroupUpdate(1,WS2811_ledcount,COLOR_GEELGROEN);
// 	WS2811_OneToEndGroupUpdate(1,WS2811_ledcount,COLOR_UIT);
	
	long Kleur = 0x000000;
    2450:	88 24       	eor	r8, r8
    2452:	99 24       	eor	r9, r9
    2454:	54 01       	movw	r10, r8
    2456:	1f c0       	rjmp	.+62     	; 0x2496 <DebugSectionOne+0x5e>

	
	for(uint8_t i= 0; i<15; i++){
		
		for(uint8_t j= 0; j<15; j++){
			WS2811_OneToEndGroupUpdate(1,WS2811_ledcount,Kleur);
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	62 e3       	ldi	r22, 0x32	; 50
    245c:	a5 01       	movw	r20, r10
    245e:	94 01       	movw	r18, r8
    2460:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <WS2811_OneToEndGroupUpdate>
			//WS2811_OneToEndGroupUpdate(1,WS2811_ledcount,COLOR_UIT);
			Kleur += 0x01;
    2464:	08 94       	sec
    2466:	81 1c       	adc	r8, r1
    2468:	91 1c       	adc	r9, r1
    246a:	a1 1c       	adc	r10, r1
    246c:	b1 1c       	adc	r11, r1
	

	
	for(uint8_t i= 0; i<15; i++){
		
		for(uint8_t j= 0; j<15; j++){
    246e:	8c 14       	cp	r8, r12
    2470:	9d 04       	cpc	r9, r13
    2472:	ae 04       	cpc	r10, r14
    2474:	bf 04       	cpc	r11, r15
    2476:	81 f7       	brne	.-32     	; 0x2458 <DebugSectionOne+0x20>
	WS2801_Set_Delay_Update(Intensity, 258, LS_DELAY_1, Ja); //258
	WS2811_SetGroupColor(GroupAll, COLOR_UIT, Neen);
	WS2801_Set_Delay_Update(Intensity, 1141, LS_DELAY_1, Ja); //1141
}

void DebugSectionOne(void){
    2478:	88 24       	eor	r8, r8
    247a:	99 24       	eor	r9, r9
    247c:	54 01       	movw	r10, r8
    247e:	68 94       	set
    2480:	84 f8       	bld	r8, 4
    2482:	84 0c       	add	r8, r4
    2484:	95 1c       	adc	r9, r5
    2486:	a6 1c       	adc	r10, r6
    2488:	b7 1c       	adc	r11, r7
	
	long Kleur = 0x000000;
	

	
	for(uint8_t i= 0; i<15; i++){
    248a:	80 ef       	ldi	r24, 0xF0	; 240
    248c:	88 16       	cp	r8, r24
    248e:	91 04       	cpc	r9, r1
    2490:	a1 04       	cpc	r10, r1
    2492:	b1 04       	cpc	r11, r1
    2494:	b9 f1       	breq	.+110    	; 0x2504 <DebugSectionOne+0xcc>
	WS2801_Set_Delay_Update(Intensity, 258, LS_DELAY_1, Ja); //258
	WS2811_SetGroupColor(GroupAll, COLOR_UIT, Neen);
	WS2801_Set_Delay_Update(Intensity, 1141, LS_DELAY_1, Ja); //1141
}

void DebugSectionOne(void){
    2496:	24 01       	movw	r4, r8
    2498:	35 01       	movw	r6, r10
    249a:	0f 2e       	mov	r0, r31
    249c:	ff e0       	ldi	r31, 0x0F	; 15
    249e:	cf 2e       	mov	r12, r31
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	df 2e       	mov	r13, r31
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	ef 2e       	mov	r14, r31
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	ff 2e       	mov	r15, r31
    24ac:	f0 2d       	mov	r31, r0
    24ae:	c8 0c       	add	r12, r8
    24b0:	d9 1c       	adc	r13, r9
    24b2:	ea 1c       	adc	r14, r10
    24b4:	fb 1c       	adc	r15, r11
    24b6:	d0 cf       	rjmp	.-96     	; 0x2458 <DebugSectionOne+0x20>
	}
		Kleur = (Kleur & 0xffff00);
	for(uint8_t i= 0; i<15; i++){
		
		for(uint8_t j= 0; j<15; j++){
			WS2811_OneToEndGroupUpdate(1,WS2811_ledcount,Kleur);
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	62 e3       	ldi	r22, 0x32	; 50
    24bc:	a5 01       	movw	r20, r10
    24be:	94 01       	movw	r18, r8
    24c0:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <WS2811_OneToEndGroupUpdate>
			//WS2811_OneToEndGroupUpdate(1,WS2811_ledcount,COLOR_UIT);
			Kleur += 0x0100;
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	a0 e0       	ldi	r26, 0x00	; 0
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	88 0e       	add	r8, r24
    24ce:	99 1e       	adc	r9, r25
    24d0:	aa 1e       	adc	r10, r26
    24d2:	bb 1e       	adc	r11, r27
		Kleur += 0x10;
	}
		Kleur = (Kleur & 0xffff00);
	for(uint8_t i= 0; i<15; i++){
		
		for(uint8_t j= 0; j<15; j++){
    24d4:	8c 14       	cp	r8, r12
    24d6:	9d 04       	cpc	r9, r13
    24d8:	ae 04       	cpc	r10, r14
    24da:	bf 04       	cpc	r11, r15
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <DebugSectionOne+0x80>
	WS2801_Set_Delay_Update(Intensity, 258, LS_DELAY_1, Ja); //258
	WS2811_SetGroupColor(GroupAll, COLOR_UIT, Neen);
	WS2801_Set_Delay_Update(Intensity, 1141, LS_DELAY_1, Ja); //1141
}

void DebugSectionOne(void){
    24de:	88 24       	eor	r8, r8
    24e0:	99 24       	eor	r9, r9
    24e2:	54 01       	movw	r10, r8
    24e4:	68 94       	set
    24e6:	94 f8       	bld	r9, 4
    24e8:	84 0c       	add	r8, r4
    24ea:	95 1c       	adc	r9, r5
    24ec:	a6 1c       	adc	r10, r6
    24ee:	b7 1c       	adc	r11, r7
		}
		Kleur -= 0x0F;
		Kleur += 0x10;
	}
		Kleur = (Kleur & 0xffff00);
	for(uint8_t i= 0; i<15; i++){
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	89 16       	cp	r8, r25
    24f4:	90 ef       	ldi	r25, 0xF0	; 240
    24f6:	99 06       	cpc	r9, r25
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a9 06       	cpc	r10, r25
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	b9 06       	cpc	r11, r25
    2500:	21 f4       	brne	.+8      	; 0x250a <DebugSectionOne+0xd2>
    2502:	3a c0       	rjmp	.+116    	; 0x2578 <DebugSectionOne+0x140>
			Kleur += 0x01;
		}
		Kleur -= 0x0F;
		Kleur += 0x10;
	}
		Kleur = (Kleur & 0xffff00);
    2504:	88 24       	eor	r8, r8
    2506:	99 24       	eor	r9, r9
    2508:	54 01       	movw	r10, r8
	WS2801_Set_Delay_Update(Intensity, 258, LS_DELAY_1, Ja); //258
	WS2811_SetGroupColor(GroupAll, COLOR_UIT, Neen);
	WS2801_Set_Delay_Update(Intensity, 1141, LS_DELAY_1, Ja); //1141
}

void DebugSectionOne(void){
    250a:	24 01       	movw	r4, r8
    250c:	35 01       	movw	r6, r10
    250e:	0f 2e       	mov	r0, r31
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	cf 2e       	mov	r12, r31
    2514:	ff e0       	ldi	r31, 0x0F	; 15
    2516:	df 2e       	mov	r13, r31
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	ef 2e       	mov	r14, r31
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	ff 2e       	mov	r15, r31
    2520:	f0 2d       	mov	r31, r0
    2522:	c8 0c       	add	r12, r8
    2524:	d9 1c       	adc	r13, r9
    2526:	ea 1c       	adc	r14, r10
    2528:	fb 1c       	adc	r15, r11
    252a:	c6 cf       	rjmp	.-116    	; 0x24b8 <DebugSectionOne+0x80>
	}
		Kleur = (Kleur & 0xff00ff);
	for(uint8_t i= 0; i<15; i++){
		
		for(uint8_t j= 0; j<15; j++){
			WS2811_OneToEndGroupUpdate(1,WS2811_ledcount,Kleur);
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	62 e3       	ldi	r22, 0x32	; 50
    2530:	a5 01       	movw	r20, r10
    2532:	94 01       	movw	r18, r8
    2534:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <WS2811_OneToEndGroupUpdate>
			//WS2811_OneToEndGroupUpdate(1,WS2811_ledcount,COLOR_UIT);
			Kleur += 0x010000;
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	a1 e0       	ldi	r26, 0x01	; 1
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	88 0e       	add	r8, r24
    2542:	99 1e       	adc	r9, r25
    2544:	aa 1e       	adc	r10, r26
    2546:	bb 1e       	adc	r11, r27
		Kleur += 0x1000;
	}
		Kleur = (Kleur & 0xff00ff);
	for(uint8_t i= 0; i<15; i++){
		
		for(uint8_t j= 0; j<15; j++){
    2548:	8c 14       	cp	r8, r12
    254a:	9d 04       	cpc	r9, r13
    254c:	ae 04       	cpc	r10, r14
    254e:	bf 04       	cpc	r11, r15
    2550:	69 f7       	brne	.-38     	; 0x252c <DebugSectionOne+0xf4>
	WS2801_Set_Delay_Update(Intensity, 258, LS_DELAY_1, Ja); //258
	WS2811_SetGroupColor(GroupAll, COLOR_UIT, Neen);
	WS2801_Set_Delay_Update(Intensity, 1141, LS_DELAY_1, Ja); //1141
}

void DebugSectionOne(void){
    2552:	88 24       	eor	r8, r8
    2554:	99 24       	eor	r9, r9
    2556:	54 01       	movw	r10, r8
    2558:	68 94       	set
    255a:	a4 f8       	bld	r10, 4
    255c:	84 0c       	add	r8, r4
    255e:	95 1c       	adc	r9, r5
    2560:	a6 1c       	adc	r10, r6
    2562:	b7 1c       	adc	r11, r7
		}
		Kleur -= 0x0F00;
		Kleur += 0x1000;
	}
		Kleur = (Kleur & 0xff00ff);
	for(uint8_t i= 0; i<15; i++){
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	89 16       	cp	r8, r25
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	99 06       	cpc	r9, r25
    256c:	90 ef       	ldi	r25, 0xF0	; 240
    256e:	a9 06       	cpc	r10, r25
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	b9 06       	cpc	r11, r25
    2574:	21 f4       	brne	.+8      	; 0x257e <DebugSectionOne+0x146>
    2576:	14 c0       	rjmp	.+40     	; 0x25a0 <DebugSectionOne+0x168>
			Kleur += 0x0100;
		}
		Kleur -= 0x0F00;
		Kleur += 0x1000;
	}
		Kleur = (Kleur & 0xff00ff);
    2578:	88 24       	eor	r8, r8
    257a:	99 24       	eor	r9, r9
    257c:	54 01       	movw	r10, r8
	WS2801_Set_Delay_Update(Intensity, 258, LS_DELAY_1, Ja); //258
	WS2811_SetGroupColor(GroupAll, COLOR_UIT, Neen);
	WS2801_Set_Delay_Update(Intensity, 1141, LS_DELAY_1, Ja); //1141
}

void DebugSectionOne(void){
    257e:	24 01       	movw	r4, r8
    2580:	35 01       	movw	r6, r10
    2582:	0f 2e       	mov	r0, r31
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	cf 2e       	mov	r12, r31
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	df 2e       	mov	r13, r31
    258c:	ff e0       	ldi	r31, 0x0F	; 15
    258e:	ef 2e       	mov	r14, r31
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	ff 2e       	mov	r15, r31
    2594:	f0 2d       	mov	r31, r0
    2596:	c8 0c       	add	r12, r8
    2598:	d9 1c       	adc	r13, r9
    259a:	ea 1c       	adc	r14, r10
    259c:	fb 1c       	adc	r15, r11
    259e:	c6 cf       	rjmp	.-116    	; 0x252c <DebugSectionOne+0xf4>
		}
		Kleur -= 0x0F0000;
		Kleur += 0x100000;
	}
		Kleur = (Kleur & 0x00ffff);
}
    25a0:	ff 90       	pop	r15
    25a2:	ef 90       	pop	r14
    25a4:	df 90       	pop	r13
    25a6:	cf 90       	pop	r12
    25a8:	bf 90       	pop	r11
    25aa:	af 90       	pop	r10
    25ac:	9f 90       	pop	r9
    25ae:	8f 90       	pop	r8
    25b0:	7f 90       	pop	r7
    25b2:	6f 90       	pop	r6
    25b4:	5f 90       	pop	r5
    25b6:	4f 90       	pop	r4
    25b8:	08 95       	ret

000025ba <DebugSectionTwo>:

void DebugSectionTwo(void){
	if (ButtonL1)
    25ba:	33 99       	sbic	0x06, 3	; 6
    25bc:	0e c0       	rjmp	.+28     	; 0x25da <DebugSectionTwo+0x20>
	{
		 WS2801[0] = 0x00;
    25be:	10 92 18 03 	sts	0x0318, r1
		 WS2801_Update();
    25c2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <WS2801_Update>
    25c6:	8f ef       	ldi	r24, 0xFF	; 255
    25c8:	91 ee       	ldi	r25, 0xE1	; 225
    25ca:	a4 e0       	ldi	r26, 0x04	; 4
    25cc:	81 50       	subi	r24, 0x01	; 1
    25ce:	90 40       	sbci	r25, 0x00	; 0
    25d0:	a0 40       	sbci	r26, 0x00	; 0
    25d2:	e1 f7       	brne	.-8      	; 0x25cc <DebugSectionTwo+0x12>
    25d4:	00 c0       	rjmp	.+0      	; 0x25d6 <DebugSectionTwo+0x1c>
    25d6:	00 00       	nop
    25d8:	08 95       	ret
		 _delay_ms(100);		
	}
	else if (ButtonL2)
    25da:	34 99       	sbic	0x06, 4	; 6
    25dc:	0f c0       	rjmp	.+30     	; 0x25fc <DebugSectionTwo+0x42>
	{
		 WS2801[0] = 0x80;
    25de:	80 e8       	ldi	r24, 0x80	; 128
    25e0:	80 93 18 03 	sts	0x0318, r24
		 WS2801_Update();
    25e4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <WS2801_Update>
    25e8:	8f ef       	ldi	r24, 0xFF	; 255
    25ea:	91 ee       	ldi	r25, 0xE1	; 225
    25ec:	a4 e0       	ldi	r26, 0x04	; 4
    25ee:	81 50       	subi	r24, 0x01	; 1
    25f0:	90 40       	sbci	r25, 0x00	; 0
    25f2:	a0 40       	sbci	r26, 0x00	; 0
    25f4:	e1 f7       	brne	.-8      	; 0x25ee <DebugSectionTwo+0x34>
    25f6:	00 c0       	rjmp	.+0      	; 0x25f8 <DebugSectionTwo+0x3e>
    25f8:	00 00       	nop
    25fa:	08 95       	ret
		 _delay_ms(100);
	}
	else if (ButtonL3)
    25fc:	35 99       	sbic	0x06, 5	; 6
    25fe:	0f c0       	rjmp	.+30     	; 0x261e <DebugSectionTwo+0x64>
	{
		WS2801[0] = 0x20;
    2600:	80 e2       	ldi	r24, 0x20	; 32
    2602:	80 93 18 03 	sts	0x0318, r24
		WS2801_Update();
    2606:	0e 94 0d 06 	call	0xc1a	; 0xc1a <WS2801_Update>
    260a:	8f ef       	ldi	r24, 0xFF	; 255
    260c:	91 ee       	ldi	r25, 0xE1	; 225
    260e:	a4 e0       	ldi	r26, 0x04	; 4
    2610:	81 50       	subi	r24, 0x01	; 1
    2612:	90 40       	sbci	r25, 0x00	; 0
    2614:	a0 40       	sbci	r26, 0x00	; 0
    2616:	e1 f7       	brne	.-8      	; 0x2610 <DebugSectionTwo+0x56>
    2618:	00 c0       	rjmp	.+0      	; 0x261a <DebugSectionTwo+0x60>
    261a:	00 00       	nop
    261c:	08 95       	ret
		_delay_ms(100);
	}
	else if (ButtonR1)
    261e:	30 99       	sbic	0x06, 0	; 6
    2620:	0f c0       	rjmp	.+30     	; 0x2640 <DebugSectionTwo+0x86>
	{
		 WS2801[0] = 0x30;
    2622:	80 e3       	ldi	r24, 0x30	; 48
    2624:	80 93 18 03 	sts	0x0318, r24
		 WS2801_Update();
    2628:	0e 94 0d 06 	call	0xc1a	; 0xc1a <WS2801_Update>
    262c:	8f ef       	ldi	r24, 0xFF	; 255
    262e:	91 ee       	ldi	r25, 0xE1	; 225
    2630:	a4 e0       	ldi	r26, 0x04	; 4
    2632:	81 50       	subi	r24, 0x01	; 1
    2634:	90 40       	sbci	r25, 0x00	; 0
    2636:	a0 40       	sbci	r26, 0x00	; 0
    2638:	e1 f7       	brne	.-8      	; 0x2632 <DebugSectionTwo+0x78>
    263a:	00 c0       	rjmp	.+0      	; 0x263c <DebugSectionTwo+0x82>
    263c:	00 00       	nop
    263e:	08 95       	ret
		 _delay_ms(100);
	}
	else if (ButtonR2)
    2640:	31 99       	sbic	0x06, 1	; 6
    2642:	0f c0       	rjmp	.+30     	; 0x2662 <DebugSectionTwo+0xa8>
	{
		WS2801[0] = 0x40;
    2644:	80 e4       	ldi	r24, 0x40	; 64
    2646:	80 93 18 03 	sts	0x0318, r24
		WS2801_Update();
    264a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <WS2801_Update>
    264e:	8f ef       	ldi	r24, 0xFF	; 255
    2650:	91 ee       	ldi	r25, 0xE1	; 225
    2652:	a4 e0       	ldi	r26, 0x04	; 4
    2654:	81 50       	subi	r24, 0x01	; 1
    2656:	90 40       	sbci	r25, 0x00	; 0
    2658:	a0 40       	sbci	r26, 0x00	; 0
    265a:	e1 f7       	brne	.-8      	; 0x2654 <DebugSectionTwo+0x9a>
    265c:	00 c0       	rjmp	.+0      	; 0x265e <DebugSectionTwo+0xa4>
    265e:	00 00       	nop
    2660:	08 95       	ret
		_delay_ms(100);
	}
	else if (ButtonR3)
    2662:	32 99       	sbic	0x06, 2	; 6
    2664:	0e c0       	rjmp	.+28     	; 0x2682 <DebugSectionTwo+0xc8>
	{
		 WS2801[0] = 0x50;
    2666:	80 e5       	ldi	r24, 0x50	; 80
    2668:	80 93 18 03 	sts	0x0318, r24
		 WS2801_Update();
    266c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <WS2801_Update>
    2670:	8f ef       	ldi	r24, 0xFF	; 255
    2672:	91 ee       	ldi	r25, 0xE1	; 225
    2674:	a4 e0       	ldi	r26, 0x04	; 4
    2676:	81 50       	subi	r24, 0x01	; 1
    2678:	90 40       	sbci	r25, 0x00	; 0
    267a:	a0 40       	sbci	r26, 0x00	; 0
    267c:	e1 f7       	brne	.-8      	; 0x2676 <DebugSectionTwo+0xbc>
    267e:	00 c0       	rjmp	.+0      	; 0x2680 <DebugSectionTwo+0xc6>
    2680:	00 00       	nop
    2682:	08 95       	ret

00002684 <WS2811_Update>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdlib.h>
#include "Initializations.h"

void WS2811_Update(void){
    2684:	cf 92       	push	r12
    2686:	df 92       	push	r13
    2688:	ef 92       	push	r14
    268a:	ff 92       	push	r15
    268c:	0f 93       	push	r16
    268e:	1f 93       	push	r17
    2690:	cf 93       	push	r28
    2692:	df 93       	push	r29
    2694:	e8 e1       	ldi	r30, 0x18	; 24
    2696:	f3 e0       	ldi	r31, 0x03	; 3
    2698:	c0 ee       	ldi	r28, 0xE0	; 224
    269a:	d3 e0       	ldi	r29, 0x03	; 3
    269c:	08 e1       	ldi	r16, 0x18	; 24
    269e:	10 e0       	ldi	r17, 0x00	; 0
    26a0:	cc 24       	eor	r12, r12
    26a2:	dd 24       	eor	r13, r13
    26a4:	76 01       	movw	r14, r12
    26a6:	68 94       	set
    26a8:	e7 f8       	bld	r14, 7
    26aa:	45 c0       	rjmp	.+138    	; 0x2736 <WS2811_Update+0xb2>
	for (int led=0; led<WS2811_ledcount; led++)
	{
		long mask = 0x00800000;
		while (mask!=0) {
			if ((WS2811[led]&mask)==0) {
    26ac:	80 81       	ld	r24, Z
    26ae:	91 81       	ldd	r25, Z+1	; 0x01
    26b0:	a2 81       	ldd	r26, Z+2	; 0x02
    26b2:	b3 81       	ldd	r27, Z+3	; 0x03
    26b4:	84 23       	and	r24, r20
    26b6:	95 23       	and	r25, r21
    26b8:	a6 23       	and	r26, r22
    26ba:	b7 23       	and	r27, r23
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	a1 05       	cpc	r26, r1
    26c0:	b1 05       	cpc	r27, r1
    26c2:	b9 f4       	brne	.+46     	; 0x26f2 <WS2811_Update+0x6e>
				// Send a '0' HI: 250nS LOW: 1000nS
				WS2811_HIGH;  // Hi (start)
    26c4:	5d 9a       	sbi	0x0b, 5	; 11
	...
				NOP_250;
				WS2811_LOW;  // Low
    26ce:	5d 98       	cbi	0x0b, 5	; 11
	...
				NOP_1000;
    26f0:	16 c0       	rjmp	.+44     	; 0x271e <WS2811_Update+0x9a>
			}
			else {
				// Send a '1' HI: 600nS LOW: 650nS
				WS2811_HIGH;  // Hi (start)
    26f2:	5d 9a       	sbi	0x0b, 5	; 11
	...
				NOP_650;
    2708:	00 00       	nop
				WS2811_LOW;  // Low
    270a:	5d 98       	cbi	0x0b, 5	; 11
	...
				NOP_600;
    271c:	00 00       	nop
			}
			mask >>= 1;           // Lo (1000ns)
    271e:	75 95       	asr	r23
    2720:	67 95       	ror	r22
    2722:	57 95       	ror	r21
    2724:	47 95       	ror	r20
    2726:	21 50       	subi	r18, 0x01	; 1
    2728:	30 40       	sbci	r19, 0x00	; 0

void WS2811_Update(void){
	for (int led=0; led<WS2811_ledcount; led++)
	{
		long mask = 0x00800000;
		while (mask!=0) {
    272a:	09 f0       	breq	.+2      	; 0x272e <WS2811_Update+0xaa>
    272c:	bf cf       	rjmp	.-130    	; 0x26ac <WS2811_Update+0x28>
    272e:	34 96       	adiw	r30, 0x04	; 4
#include <util/delay.h>
#include <stdlib.h>
#include "Initializations.h"

void WS2811_Update(void){
	for (int led=0; led<WS2811_ledcount; led++)
    2730:	ec 17       	cp	r30, r28
    2732:	fd 07       	cpc	r31, r29
    2734:	21 f0       	breq	.+8      	; 0x273e <WS2811_Update+0xba>
#include <avr/io.h>
#include <util/delay.h>
#include <stdlib.h>
#include "Initializations.h"

void WS2811_Update(void){
    2736:	98 01       	movw	r18, r16
    2738:	b7 01       	movw	r22, r14
    273a:	a6 01       	movw	r20, r12
    273c:	b7 cf       	rjmp	.-146    	; 0x26ac <WS2811_Update+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    273e:	87 e1       	ldi	r24, 0x17	; 23
    2740:	91 e0       	ldi	r25, 0x01	; 1
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	f1 f7       	brne	.-4      	; 0x2742 <WS2811_Update+0xbe>
    2746:	00 c0       	rjmp	.+0      	; 0x2748 <WS2811_Update+0xc4>
    2748:	00 00       	nop
			}
			mask >>= 1;           // Lo (1000ns)
		}
	}
	_delay_us(70);
}
    274a:	df 91       	pop	r29
    274c:	cf 91       	pop	r28
    274e:	1f 91       	pop	r17
    2750:	0f 91       	pop	r16
    2752:	ff 90       	pop	r15
    2754:	ef 90       	pop	r14
    2756:	df 90       	pop	r13
    2758:	cf 90       	pop	r12
    275a:	08 95       	ret

0000275c <WS2811_Update_Debug>:
void WS2811_Update_Debug(){
    275c:	cf 92       	push	r12
    275e:	df 92       	push	r13
    2760:	ef 92       	push	r14
    2762:	ff 92       	push	r15
    2764:	0f 93       	push	r16
    2766:	1f 93       	push	r17
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	e8 e1       	ldi	r30, 0x18	; 24
    276e:	f3 e0       	ldi	r31, 0x03	; 3
    2770:	c0 ee       	ldi	r28, 0xE0	; 224
    2772:	d3 e0       	ldi	r29, 0x03	; 3
    2774:	08 e1       	ldi	r16, 0x18	; 24
    2776:	10 e0       	ldi	r17, 0x00	; 0
    2778:	cc 24       	eor	r12, r12
    277a:	dd 24       	eor	r13, r13
    277c:	76 01       	movw	r14, r12
    277e:	68 94       	set
    2780:	e7 f8       	bld	r14, 7
    2782:	45 c0       	rjmp	.+138    	; 0x280e <WS2811_Update_Debug+0xb2>
	for (int led=0; led<WS2811_ledcount; led++)
	{
		long mask = 0x00800000;
		while (mask!=0) {
			if ((WS2811[led]&mask)==0) {
    2784:	80 81       	ld	r24, Z
    2786:	91 81       	ldd	r25, Z+1	; 0x01
    2788:	a2 81       	ldd	r26, Z+2	; 0x02
    278a:	b3 81       	ldd	r27, Z+3	; 0x03
    278c:	84 23       	and	r24, r20
    278e:	95 23       	and	r25, r21
    2790:	a6 23       	and	r26, r22
    2792:	b7 23       	and	r27, r23
    2794:	00 97       	sbiw	r24, 0x00	; 0
    2796:	a1 05       	cpc	r26, r1
    2798:	b1 05       	cpc	r27, r1
    279a:	b9 f4       	brne	.+46     	; 0x27ca <WS2811_Update_Debug+0x6e>
				// Send a '0' HI: 250nS LOW: 1000nS
				WS2811_HIGH;  // Hi (start)
    279c:	5d 9a       	sbi	0x0b, 5	; 11
	...
				NOP_250;
				WS2811_LOW;  // Low
    27a6:	5d 98       	cbi	0x0b, 5	; 11
	...
				NOP_1000;
    27c8:	16 c0       	rjmp	.+44     	; 0x27f6 <WS2811_Update_Debug+0x9a>
			}
			else {
				// Send a '1' HI: 600nS LOW: 650nS
				WS2811_HIGH;  // Hi (start)
    27ca:	5d 9a       	sbi	0x0b, 5	; 11
	...
				NOP_650;
    27e0:	00 00       	nop
				WS2811_LOW;  // Low
    27e2:	5d 98       	cbi	0x0b, 5	; 11
	...
				NOP_600;
    27f4:	00 00       	nop
			}
			mask >>= 1;           // Lo (1000ns)
    27f6:	75 95       	asr	r23
    27f8:	67 95       	ror	r22
    27fa:	57 95       	ror	r21
    27fc:	47 95       	ror	r20
    27fe:	21 50       	subi	r18, 0x01	; 1
    2800:	30 40       	sbci	r19, 0x00	; 0
}
void WS2811_Update_Debug(){
	for (int led=0; led<WS2811_ledcount; led++)
	{
		long mask = 0x00800000;
		while (mask!=0) {
    2802:	09 f0       	breq	.+2      	; 0x2806 <WS2811_Update_Debug+0xaa>
    2804:	bf cf       	rjmp	.-130    	; 0x2784 <WS2811_Update_Debug+0x28>
    2806:	34 96       	adiw	r30, 0x04	; 4
		}
	}
	_delay_us(70);
}
void WS2811_Update_Debug(){
	for (int led=0; led<WS2811_ledcount; led++)
    2808:	ec 17       	cp	r30, r28
    280a:	fd 07       	cpc	r31, r29
    280c:	21 f0       	breq	.+8      	; 0x2816 <WS2811_Update_Debug+0xba>
			mask >>= 1;           // Lo (1000ns)
		}
	}
	_delay_us(70);
}
void WS2811_Update_Debug(){
    280e:	98 01       	movw	r18, r16
    2810:	b7 01       	movw	r22, r14
    2812:	a6 01       	movw	r20, r12
    2814:	b7 cf       	rjmp	.-146    	; 0x2784 <WS2811_Update_Debug+0x28>
    2816:	87 e1       	ldi	r24, 0x17	; 23
    2818:	91 e0       	ldi	r25, 0x01	; 1
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <WS2811_Update_Debug+0xbe>
    281e:	00 c0       	rjmp	.+0      	; 0x2820 <WS2811_Update_Debug+0xc4>
    2820:	00 00       	nop
			}
			mask >>= 1;           // Lo (1000ns)
		}
	}
	_delay_us(70);
}
    2822:	df 91       	pop	r29
    2824:	cf 91       	pop	r28
    2826:	1f 91       	pop	r17
    2828:	0f 91       	pop	r16
    282a:	ff 90       	pop	r15
    282c:	ef 90       	pop	r14
    282e:	df 90       	pop	r13
    2830:	cf 90       	pop	r12
    2832:	08 95       	ret

00002834 <WS2811_SetMidUpdate_Debug>:
void WS2811_SetMidUpdate_Debug(uint8_t From, uint8_t Aantal, long Kleur){
    2834:	cf 93       	push	r28
    2836:	df 93       	push	r29
    2838:	96 2f       	mov	r25, r22
    283a:	ba 01       	movw	r22, r20
    283c:	a9 01       	movw	r20, r18
	
	for (uint8_t u = From; u<(From+Aantal); u++)
    283e:	28 2f       	mov	r18, r24
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	d9 01       	movw	r26, r18
    2844:	a9 0f       	add	r26, r25
    2846:	b1 1d       	adc	r27, r1
    2848:	2a 17       	cp	r18, r26
    284a:	3b 07       	cpc	r19, r27
    284c:	ac f4       	brge	.+42     	; 0x2878 <WS2811_SetMidUpdate_Debug+0x44>
	{
		WS2811[u-1] = Kleur;
    284e:	c8 e1       	ldi	r28, 0x18	; 24
    2850:	d3 e0       	ldi	r29, 0x03	; 3
    2852:	21 50       	subi	r18, 0x01	; 1
    2854:	30 40       	sbci	r19, 0x00	; 0
    2856:	f9 01       	movw	r30, r18
    2858:	ee 0f       	add	r30, r30
    285a:	ff 1f       	adc	r31, r31
    285c:	ee 0f       	add	r30, r30
    285e:	ff 1f       	adc	r31, r31
    2860:	ec 0f       	add	r30, r28
    2862:	fd 1f       	adc	r31, r29
    2864:	40 83       	st	Z, r20
    2866:	51 83       	std	Z+1, r21	; 0x01
    2868:	62 83       	std	Z+2, r22	; 0x02
    286a:	73 83       	std	Z+3, r23	; 0x03
	}
	_delay_us(70);
}
void WS2811_SetMidUpdate_Debug(uint8_t From, uint8_t Aantal, long Kleur){
	
	for (uint8_t u = From; u<(From+Aantal); u++)
    286c:	8f 5f       	subi	r24, 0xFF	; 255
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	2a 17       	cp	r18, r26
    2874:	3b 07       	cpc	r19, r27
    2876:	6c f3       	brlt	.-38     	; 0x2852 <WS2811_SetMidUpdate_Debug+0x1e>
	{
		WS2811[u-1] = Kleur;
	}
	
	WS2811_Update_Debug();
    2878:	0e 94 ae 13 	call	0x275c	; 0x275c <WS2811_Update_Debug>
}
    287c:	df 91       	pop	r29
    287e:	cf 91       	pop	r28
    2880:	08 95       	ret

00002882 <WS2811_SetMid>:


void WS2811_SetMid(uint8_t From, uint8_t Aantal, long Kleur){
    2882:	cf 93       	push	r28
    2884:	df 93       	push	r29
    2886:	96 2f       	mov	r25, r22
    2888:	ba 01       	movw	r22, r20
    288a:	a9 01       	movw	r20, r18
	
	for (uint8_t u = From; u<(From+Aantal); u++)
    288c:	28 2f       	mov	r18, r24
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	d9 01       	movw	r26, r18
    2892:	a9 0f       	add	r26, r25
    2894:	b1 1d       	adc	r27, r1
    2896:	2a 17       	cp	r18, r26
    2898:	3b 07       	cpc	r19, r27
    289a:	ac f4       	brge	.+42     	; 0x28c6 <WS2811_SetMid+0x44>
	{
		WS2811[u-1] = Kleur; 
    289c:	c8 e1       	ldi	r28, 0x18	; 24
    289e:	d3 e0       	ldi	r29, 0x03	; 3
    28a0:	21 50       	subi	r18, 0x01	; 1
    28a2:	30 40       	sbci	r19, 0x00	; 0
    28a4:	f9 01       	movw	r30, r18
    28a6:	ee 0f       	add	r30, r30
    28a8:	ff 1f       	adc	r31, r31
    28aa:	ee 0f       	add	r30, r30
    28ac:	ff 1f       	adc	r31, r31
    28ae:	ec 0f       	add	r30, r28
    28b0:	fd 1f       	adc	r31, r29
    28b2:	40 83       	st	Z, r20
    28b4:	51 83       	std	Z+1, r21	; 0x01
    28b6:	62 83       	std	Z+2, r22	; 0x02
    28b8:	73 83       	std	Z+3, r23	; 0x03
}


void WS2811_SetMid(uint8_t From, uint8_t Aantal, long Kleur){
	
	for (uint8_t u = From; u<(From+Aantal); u++)
    28ba:	8f 5f       	subi	r24, 0xFF	; 255
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	2a 17       	cp	r18, r26
    28c2:	3b 07       	cpc	r19, r27
    28c4:	6c f3       	brlt	.-38     	; 0x28a0 <WS2811_SetMid+0x1e>
	{
		WS2811[u-1] = Kleur; 
	}
	
}
    28c6:	df 91       	pop	r29
    28c8:	cf 91       	pop	r28
    28ca:	08 95       	ret

000028cc <WS2811_SetMidAlternerend>:
void WS2811_SetMidAlternerend(uint8_t From, uint8_t Aantal, long Kleur, uint8_t Alternerend){
    28cc:	cf 92       	push	r12
    28ce:	df 92       	push	r13
    28d0:	ef 92       	push	r14
    28d2:	ff 92       	push	r15
    28d4:	0f 93       	push	r16
    28d6:	69 01       	movw	r12, r18
    28d8:	7a 01       	movw	r14, r20
	
	#define IS_ODD(x)   ((x) & 1)
	#define IS_EVEN(x)  (!(IS_ODD(x)))
	
	for (uint8_t u = From; u<(From+Aantal); u++)
    28da:	48 2f       	mov	r20, r24
    28dc:	50 e0       	ldi	r21, 0x00	; 0
    28de:	9a 01       	movw	r18, r20
    28e0:	26 0f       	add	r18, r22
    28e2:	31 1d       	adc	r19, r1
    28e4:	42 17       	cp	r20, r18
    28e6:	53 07       	cpc	r21, r19
    28e8:	5c f5       	brge	.+86     	; 0x2940 <WS2811_SetMidAlternerend+0x74>
		}
		else if (Alternerend == Ja)
		{
			if (IS_ODD(u))
			{
				WS2811[u-1] = Kleur;
    28ea:	68 e1       	ldi	r22, 0x18	; 24
    28ec:	73 e0       	ldi	r23, 0x03	; 3
	#define IS_ODD(x)   ((x) & 1)
	#define IS_EVEN(x)  (!(IS_ODD(x)))
	
	for (uint8_t u = From; u<(From+Aantal); u++)
	{
		if (Alternerend == Speciaal)
    28ee:	05 30       	cpi	r16, 0x05	; 5
    28f0:	81 f4       	brne	.+32     	; 0x2912 <WS2811_SetMidAlternerend+0x46>
		{
			if (IS_EVEN(u))
    28f2:	40 fd       	sbrc	r20, 0
    28f4:	1f c0       	rjmp	.+62     	; 0x2934 <WS2811_SetMidAlternerend+0x68>
			{
				WS2811[u-1] = Kleur;
    28f6:	41 50       	subi	r20, 0x01	; 1
    28f8:	50 40       	sbci	r21, 0x00	; 0
    28fa:	fa 01       	movw	r30, r20
    28fc:	ee 0f       	add	r30, r30
    28fe:	ff 1f       	adc	r31, r31
    2900:	ee 0f       	add	r30, r30
    2902:	ff 1f       	adc	r31, r31
    2904:	e6 0f       	add	r30, r22
    2906:	f7 1f       	adc	r31, r23
    2908:	c0 82       	st	Z, r12
    290a:	d1 82       	std	Z+1, r13	; 0x01
    290c:	e2 82       	std	Z+2, r14	; 0x02
    290e:	f3 82       	std	Z+3, r15	; 0x03
    2910:	11 c0       	rjmp	.+34     	; 0x2934 <WS2811_SetMidAlternerend+0x68>
			}
		}
		else if (Alternerend == Ja)
    2912:	01 30       	cpi	r16, 0x01	; 1
    2914:	79 f4       	brne	.+30     	; 0x2934 <WS2811_SetMidAlternerend+0x68>
		{
			if (IS_ODD(u))
    2916:	40 ff       	sbrs	r20, 0
    2918:	0d c0       	rjmp	.+26     	; 0x2934 <WS2811_SetMidAlternerend+0x68>
			{
				WS2811[u-1] = Kleur;
    291a:	41 50       	subi	r20, 0x01	; 1
    291c:	50 40       	sbci	r21, 0x00	; 0
    291e:	fa 01       	movw	r30, r20
    2920:	ee 0f       	add	r30, r30
    2922:	ff 1f       	adc	r31, r31
    2924:	ee 0f       	add	r30, r30
    2926:	ff 1f       	adc	r31, r31
    2928:	e6 0f       	add	r30, r22
    292a:	f7 1f       	adc	r31, r23
    292c:	c0 82       	st	Z, r12
    292e:	d1 82       	std	Z+1, r13	; 0x01
    2930:	e2 82       	std	Z+2, r14	; 0x02
    2932:	f3 82       	std	Z+3, r15	; 0x03
void WS2811_SetMidAlternerend(uint8_t From, uint8_t Aantal, long Kleur, uint8_t Alternerend){
	
	#define IS_ODD(x)   ((x) & 1)
	#define IS_EVEN(x)  (!(IS_ODD(x)))
	
	for (uint8_t u = From; u<(From+Aantal); u++)
    2934:	8f 5f       	subi	r24, 0xFF	; 255
    2936:	48 2f       	mov	r20, r24
    2938:	50 e0       	ldi	r21, 0x00	; 0
    293a:	42 17       	cp	r20, r18
    293c:	53 07       	cpc	r21, r19
    293e:	bc f2       	brlt	.-82     	; 0x28ee <WS2811_SetMidAlternerend+0x22>
			{
				WS2811[u-1] = Kleur;
			}			
		}
	}
}
    2940:	0f 91       	pop	r16
    2942:	ff 90       	pop	r15
    2944:	ef 90       	pop	r14
    2946:	df 90       	pop	r13
    2948:	cf 90       	pop	r12
    294a:	08 95       	ret

0000294c <WS2811_SetMidUpdate>:

void WS2811_SetMidUpdate(uint8_t From, uint8_t Aantal, long Kleur, uint8_t Alternerend){
    294c:	0f 93       	push	r16
	if (Alternerend == Ja)
    294e:	01 30       	cpi	r16, 0x01	; 1
    2950:	19 f4       	brne	.+6      	; 0x2958 <WS2811_SetMidUpdate+0xc>
	{
		WS2811_SetMidAlternerend(From, Aantal, Kleur, Alternerend);
    2952:	0e 94 66 14 	call	0x28cc	; 0x28cc <WS2811_SetMidAlternerend>
    2956:	02 c0       	rjmp	.+4      	; 0x295c <WS2811_SetMidUpdate+0x10>
	}
	else{
		WS2811_SetMid(From, Aantal, Kleur);
    2958:	0e 94 41 14 	call	0x2882	; 0x2882 <WS2811_SetMid>
	}
	
	WS2811_Update();
    295c:	0e 94 42 13 	call	0x2684	; 0x2684 <WS2811_Update>
}
    2960:	0f 91       	pop	r16
    2962:	08 95       	ret

00002964 <WS2811_SetGroupColor>:
void WS2811_SetGroupColor(int Groep, long Kleur, uint8_t Alternerend){
    2964:	cf 92       	push	r12
    2966:	df 92       	push	r13
    2968:	ef 92       	push	r14
    296a:	ff 92       	push	r15
    296c:	0f 93       	push	r16
    296e:	6a 01       	movw	r12, r20
    2970:	7b 01       	movw	r14, r22
    2972:	02 2f       	mov	r16, r18
	if (Groep == Group1){
    2974:	81 30       	cpi	r24, 0x01	; 1
    2976:	91 05       	cpc	r25, r1
    2978:	d1 f4       	brne	.+52     	; 0x29ae <WS2811_SetGroupColor+0x4a>
		if (Alternerend == Ja|Alternerend == Speciaal){WS2811_SetMidAlternerend(Group1_Start, Group1_Length, Kleur, Alternerend);}
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	21 30       	cpi	r18, 0x01	; 1
    297e:	09 f0       	breq	.+2      	; 0x2982 <WS2811_SetGroupColor+0x1e>
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	88 23       	and	r24, r24
    2984:	31 f4       	brne	.+12     	; 0x2992 <WS2811_SetGroupColor+0x2e>
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	05 30       	cpi	r16, 0x05	; 5
    298a:	09 f0       	breq	.+2      	; 0x298e <WS2811_SetGroupColor+0x2a>
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	88 23       	and	r24, r24
    2990:	39 f0       	breq	.+14     	; 0x29a0 <WS2811_SetGroupColor+0x3c>
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	66 e0       	ldi	r22, 0x06	; 6
    2996:	a7 01       	movw	r20, r14
    2998:	96 01       	movw	r18, r12
    299a:	0e 94 66 14 	call	0x28cc	; 0x28cc <WS2811_SetMidAlternerend>
    299e:	97 c0       	rjmp	.+302    	; 0x2ace <WS2811_SetGroupColor+0x16a>
		else{WS2811_SetMid(Group1_Start, Group1_Length, Kleur);}		
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	66 e0       	ldi	r22, 0x06	; 6
    29a4:	a7 01       	movw	r20, r14
    29a6:	96 01       	movw	r18, r12
    29a8:	0e 94 41 14 	call	0x2882	; 0x2882 <WS2811_SetMid>
    29ac:	90 c0       	rjmp	.+288    	; 0x2ace <WS2811_SetGroupColor+0x16a>
	}
	else if (Groep == Group2){
    29ae:	82 30       	cpi	r24, 0x02	; 2
    29b0:	91 05       	cpc	r25, r1
    29b2:	d1 f4       	brne	.+52     	; 0x29e8 <WS2811_SetGroupColor+0x84>
		if (Alternerend == Ja|Alternerend == Speciaal){WS2811_SetMidAlternerend(Group2_Start, Group2_Length, Kleur, Alternerend);}
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	21 30       	cpi	r18, 0x01	; 1
    29b8:	09 f0       	breq	.+2      	; 0x29bc <WS2811_SetGroupColor+0x58>
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	88 23       	and	r24, r24
    29be:	31 f4       	brne	.+12     	; 0x29cc <WS2811_SetGroupColor+0x68>
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	05 30       	cpi	r16, 0x05	; 5
    29c4:	09 f0       	breq	.+2      	; 0x29c8 <WS2811_SetGroupColor+0x64>
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	88 23       	and	r24, r24
    29ca:	39 f0       	breq	.+14     	; 0x29da <WS2811_SetGroupColor+0x76>
    29cc:	87 e0       	ldi	r24, 0x07	; 7
    29ce:	65 e0       	ldi	r22, 0x05	; 5
    29d0:	a7 01       	movw	r20, r14
    29d2:	96 01       	movw	r18, r12
    29d4:	0e 94 66 14 	call	0x28cc	; 0x28cc <WS2811_SetMidAlternerend>
    29d8:	7a c0       	rjmp	.+244    	; 0x2ace <WS2811_SetGroupColor+0x16a>
		else{WS2811_SetMid(Group2_Start, Group2_Length, Kleur);}		
    29da:	87 e0       	ldi	r24, 0x07	; 7
    29dc:	65 e0       	ldi	r22, 0x05	; 5
    29de:	a7 01       	movw	r20, r14
    29e0:	96 01       	movw	r18, r12
    29e2:	0e 94 41 14 	call	0x2882	; 0x2882 <WS2811_SetMid>
    29e6:	73 c0       	rjmp	.+230    	; 0x2ace <WS2811_SetGroupColor+0x16a>
	}
	else if (Groep == Group3){
    29e8:	83 30       	cpi	r24, 0x03	; 3
    29ea:	91 05       	cpc	r25, r1
    29ec:	d1 f4       	brne	.+52     	; 0x2a22 <WS2811_SetGroupColor+0xbe>
		if (Alternerend == Ja|Alternerend == Speciaal){WS2811_SetMidAlternerend(Group3_Start, Group3_Length, Kleur, Alternerend);}
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	21 30       	cpi	r18, 0x01	; 1
    29f2:	09 f0       	breq	.+2      	; 0x29f6 <WS2811_SetGroupColor+0x92>
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	88 23       	and	r24, r24
    29f8:	31 f4       	brne	.+12     	; 0x2a06 <WS2811_SetGroupColor+0xa2>
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	05 30       	cpi	r16, 0x05	; 5
    29fe:	09 f0       	breq	.+2      	; 0x2a02 <WS2811_SetGroupColor+0x9e>
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	88 23       	and	r24, r24
    2a04:	39 f0       	breq	.+14     	; 0x2a14 <WS2811_SetGroupColor+0xb0>
    2a06:	8c e0       	ldi	r24, 0x0C	; 12
    2a08:	65 e0       	ldi	r22, 0x05	; 5
    2a0a:	a7 01       	movw	r20, r14
    2a0c:	96 01       	movw	r18, r12
    2a0e:	0e 94 66 14 	call	0x28cc	; 0x28cc <WS2811_SetMidAlternerend>
    2a12:	5d c0       	rjmp	.+186    	; 0x2ace <WS2811_SetGroupColor+0x16a>
		else{WS2811_SetMid(Group3_Start, Group3_Length, Kleur);}		
    2a14:	8c e0       	ldi	r24, 0x0C	; 12
    2a16:	65 e0       	ldi	r22, 0x05	; 5
    2a18:	a7 01       	movw	r20, r14
    2a1a:	96 01       	movw	r18, r12
    2a1c:	0e 94 41 14 	call	0x2882	; 0x2882 <WS2811_SetMid>
    2a20:	56 c0       	rjmp	.+172    	; 0x2ace <WS2811_SetGroupColor+0x16a>
	}
	else if (Groep == Group4){
    2a22:	84 30       	cpi	r24, 0x04	; 4
    2a24:	91 05       	cpc	r25, r1
    2a26:	d1 f4       	brne	.+52     	; 0x2a5c <WS2811_SetGroupColor+0xf8>
		if (Alternerend == Ja|Alternerend == Speciaal){WS2811_SetMidAlternerend(Group4_Start, Group4_Length, Kleur, Alternerend);}
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	21 30       	cpi	r18, 0x01	; 1
    2a2c:	09 f0       	breq	.+2      	; 0x2a30 <WS2811_SetGroupColor+0xcc>
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	88 23       	and	r24, r24
    2a32:	31 f4       	brne	.+12     	; 0x2a40 <WS2811_SetGroupColor+0xdc>
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	05 30       	cpi	r16, 0x05	; 5
    2a38:	09 f0       	breq	.+2      	; 0x2a3c <WS2811_SetGroupColor+0xd8>
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	88 23       	and	r24, r24
    2a3e:	39 f0       	breq	.+14     	; 0x2a4e <WS2811_SetGroupColor+0xea>
    2a40:	81 e1       	ldi	r24, 0x11	; 17
    2a42:	69 e0       	ldi	r22, 0x09	; 9
    2a44:	a7 01       	movw	r20, r14
    2a46:	96 01       	movw	r18, r12
    2a48:	0e 94 66 14 	call	0x28cc	; 0x28cc <WS2811_SetMidAlternerend>
    2a4c:	40 c0       	rjmp	.+128    	; 0x2ace <WS2811_SetGroupColor+0x16a>
		else{WS2811_SetMid(Group4_Start, Group4_Length, Kleur);}		
    2a4e:	81 e1       	ldi	r24, 0x11	; 17
    2a50:	69 e0       	ldi	r22, 0x09	; 9
    2a52:	a7 01       	movw	r20, r14
    2a54:	96 01       	movw	r18, r12
    2a56:	0e 94 41 14 	call	0x2882	; 0x2882 <WS2811_SetMid>
    2a5a:	39 c0       	rjmp	.+114    	; 0x2ace <WS2811_SetGroupColor+0x16a>
	}
	else if (Groep == Group5){
    2a5c:	85 30       	cpi	r24, 0x05	; 5
    2a5e:	91 05       	cpc	r25, r1
    2a60:	d1 f4       	brne	.+52     	; 0x2a96 <WS2811_SetGroupColor+0x132>
	if (Alternerend == Ja|Alternerend == Speciaal){WS2811_SetMidAlternerend(Group5_Start, Group5_Length, Kleur, Alternerend);}
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	21 30       	cpi	r18, 0x01	; 1
    2a66:	09 f0       	breq	.+2      	; 0x2a6a <WS2811_SetGroupColor+0x106>
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	88 23       	and	r24, r24
    2a6c:	31 f4       	brne	.+12     	; 0x2a7a <WS2811_SetGroupColor+0x116>
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	05 30       	cpi	r16, 0x05	; 5
    2a72:	09 f0       	breq	.+2      	; 0x2a76 <WS2811_SetGroupColor+0x112>
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	88 23       	and	r24, r24
    2a78:	39 f0       	breq	.+14     	; 0x2a88 <WS2811_SetGroupColor+0x124>
    2a7a:	87 e0       	ldi	r24, 0x07	; 7
    2a7c:	6a e0       	ldi	r22, 0x0A	; 10
    2a7e:	a7 01       	movw	r20, r14
    2a80:	96 01       	movw	r18, r12
    2a82:	0e 94 66 14 	call	0x28cc	; 0x28cc <WS2811_SetMidAlternerend>
    2a86:	23 c0       	rjmp	.+70     	; 0x2ace <WS2811_SetGroupColor+0x16a>
		else{WS2811_SetMid(Group5_Start, Group5_Length, Kleur);}		
    2a88:	87 e0       	ldi	r24, 0x07	; 7
    2a8a:	6a e0       	ldi	r22, 0x0A	; 10
    2a8c:	a7 01       	movw	r20, r14
    2a8e:	96 01       	movw	r18, r12
    2a90:	0e 94 41 14 	call	0x2882	; 0x2882 <WS2811_SetMid>
    2a94:	1c c0       	rjmp	.+56     	; 0x2ace <WS2811_SetGroupColor+0x16a>
	}
	else if (Groep == GroupAll){
    2a96:	86 30       	cpi	r24, 0x06	; 6
    2a98:	91 05       	cpc	r25, r1
    2a9a:	c9 f4       	brne	.+50     	; 0x2ace <WS2811_SetGroupColor+0x16a>
		if (Alternerend == Ja|Alternerend == Speciaal){WS2811_SetMidAlternerend(GroupALL_Start, GroupALL_Length, Kleur, Alternerend);}
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	21 30       	cpi	r18, 0x01	; 1
    2aa0:	09 f0       	breq	.+2      	; 0x2aa4 <WS2811_SetGroupColor+0x140>
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	88 23       	and	r24, r24
    2aa6:	31 f4       	brne	.+12     	; 0x2ab4 <WS2811_SetGroupColor+0x150>
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	05 30       	cpi	r16, 0x05	; 5
    2aac:	09 f0       	breq	.+2      	; 0x2ab0 <WS2811_SetGroupColor+0x14c>
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	88 23       	and	r24, r24
    2ab2:	39 f0       	breq	.+14     	; 0x2ac2 <WS2811_SetGroupColor+0x15e>
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	69 e1       	ldi	r22, 0x19	; 25
    2ab8:	a7 01       	movw	r20, r14
    2aba:	96 01       	movw	r18, r12
    2abc:	0e 94 66 14 	call	0x28cc	; 0x28cc <WS2811_SetMidAlternerend>
    2ac0:	06 c0       	rjmp	.+12     	; 0x2ace <WS2811_SetGroupColor+0x16a>
		else{WS2811_SetMid(GroupALL_Start, GroupALL_Length, Kleur);}		
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	69 e1       	ldi	r22, 0x19	; 25
    2ac6:	a7 01       	movw	r20, r14
    2ac8:	96 01       	movw	r18, r12
    2aca:	0e 94 41 14 	call	0x2882	; 0x2882 <WS2811_SetMid>
	}

}
    2ace:	0f 91       	pop	r16
    2ad0:	ff 90       	pop	r15
    2ad2:	ef 90       	pop	r14
    2ad4:	df 90       	pop	r13
    2ad6:	cf 90       	pop	r12
    2ad8:	08 95       	ret

00002ada <WS2811_SetGroupColorUpdate>:
void WS2811_SetGroupColorUpdate(int Groep, long Kleur, uint8_t Alternerend){
	WS2811_SetGroupColor(Groep, Kleur, Alternerend);
    2ada:	0e 94 b2 14 	call	0x2964	; 0x2964 <WS2811_SetGroupColor>
	WS2811_Update();
    2ade:	0e 94 42 13 	call	0x2684	; 0x2684 <WS2811_Update>
}
    2ae2:	08 95       	ret

00002ae4 <WS2811_SetGroupRainbowColor>:
void WS2811_SetGroupRainbowColor(uint8_t Groep, uint8_t Startnr_Regenboog){
    2ae4:	df 92       	push	r13
    2ae6:	ef 92       	push	r14
    2ae8:	ff 92       	push	r15
    2aea:	0f 93       	push	r16
    2aec:	1f 93       	push	r17
    2aee:	cf 93       	push	r28
    2af0:	df 93       	push	r29
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    2af6:	c0 58       	subi	r28, 0x80	; 128
    2af8:	d0 40       	sbci	r29, 0x00	; 0
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	de bf       	out	0x3e, r29	; 62
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	cd bf       	out	0x3d, r28	; 61
	long RainbowStrain[] = {COLOR_RB1, COLOR_RB2, COLOR_RB3, COLOR_RB4, COLOR_RB5, COLOR_RB6, COLOR_RB7, COLOR_RB8, COLOR_RB9, COLOR_RB10, COLOR_RB11, COLOR_RB12, COLOR_RB13, COLOR_RB14, COLOR_RB15, COLOR_RB16, COLOR_RB17, COLOR_RB18, COLOR_RB19, COLOR_RB20, COLOR_RB21, COLOR_RB22, COLOR_RB23, COLOR_RB24, COLOR_RB25, COLOR_RB26, COLOR_RB27, COLOR_RB28, COLOR_RB29, COLOR_RB30, COLOR_RB31, COLOR_RB32};
    2b04:	de 01       	movw	r26, r28
    2b06:	11 96       	adiw	r26, 0x01	; 1
    2b08:	e7 e9       	ldi	r30, 0x97	; 151
    2b0a:	f2 e0       	ldi	r31, 0x02	; 2
    2b0c:	90 e8       	ldi	r25, 0x80	; 128
    2b0e:	01 90       	ld	r0, Z+
    2b10:	0d 92       	st	X+, r0
    2b12:	91 50       	subi	r25, 0x01	; 1
    2b14:	e1 f7       	brne	.-8      	; 0x2b0e <WS2811_SetGroupRainbowColor+0x2a>
	uint8_t Groeplengte = 0;
	uint8_t Groepstart = 0;
	
	if (Groep == Group1){
    2b16:	81 30       	cpi	r24, 0x01	; 1
    2b18:	69 f0       	breq	.+26     	; 0x2b34 <WS2811_SetGroupRainbowColor+0x50>
	 		Groeplengte = Group1_Length;
	 		Groepstart = Group1_Start;
		}
	else if (Groep == Group2){
    2b1a:	82 30       	cpi	r24, 0x02	; 2
    2b1c:	71 f0       	breq	.+28     	; 0x2b3a <WS2811_SetGroupRainbowColor+0x56>
	 		Groeplengte = Group2_Length;
	 		Groepstart = Group2_Start;
		}
	else if (Groep == Group3){
    2b1e:	83 30       	cpi	r24, 0x03	; 3
    2b20:	79 f0       	breq	.+30     	; 0x2b40 <WS2811_SetGroupRainbowColor+0x5c>
	 		Groeplengte = Group3_Length;
	 		Groepstart = Group3_Start;
		}
	else if (Groep == Group4){
    2b22:	84 30       	cpi	r24, 0x04	; 4
    2b24:	81 f0       	breq	.+32     	; 0x2b46 <WS2811_SetGroupRainbowColor+0x62>
	 		Groeplengte = Group4_Length;
	 		Groepstart = Group4_Start;
		}
	else if (Groep == Group5){
    2b26:	85 30       	cpi	r24, 0x05	; 5
    2b28:	89 f0       	breq	.+34     	; 0x2b4c <WS2811_SetGroupRainbowColor+0x68>
		Groeplengte = Group5_Length;
		Groepstart = Group5_Start;
	}
	else if (Groep == GroupAll){
    2b2a:	86 30       	cpi	r24, 0x06	; 6
    2b2c:	b9 f5       	brne	.+110    	; 0x2b9c <WS2811_SetGroupRainbowColor+0xb8>
	 		Groeplengte = GroupALL_Length;
	 		Groepstart = GroupALL_Start;
    2b2e:	11 e0       	ldi	r17, 0x01	; 1
	else if (Groep == Group5){
		Groeplengte = Group5_Length;
		Groepstart = Group5_Start;
	}
	else if (Groep == GroupAll){
	 		Groeplengte = GroupALL_Length;
    2b30:	89 e1       	ldi	r24, 0x19	; 25
    2b32:	0e c0       	rjmp	.+28     	; 0x2b50 <WS2811_SetGroupRainbowColor+0x6c>
	uint8_t Groeplengte = 0;
	uint8_t Groepstart = 0;
	
	if (Groep == Group1){
	 		Groeplengte = Group1_Length;
	 		Groepstart = Group1_Start;
    2b34:	11 e0       	ldi	r17, 0x01	; 1
	long RainbowStrain[] = {COLOR_RB1, COLOR_RB2, COLOR_RB3, COLOR_RB4, COLOR_RB5, COLOR_RB6, COLOR_RB7, COLOR_RB8, COLOR_RB9, COLOR_RB10, COLOR_RB11, COLOR_RB12, COLOR_RB13, COLOR_RB14, COLOR_RB15, COLOR_RB16, COLOR_RB17, COLOR_RB18, COLOR_RB19, COLOR_RB20, COLOR_RB21, COLOR_RB22, COLOR_RB23, COLOR_RB24, COLOR_RB25, COLOR_RB26, COLOR_RB27, COLOR_RB28, COLOR_RB29, COLOR_RB30, COLOR_RB31, COLOR_RB32};
	uint8_t Groeplengte = 0;
	uint8_t Groepstart = 0;
	
	if (Groep == Group1){
	 		Groeplengte = Group1_Length;
    2b36:	86 e0       	ldi	r24, 0x06	; 6
    2b38:	0b c0       	rjmp	.+22     	; 0x2b50 <WS2811_SetGroupRainbowColor+0x6c>
	 		Groepstart = Group1_Start;
		}
	else if (Groep == Group2){
	 		Groeplengte = Group2_Length;
	 		Groepstart = Group2_Start;
    2b3a:	17 e0       	ldi	r17, 0x07	; 7
	if (Groep == Group1){
	 		Groeplengte = Group1_Length;
	 		Groepstart = Group1_Start;
		}
	else if (Groep == Group2){
	 		Groeplengte = Group2_Length;
    2b3c:	85 e0       	ldi	r24, 0x05	; 5
    2b3e:	08 c0       	rjmp	.+16     	; 0x2b50 <WS2811_SetGroupRainbowColor+0x6c>
	 		Groepstart = Group2_Start;
		}
	else if (Groep == Group3){
	 		Groeplengte = Group3_Length;
	 		Groepstart = Group3_Start;
    2b40:	1c e0       	ldi	r17, 0x0C	; 12
	else if (Groep == Group2){
	 		Groeplengte = Group2_Length;
	 		Groepstart = Group2_Start;
		}
	else if (Groep == Group3){
	 		Groeplengte = Group3_Length;
    2b42:	85 e0       	ldi	r24, 0x05	; 5
    2b44:	05 c0       	rjmp	.+10     	; 0x2b50 <WS2811_SetGroupRainbowColor+0x6c>
	 		Groepstart = Group3_Start;
		}
	else if (Groep == Group4){
	 		Groeplengte = Group4_Length;
	 		Groepstart = Group4_Start;
    2b46:	11 e1       	ldi	r17, 0x11	; 17
	else if (Groep == Group3){
	 		Groeplengte = Group3_Length;
	 		Groepstart = Group3_Start;
		}
	else if (Groep == Group4){
	 		Groeplengte = Group4_Length;
    2b48:	89 e0       	ldi	r24, 0x09	; 9
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <WS2811_SetGroupRainbowColor+0x6c>
	 		Groepstart = Group4_Start;
		}
	else if (Groep == Group5){
		Groeplengte = Group5_Length;
		Groepstart = Group5_Start;
    2b4c:	17 e0       	ldi	r17, 0x07	; 7
	else if (Groep == Group4){
	 		Groeplengte = Group4_Length;
	 		Groepstart = Group4_Start;
		}
	else if (Groep == Group5){
		Groeplengte = Group5_Length;
    2b4e:	8a e0       	ldi	r24, 0x0A	; 10
	 		Groepstart = GroupALL_Start;
		}
	 
	if ((Groeplengte != 0)&(Groepstart!=0))
	{
		for (uint8_t i=Groepstart; i<Groepstart+Groeplengte; i++)
    2b50:	e8 2e       	mov	r14, r24
    2b52:	ff 24       	eor	r15, r15
    2b54:	e1 0e       	add	r14, r17
    2b56:	f1 1c       	adc	r15, r1
    2b58:	06 2f       	mov	r16, r22
    2b5a:	0f 5f       	subi	r16, 0xFF	; 255
		{
			uint8_t Identifier = (Startnr_Regenboog+i-Groepstart+1);
			if (Identifier>31)
			{
				Identifier = 0;
    2b5c:	dd 24       	eor	r13, r13
	if ((Groeplengte != 0)&(Groepstart!=0))
	{
		for (uint8_t i=Groepstart; i<Groepstart+Groeplengte; i++)
		{
			uint8_t Identifier = (Startnr_Regenboog+i-Groepstart+1);
			if (Identifier>31)
    2b5e:	00 32       	cpi	r16, 0x20	; 32
    2b60:	10 f4       	brcc	.+4      	; 0x2b66 <WS2811_SetGroupRainbowColor+0x82>
	 
	if ((Groeplengte != 0)&(Groepstart!=0))
	{
		for (uint8_t i=Groepstart; i<Groepstart+Groeplengte; i++)
		{
			uint8_t Identifier = (Startnr_Regenboog+i-Groepstart+1);
    2b62:	e0 2f       	mov	r30, r16
    2b64:	01 c0       	rjmp	.+2      	; 0x2b68 <WS2811_SetGroupRainbowColor+0x84>
			if (Identifier>31)
			{
				Identifier = 0;
    2b66:	ed 2d       	mov	r30, r13
			}
			WS2811_SetMid((i), 1, RainbowStrain[Identifier]);
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	ee 0f       	add	r30, r30
    2b6c:	ff 1f       	adc	r31, r31
    2b6e:	ee 0f       	add	r30, r30
    2b70:	ff 1f       	adc	r31, r31
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	8c 0f       	add	r24, r28
    2b78:	9d 1f       	adc	r25, r29
    2b7a:	e8 0f       	add	r30, r24
    2b7c:	f9 1f       	adc	r31, r25
    2b7e:	20 81       	ld	r18, Z
    2b80:	31 81       	ldd	r19, Z+1	; 0x01
    2b82:	42 81       	ldd	r20, Z+2	; 0x02
    2b84:	53 81       	ldd	r21, Z+3	; 0x03
    2b86:	81 2f       	mov	r24, r17
    2b88:	61 e0       	ldi	r22, 0x01	; 1
    2b8a:	0e 94 41 14 	call	0x2882	; 0x2882 <WS2811_SetMid>
	 		Groepstart = GroupALL_Start;
		}
	 
	if ((Groeplengte != 0)&(Groepstart!=0))
	{
		for (uint8_t i=Groepstart; i<Groepstart+Groeplengte; i++)
    2b8e:	1f 5f       	subi	r17, 0xFF	; 255
    2b90:	0f 5f       	subi	r16, 0xFF	; 255
    2b92:	81 2f       	mov	r24, r17
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	8e 15       	cp	r24, r14
    2b98:	9f 05       	cpc	r25, r15
    2b9a:	0c f3       	brlt	.-62     	; 0x2b5e <WS2811_SetGroupRainbowColor+0x7a>
		}
	}
	
	
	
}
    2b9c:	c0 58       	subi	r28, 0x80	; 128
    2b9e:	df 4f       	sbci	r29, 0xFF	; 255
    2ba0:	0f b6       	in	r0, 0x3f	; 63
    2ba2:	f8 94       	cli
    2ba4:	de bf       	out	0x3e, r29	; 62
    2ba6:	0f be       	out	0x3f, r0	; 63
    2ba8:	cd bf       	out	0x3d, r28	; 61
    2baa:	df 91       	pop	r29
    2bac:	cf 91       	pop	r28
    2bae:	1f 91       	pop	r17
    2bb0:	0f 91       	pop	r16
    2bb2:	ff 90       	pop	r15
    2bb4:	ef 90       	pop	r14
    2bb6:	df 90       	pop	r13
    2bb8:	08 95       	ret

00002bba <WS2811_RotateGroup>:

void WS2811_RotateGroup(uint8_t Groep, uint8_t AantalKeer, uint8_t Richting, uint8_t UpdateTijdensRotate, uint16_t DelaytijdTijdensRotate){
    2bba:	2f 92       	push	r2
    2bbc:	3f 92       	push	r3
    2bbe:	4f 92       	push	r4
    2bc0:	5f 92       	push	r5
    2bc2:	6f 92       	push	r6
    2bc4:	7f 92       	push	r7
    2bc6:	8f 92       	push	r8
    2bc8:	9f 92       	push	r9
    2bca:	af 92       	push	r10
    2bcc:	bf 92       	push	r11
    2bce:	cf 92       	push	r12
    2bd0:	df 92       	push	r13
    2bd2:	ef 92       	push	r14
    2bd4:	ff 92       	push	r15
    2bd6:	0f 93       	push	r16
    2bd8:	1f 93       	push	r17
    2bda:	cf 93       	push	r28
    2bdc:	df 93       	push	r29
    2bde:	00 d0       	rcall	.+0      	; 0x2be0 <WS2811_RotateGroup+0x26>
    2be0:	00 d0       	rcall	.+0      	; 0x2be2 <WS2811_RotateGroup+0x28>
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <WS2811_RotateGroup+0x2a>
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
    2be8:	d4 2e       	mov	r13, r20
    2bea:	58 01       	movw	r10, r16
			{
				WS2811_Update();
			}
		if (DelaytijdTijdensRotate != 0)
		{
			for (uint16_t delayTijd= 0; delayTijd<DelaytijdTijdensRotate-1; delayTijd++)
    2bec:	66 23       	and	r22, r22
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <WS2811_RotateGroup+0x38>
    2bf0:	61 e0       	ldi	r22, 0x01	; 1
	uint8_t Groeplengte = 0;
	uint8_t Groepstart = 0;
	
	if(AantalKeer<=1){AantalKeer=1;}
	
	if (Groep == Group1){
    2bf2:	81 30       	cpi	r24, 0x01	; 1
    2bf4:	49 f0       	breq	.+18     	; 0x2c08 <WS2811_RotateGroup+0x4e>
	 	Groeplengte = Group1_Length;
	 	Groepstart = Group1_Start;
	}
	else if (Groep == Group2){
    2bf6:	82 30       	cpi	r24, 0x02	; 2
    2bf8:	51 f0       	breq	.+20     	; 0x2c0e <WS2811_RotateGroup+0x54>
	 	Groeplengte = Group2_Length;
	 	Groepstart = Group2_Start;
	}
	else if (Groep == Group3){
    2bfa:	83 30       	cpi	r24, 0x03	; 3
    2bfc:	59 f0       	breq	.+22     	; 0x2c14 <WS2811_RotateGroup+0x5a>
	 	Groeplengte = Group3_Length;
	 	Groepstart = Group3_Start;
	}
	else if (Groep == Group4){
    2bfe:	84 30       	cpi	r24, 0x04	; 4
    2c00:	61 f0       	breq	.+24     	; 0x2c1a <WS2811_RotateGroup+0x60>
	
}

void WS2811_RotateGroup(uint8_t Groep, uint8_t AantalKeer, uint8_t Richting, uint8_t UpdateTijdensRotate, uint16_t DelaytijdTijdensRotate){
	uint8_t Groeplengte = 0;
	uint8_t Groepstart = 0;
    2c02:	10 e0       	ldi	r17, 0x00	; 0
	
	
}

void WS2811_RotateGroup(uint8_t Groep, uint8_t AantalKeer, uint8_t Richting, uint8_t UpdateTijdensRotate, uint16_t DelaytijdTijdensRotate){
	uint8_t Groeplengte = 0;
    2c04:	70 e0       	ldi	r23, 0x00	; 0
    2c06:	0b c0       	rjmp	.+22     	; 0x2c1e <WS2811_RotateGroup+0x64>
	
	if(AantalKeer<=1){AantalKeer=1;}
	
	if (Groep == Group1){
	 	Groeplengte = Group1_Length;
	 	Groepstart = Group1_Start;
    2c08:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t Groepstart = 0;
	
	if(AantalKeer<=1){AantalKeer=1;}
	
	if (Groep == Group1){
	 	Groeplengte = Group1_Length;
    2c0a:	76 e0       	ldi	r23, 0x06	; 6
    2c0c:	08 c0       	rjmp	.+16     	; 0x2c1e <WS2811_RotateGroup+0x64>
	 	Groepstart = Group1_Start;
	}
	else if (Groep == Group2){
	 	Groeplengte = Group2_Length;
	 	Groepstart = Group2_Start;
    2c0e:	17 e0       	ldi	r17, 0x07	; 7
	if (Groep == Group1){
	 	Groeplengte = Group1_Length;
	 	Groepstart = Group1_Start;
	}
	else if (Groep == Group2){
	 	Groeplengte = Group2_Length;
    2c10:	75 e0       	ldi	r23, 0x05	; 5
    2c12:	05 c0       	rjmp	.+10     	; 0x2c1e <WS2811_RotateGroup+0x64>
	 	Groepstart = Group2_Start;
	}
	else if (Groep == Group3){
	 	Groeplengte = Group3_Length;
	 	Groepstart = Group3_Start;
    2c14:	1c e0       	ldi	r17, 0x0C	; 12
	else if (Groep == Group2){
	 	Groeplengte = Group2_Length;
	 	Groepstart = Group2_Start;
	}
	else if (Groep == Group3){
	 	Groeplengte = Group3_Length;
    2c16:	75 e0       	ldi	r23, 0x05	; 5
    2c18:	02 c0       	rjmp	.+4      	; 0x2c1e <WS2811_RotateGroup+0x64>
	 	Groepstart = Group3_Start;
	}
	else if (Groep == Group4){
	 	Groeplengte = Group4_Length;
	 	Groepstart = Group4_Start;
    2c1a:	11 e1       	ldi	r17, 0x11	; 17
	else if (Groep == Group3){
	 	Groeplengte = Group3_Length;
	 	Groepstart = Group3_Start;
	}
	else if (Groep == Group4){
	 	Groeplengte = Group4_Length;
    2c1c:	79 e0       	ldi	r23, 0x09	; 9
	 	Groepstart = Group4_Start;
	}
	
	for (uint8_t Frequentie=1; Frequentie<(AantalKeer+1); Frequentie++)
    2c1e:	86 2e       	mov	r8, r22
    2c20:	99 24       	eor	r9, r9
    2c22:	08 94       	sec
    2c24:	81 1c       	adc	r8, r1
    2c26:	91 1c       	adc	r9, r1
    2c28:	22 e0       	ldi	r18, 0x02	; 2
    2c2a:	82 16       	cp	r8, r18
    2c2c:	91 04       	cpc	r9, r1
    2c2e:	0c f4       	brge	.+2      	; 0x2c32 <WS2811_RotateGroup+0x78>
    2c30:	db c0       	rjmp	.+438    	; 0x2de8 <WS2811_RotateGroup+0x22e>
    2c32:	01 e0       	ldi	r16, 0x01	; 1
			}
			WS2811[Groepstart +Groeplengte-4] = temp;
		}
		else if (Richting == Rechts)
		{
			long temp = WS2811[Groepstart -1];
    2c34:	21 2f       	mov	r18, r17
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	c9 01       	movw	r24, r18
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	88 0f       	add	r24, r24
    2c3e:	99 1f       	adc	r25, r25
    2c40:	88 0f       	add	r24, r24
    2c42:	99 1f       	adc	r25, r25
    2c44:	48 e1       	ldi	r20, 0x18	; 24
    2c46:	53 e0       	ldi	r21, 0x03	; 3
    2c48:	48 0f       	add	r20, r24
    2c4a:	59 1f       	adc	r21, r25
    2c4c:	5a 83       	std	Y+2, r21	; 0x02
    2c4e:	49 83       	std	Y+1, r20	; 0x01
			WS2811[Groepstart -1] = WS2811[Groepstart +Groeplengte-3];
    2c50:	a9 01       	movw	r20, r18
    2c52:	47 0f       	add	r20, r23
    2c54:	51 1d       	adc	r21, r1
    2c56:	ca 01       	movw	r24, r20
    2c58:	03 97       	sbiw	r24, 0x03	; 3
    2c5a:	88 0f       	add	r24, r24
    2c5c:	99 1f       	adc	r25, r25
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	0f 2e       	mov	r0, r31
    2c64:	f8 e1       	ldi	r31, 0x18	; 24
    2c66:	2f 2e       	mov	r2, r31
    2c68:	f3 e0       	ldi	r31, 0x03	; 3
    2c6a:	3f 2e       	mov	r3, r31
    2c6c:	f0 2d       	mov	r31, r0
    2c6e:	28 0e       	add	r2, r24
    2c70:	39 1e       	adc	r3, r25
			for (uint8_t u=Groepstart +Groeplengte-3; u>Groepstart ; u--)
    2c72:	c7 2e       	mov	r12, r23
    2c74:	c1 0e       	add	r12, r17
			{
				WS2811[u] = WS2811[u-1];
			}
			
			WS2811[Groepstart ] = temp;
    2c76:	c9 01       	movw	r24, r18
    2c78:	88 0f       	add	r24, r24
    2c7a:	99 1f       	adc	r25, r25
    2c7c:	88 0f       	add	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	a8 e1       	ldi	r26, 0x18	; 24
    2c82:	b3 e0       	ldi	r27, 0x03	; 3
    2c84:	a8 0f       	add	r26, r24
    2c86:	b9 1f       	adc	r27, r25
    2c88:	be 83       	std	Y+6, r27	; 0x06
    2c8a:	ad 83       	std	Y+5, r26	; 0x05
	{
		if (Richting == Links)
		{
			long temp = WS2811[Groepstart+Groeplengte-3];
			WS2811[Groepstart +Groeplengte-3] = WS2811[Groepstart -1];
			for (uint8_t u= Groepstart -1; u< Groepstart +Groeplengte-4; u++)
    2c8c:	0f 2e       	mov	r0, r31
    2c8e:	fc ef       	ldi	r31, 0xFC	; 252
    2c90:	ef 2e       	mov	r14, r31
    2c92:	ff ef       	ldi	r31, 0xFF	; 255
    2c94:	ff 2e       	mov	r15, r31
    2c96:	f0 2d       	mov	r31, r0
    2c98:	e4 0e       	add	r14, r20
    2c9a:	f5 1e       	adc	r15, r21
			{
				WS2811[u] = WS2811[u+1];
			}
			WS2811[Groepstart +Groeplengte-4] = temp;
    2c9c:	c7 01       	movw	r24, r14
    2c9e:	88 0f       	add	r24, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	88 0f       	add	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	e8 e1       	ldi	r30, 0x18	; 24
    2ca8:	f3 e0       	ldi	r31, 0x03	; 3
    2caa:	e8 0f       	add	r30, r24
    2cac:	f9 1f       	adc	r31, r25
    2cae:	fc 83       	std	Y+4, r31	; 0x04
    2cb0:	eb 83       	std	Y+3, r30	; 0x03
	 	Groepstart = Group4_Start;
	}
	
	for (uint8_t Frequentie=1; Frequentie<(AantalKeer+1); Frequentie++)
	{
		if (Richting == Links)
    2cb2:	f1 e0       	ldi	r31, 0x01	; 1
    2cb4:	df 16       	cp	r13, r31
    2cb6:	f1 f5       	brne	.+124    	; 0x2d34 <WS2811_RotateGroup+0x17a>
		{
			long temp = WS2811[Groepstart+Groeplengte-3];
    2cb8:	d1 01       	movw	r26, r2
    2cba:	4d 90       	ld	r4, X+
    2cbc:	5d 90       	ld	r5, X+
    2cbe:	6d 90       	ld	r6, X+
    2cc0:	7c 90       	ld	r7, X
			WS2811[Groepstart +Groeplengte-3] = WS2811[Groepstart -1];
    2cc2:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc4:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc6:	80 81       	ld	r24, Z
    2cc8:	91 81       	ldd	r25, Z+1	; 0x01
    2cca:	a2 81       	ldd	r26, Z+2	; 0x02
    2ccc:	b3 81       	ldd	r27, Z+3	; 0x03
    2cce:	f1 01       	movw	r30, r2
    2cd0:	80 83       	st	Z, r24
    2cd2:	91 83       	std	Z+1, r25	; 0x01
    2cd4:	a2 83       	std	Z+2, r26	; 0x02
    2cd6:	b3 83       	std	Z+3, r27	; 0x03
			for (uint8_t u= Groepstart -1; u< Groepstart +Groeplengte-4; u++)
    2cd8:	21 2f       	mov	r18, r17
    2cda:	21 50       	subi	r18, 0x01	; 1
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	2e 15       	cp	r18, r14
    2ce0:	3f 05       	cpc	r19, r15
    2ce2:	0c f5       	brge	.+66     	; 0x2d26 <WS2811_RotateGroup+0x16c>
    2ce4:	e1 2f       	mov	r30, r17
			{
				WS2811[u] = WS2811[u+1];
    2ce6:	c9 01       	movw	r24, r18
    2ce8:	01 96       	adiw	r24, 0x01	; 1
    2cea:	88 0f       	add	r24, r24
    2cec:	99 1f       	adc	r25, r25
    2cee:	88 0f       	add	r24, r24
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	88 5e       	subi	r24, 0xE8	; 232
    2cf4:	9c 4f       	sbci	r25, 0xFC	; 252
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	4d 91       	ld	r20, X+
    2cfa:	5d 91       	ld	r21, X+
    2cfc:	6d 91       	ld	r22, X+
    2cfe:	7c 91       	ld	r23, X
    2d00:	c9 01       	movw	r24, r18
    2d02:	88 0f       	add	r24, r24
    2d04:	99 1f       	adc	r25, r25
    2d06:	88 0f       	add	r24, r24
    2d08:	99 1f       	adc	r25, r25
    2d0a:	88 5e       	subi	r24, 0xE8	; 232
    2d0c:	9c 4f       	sbci	r25, 0xFC	; 252
    2d0e:	dc 01       	movw	r26, r24
    2d10:	4d 93       	st	X+, r20
    2d12:	5d 93       	st	X+, r21
    2d14:	6d 93       	st	X+, r22
    2d16:	7c 93       	st	X, r23
    2d18:	13 97       	sbiw	r26, 0x03	; 3
	{
		if (Richting == Links)
		{
			long temp = WS2811[Groepstart+Groeplengte-3];
			WS2811[Groepstart +Groeplengte-3] = WS2811[Groepstart -1];
			for (uint8_t u= Groepstart -1; u< Groepstart +Groeplengte-4; u++)
    2d1a:	2e 2f       	mov	r18, r30
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	ef 5f       	subi	r30, 0xFF	; 255
    2d20:	2e 15       	cp	r18, r14
    2d22:	3f 05       	cpc	r19, r15
    2d24:	04 f3       	brlt	.-64     	; 0x2ce6 <WS2811_RotateGroup+0x12c>
			{
				WS2811[u] = WS2811[u+1];
			}
			WS2811[Groepstart +Groeplengte-4] = temp;
    2d26:	eb 81       	ldd	r30, Y+3	; 0x03
    2d28:	fc 81       	ldd	r31, Y+4	; 0x04
    2d2a:	40 82       	st	Z, r4
    2d2c:	51 82       	std	Z+1, r5	; 0x01
    2d2e:	62 82       	std	Z+2, r6	; 0x02
    2d30:	73 82       	std	Z+3, r7	; 0x03
    2d32:	3e c0       	rjmp	.+124    	; 0x2db0 <WS2811_RotateGroup+0x1f6>
		}
		else if (Richting == Rechts)
    2d34:	f2 e0       	ldi	r31, 0x02	; 2
    2d36:	df 16       	cp	r13, r31
    2d38:	d9 f5       	brne	.+118    	; 0x2db0 <WS2811_RotateGroup+0x1f6>
		{
			long temp = WS2811[Groepstart -1];
    2d3a:	a9 81       	ldd	r26, Y+1	; 0x01
    2d3c:	ba 81       	ldd	r27, Y+2	; 0x02
    2d3e:	4d 90       	ld	r4, X+
    2d40:	5d 90       	ld	r5, X+
    2d42:	6d 90       	ld	r6, X+
    2d44:	7c 90       	ld	r7, X
			WS2811[Groepstart -1] = WS2811[Groepstart +Groeplengte-3];
    2d46:	f1 01       	movw	r30, r2
    2d48:	80 81       	ld	r24, Z
    2d4a:	91 81       	ldd	r25, Z+1	; 0x01
    2d4c:	a2 81       	ldd	r26, Z+2	; 0x02
    2d4e:	b3 81       	ldd	r27, Z+3	; 0x03
    2d50:	e9 81       	ldd	r30, Y+1	; 0x01
    2d52:	fa 81       	ldd	r31, Y+2	; 0x02
    2d54:	80 83       	st	Z, r24
    2d56:	91 83       	std	Z+1, r25	; 0x01
    2d58:	a2 83       	std	Z+2, r26	; 0x02
    2d5a:	b3 83       	std	Z+3, r27	; 0x03
			for (uint8_t u=Groepstart +Groeplengte-3; u>Groepstart ; u--)
    2d5c:	2c 2d       	mov	r18, r12
    2d5e:	23 50       	subi	r18, 0x03	; 3
    2d60:	12 17       	cp	r17, r18
    2d62:	f8 f4       	brcc	.+62     	; 0x2da2 <WS2811_RotateGroup+0x1e8>
			{
				WS2811[u] = WS2811[u-1];
    2d64:	e2 2f       	mov	r30, r18
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	cf 01       	movw	r24, r30
    2d6a:	01 97       	sbiw	r24, 0x01	; 1
    2d6c:	88 0f       	add	r24, r24
    2d6e:	99 1f       	adc	r25, r25
    2d70:	88 0f       	add	r24, r24
    2d72:	99 1f       	adc	r25, r25
    2d74:	88 5e       	subi	r24, 0xE8	; 232
    2d76:	9c 4f       	sbci	r25, 0xFC	; 252
    2d78:	dc 01       	movw	r26, r24
    2d7a:	4d 91       	ld	r20, X+
    2d7c:	5d 91       	ld	r21, X+
    2d7e:	6d 91       	ld	r22, X+
    2d80:	7c 91       	ld	r23, X
    2d82:	13 97       	sbiw	r26, 0x03	; 3
    2d84:	cf 01       	movw	r24, r30
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	88 0f       	add	r24, r24
    2d8c:	99 1f       	adc	r25, r25
    2d8e:	88 5e       	subi	r24, 0xE8	; 232
    2d90:	9c 4f       	sbci	r25, 0xFC	; 252
    2d92:	fc 01       	movw	r30, r24
    2d94:	40 83       	st	Z, r20
    2d96:	51 83       	std	Z+1, r21	; 0x01
    2d98:	62 83       	std	Z+2, r22	; 0x02
    2d9a:	73 83       	std	Z+3, r23	; 0x03
		}
		else if (Richting == Rechts)
		{
			long temp = WS2811[Groepstart -1];
			WS2811[Groepstart -1] = WS2811[Groepstart +Groeplengte-3];
			for (uint8_t u=Groepstart +Groeplengte-3; u>Groepstart ; u--)
    2d9c:	21 50       	subi	r18, 0x01	; 1
    2d9e:	12 17       	cp	r17, r18
    2da0:	08 f3       	brcs	.-62     	; 0x2d64 <WS2811_RotateGroup+0x1aa>
			{
				WS2811[u] = WS2811[u-1];
			}
			
			WS2811[Groepstart ] = temp;
    2da2:	ad 81       	ldd	r26, Y+5	; 0x05
    2da4:	be 81       	ldd	r27, Y+6	; 0x06
    2da6:	4d 92       	st	X+, r4
    2da8:	5d 92       	st	X+, r5
    2daa:	6d 92       	st	X+, r6
    2dac:	7c 92       	st	X, r7
    2dae:	13 97       	sbiw	r26, 0x03	; 3
		}
			if (UpdateTijdensRotate = Ja)
			{
				WS2811_Update();
    2db0:	0e 94 42 13 	call	0x2684	; 0x2684 <WS2811_Update>
			}
		if (DelaytijdTijdensRotate != 0)
    2db4:	a1 14       	cp	r10, r1
    2db6:	b1 04       	cpc	r11, r1
    2db8:	81 f0       	breq	.+32     	; 0x2dda <WS2811_RotateGroup+0x220>
		{
			for (uint16_t delayTijd= 0; delayTijd<DelaytijdTijdensRotate-1; delayTijd++)
    2dba:	c5 01       	movw	r24, r10
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	69 f0       	breq	.+26     	; 0x2dda <WS2811_RotateGroup+0x220>
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2dc4:	ef e9       	ldi	r30, 0x9F	; 159
    2dc6:	ff e0       	ldi	r31, 0x0F	; 15
    2dc8:	31 97       	sbiw	r30, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <WS2811_RotateGroup+0x20e>
    2dcc:	00 c0       	rjmp	.+0      	; 0x2dce <WS2811_RotateGroup+0x214>
    2dce:	00 00       	nop
    2dd0:	2f 5f       	subi	r18, 0xFF	; 255
    2dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd4:	28 17       	cp	r18, r24
    2dd6:	39 07       	cpc	r19, r25
    2dd8:	a8 f3       	brcs	.-22     	; 0x2dc4 <WS2811_RotateGroup+0x20a>
	else if (Groep == Group4){
	 	Groeplengte = Group4_Length;
	 	Groepstart = Group4_Start;
	}
	
	for (uint8_t Frequentie=1; Frequentie<(AantalKeer+1); Frequentie++)
    2dda:	0f 5f       	subi	r16, 0xFF	; 255
    2ddc:	80 2f       	mov	r24, r16
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	88 15       	cp	r24, r8
    2de2:	99 05       	cpc	r25, r9
    2de4:	0c f4       	brge	.+2      	; 0x2de8 <WS2811_RotateGroup+0x22e>
    2de6:	65 cf       	rjmp	.-310    	; 0x2cb2 <WS2811_RotateGroup+0xf8>
				_delay_ms(1);
			}			
		}
		
	}
}
    2de8:	26 96       	adiw	r28, 0x06	; 6
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	df 91       	pop	r29
    2df6:	cf 91       	pop	r28
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	ff 90       	pop	r15
    2dfe:	ef 90       	pop	r14
    2e00:	df 90       	pop	r13
    2e02:	cf 90       	pop	r12
    2e04:	bf 90       	pop	r11
    2e06:	af 90       	pop	r10
    2e08:	9f 90       	pop	r9
    2e0a:	8f 90       	pop	r8
    2e0c:	7f 90       	pop	r7
    2e0e:	6f 90       	pop	r6
    2e10:	5f 90       	pop	r5
    2e12:	4f 90       	pop	r4
    2e14:	3f 90       	pop	r3
    2e16:	2f 90       	pop	r2
    2e18:	08 95       	ret

00002e1a <WS2811_RotateGroupUpdate>:

void WS2811_RotateGroupUpdate(uint8_t Groep, uint8_t AantalKeer, uint8_t Richting, uint8_t UpdateTijdensRotate, uint16_t DelaytijdTijdensRotate){
    2e1a:	0f 93       	push	r16
    2e1c:	1f 93       	push	r17
	WS2811_RotateGroup(Groep, AantalKeer, Richting, UpdateTijdensRotate, DelaytijdTijdensRotate);
    2e1e:	0e 94 dd 15 	call	0x2bba	; 0x2bba <WS2811_RotateGroup>
	WS2811_Update();
    2e22:	0e 94 42 13 	call	0x2684	; 0x2684 <WS2811_Update>
}
    2e26:	1f 91       	pop	r17
    2e28:	0f 91       	pop	r16
    2e2a:	08 95       	ret

00002e2c <WS2811_OneToEndGroupUpdate>:

void WS2811_OneToEndGroupUpdate(uint8_t Used_GroupStart, uint8_t Used_GroupLength, long Color){
    2e2c:	cf 92       	push	r12
    2e2e:	df 92       	push	r13
    2e30:	ef 92       	push	r14
    2e32:	ff 92       	push	r15
    2e34:	0f 93       	push	r16
    2e36:	1f 93       	push	r17
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	08 2f       	mov	r16, r24
    2e3e:	69 01       	movw	r12, r18
    2e40:	7a 01       	movw	r14, r20
	/*_delay_ms(100);*/
	for (uint8_t i=Used_GroupStart; i<(Used_GroupStart+Used_GroupLength); i++)
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	ec 01       	movw	r28, r24
    2e46:	c6 0f       	add	r28, r22
    2e48:	d1 1d       	adc	r29, r1
    2e4a:	8c 17       	cp	r24, r28
    2e4c:	9d 07       	cpc	r25, r29
    2e4e:	7c f4       	brge	.+30     	; 0x2e6e <WS2811_OneToEndGroupUpdate+0x42>
    2e50:	10 2f       	mov	r17, r16
	{
		WS2811_SetMid(Used_GroupStart, i, Color);
    2e52:	80 2f       	mov	r24, r16
    2e54:	61 2f       	mov	r22, r17
    2e56:	a7 01       	movw	r20, r14
    2e58:	96 01       	movw	r18, r12
    2e5a:	0e 94 41 14 	call	0x2882	; 0x2882 <WS2811_SetMid>
		/*_delay_ms(100);*/
		WS2811_Update();
    2e5e:	0e 94 42 13 	call	0x2684	; 0x2684 <WS2811_Update>
	WS2811_Update();
}

void WS2811_OneToEndGroupUpdate(uint8_t Used_GroupStart, uint8_t Used_GroupLength, long Color){
	/*_delay_ms(100);*/
	for (uint8_t i=Used_GroupStart; i<(Used_GroupStart+Used_GroupLength); i++)
    2e62:	1f 5f       	subi	r17, 0xFF	; 255
    2e64:	81 2f       	mov	r24, r17
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	8c 17       	cp	r24, r28
    2e6a:	9d 07       	cpc	r25, r29
    2e6c:	94 f3       	brlt	.-28     	; 0x2e52 <WS2811_OneToEndGroupUpdate+0x26>
		/*_delay_ms(100);*/
		WS2811_Update();
	}
	Used_GroupStart = 0;
	Used_GroupLength = 0;
}
    2e6e:	df 91       	pop	r29
    2e70:	cf 91       	pop	r28
    2e72:	1f 91       	pop	r17
    2e74:	0f 91       	pop	r16
    2e76:	ff 90       	pop	r15
    2e78:	ef 90       	pop	r14
    2e7a:	df 90       	pop	r13
    2e7c:	cf 90       	pop	r12
    2e7e:	08 95       	ret

00002e80 <WS2811_DebugTest>:
void WS2811_DebugTest(uint8_t StartLed, uint8_t LengteLed){
    2e80:	af 92       	push	r10
    2e82:	bf 92       	push	r11
    2e84:	cf 92       	push	r12
    2e86:	df 92       	push	r13
    2e88:	ef 92       	push	r14
    2e8a:	ff 92       	push	r15
    2e8c:	0f 93       	push	r16
    2e8e:	1f 93       	push	r17
    2e90:	cf 93       	push	r28
    2e92:	df 93       	push	r29
    2e94:	18 2f       	mov	r17, r24
    2e96:	e6 2e       	mov	r14, r22
		for (uint8_t u=StartLed; u<StartLed+LengteLed; u++)
    2e98:	a8 2e       	mov	r10, r24
    2e9a:	bb 24       	eor	r11, r11
    2e9c:	65 01       	movw	r12, r10
    2e9e:	c6 0e       	add	r12, r22
    2ea0:	d1 1c       	adc	r13, r1
    2ea2:	ac 14       	cp	r10, r12
    2ea4:	bd 04       	cpc	r11, r13
    2ea6:	cc f4       	brge	.+50     	; 0x2eda <WS2811_DebugTest+0x5a>
    2ea8:	c8 2f       	mov	r28, r24
		{
			WS2811_SetMidUpdate(u, 1, COLOR_PAARS, Neen);
    2eaa:	8c 2f       	mov	r24, r28
    2eac:	61 e0       	ldi	r22, 0x01	; 1
    2eae:	2f ef       	ldi	r18, 0xFF	; 255
    2eb0:	3f e5       	ldi	r19, 0x5F	; 95
    2eb2:	4f eb       	ldi	r20, 0xBF	; 191
    2eb4:	50 e0       	ldi	r21, 0x00	; 0
    2eb6:	02 e0       	ldi	r16, 0x02	; 2
    2eb8:	0e 94 a6 14 	call	0x294c	; 0x294c <WS2811_SetMidUpdate>
    2ebc:	8f ef       	ldi	r24, 0xFF	; 255
    2ebe:	96 e1       	ldi	r25, 0x16	; 22
    2ec0:	a1 e1       	ldi	r26, 0x11	; 17
    2ec2:	81 50       	subi	r24, 0x01	; 1
    2ec4:	90 40       	sbci	r25, 0x00	; 0
    2ec6:	a0 40       	sbci	r26, 0x00	; 0
    2ec8:	e1 f7       	brne	.-8      	; 0x2ec2 <WS2811_DebugTest+0x42>
    2eca:	00 c0       	rjmp	.+0      	; 0x2ecc <WS2811_DebugTest+0x4c>
    2ecc:	00 00       	nop
	}
	Used_GroupStart = 0;
	Used_GroupLength = 0;
}
void WS2811_DebugTest(uint8_t StartLed, uint8_t LengteLed){
		for (uint8_t u=StartLed; u<StartLed+LengteLed; u++)
    2ece:	cf 5f       	subi	r28, 0xFF	; 255
    2ed0:	8c 2f       	mov	r24, r28
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	8c 15       	cp	r24, r12
    2ed6:	9d 05       	cpc	r25, r13
    2ed8:	44 f3       	brlt	.-48     	; 0x2eaa <WS2811_DebugTest+0x2a>
		{
			WS2811_SetMidUpdate(u, 1, COLOR_PAARS, Neen);
			_delay_ms(350);
		}
		for (uint8_t u=StartLed+LengteLed-1; u>StartLed-1; u--)
    2eda:	d1 2f       	mov	r29, r17
    2edc:	d1 50       	subi	r29, 0x01	; 1
    2ede:	de 0d       	add	r29, r14
    2ee0:	75 01       	movw	r14, r10
    2ee2:	08 94       	sec
    2ee4:	e1 08       	sbc	r14, r1
    2ee6:	f1 08       	sbc	r15, r1
    2ee8:	8d 2f       	mov	r24, r29
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	e8 16       	cp	r14, r24
    2eee:	f9 06       	cpc	r15, r25
    2ef0:	0c f0       	brlt	.+2      	; 0x2ef4 <WS2811_DebugTest+0x74>
    2ef2:	4b c0       	rjmp	.+150    	; 0x2f8a <WS2811_DebugTest+0x10a>
    2ef4:	cd 2f       	mov	r28, r29
		{
			WS2811_SetMidUpdate(u, 1, COLOR_ROOD, Neen);
    2ef6:	8c 2f       	mov	r24, r28
    2ef8:	61 e0       	ldi	r22, 0x01	; 1
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	4f ef       	ldi	r20, 0xFF	; 255
    2f00:	50 e0       	ldi	r21, 0x00	; 0
    2f02:	02 e0       	ldi	r16, 0x02	; 2
    2f04:	0e 94 a6 14 	call	0x294c	; 0x294c <WS2811_SetMidUpdate>
    2f08:	8f ef       	ldi	r24, 0xFF	; 255
    2f0a:	96 e1       	ldi	r25, 0x16	; 22
    2f0c:	a1 e1       	ldi	r26, 0x11	; 17
    2f0e:	81 50       	subi	r24, 0x01	; 1
    2f10:	90 40       	sbci	r25, 0x00	; 0
    2f12:	a0 40       	sbci	r26, 0x00	; 0
    2f14:	e1 f7       	brne	.-8      	; 0x2f0e <WS2811_DebugTest+0x8e>
    2f16:	00 c0       	rjmp	.+0      	; 0x2f18 <WS2811_DebugTest+0x98>
    2f18:	00 00       	nop
		for (uint8_t u=StartLed; u<StartLed+LengteLed; u++)
		{
			WS2811_SetMidUpdate(u, 1, COLOR_PAARS, Neen);
			_delay_ms(350);
		}
		for (uint8_t u=StartLed+LengteLed-1; u>StartLed-1; u--)
    2f1a:	c1 50       	subi	r28, 0x01	; 1
    2f1c:	8c 2f       	mov	r24, r28
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	e8 16       	cp	r14, r24
    2f22:	f9 06       	cpc	r15, r25
    2f24:	44 f3       	brlt	.-48     	; 0x2ef6 <WS2811_DebugTest+0x76>
    2f26:	cd 2f       	mov	r28, r29
			WS2811_SetMidUpdate(u, 1, COLOR_ROOD, Neen);
			_delay_ms(350);
		}
		for (uint8_t u=StartLed+LengteLed-1; u>StartLed-1; u--)
		{
			WS2811_SetMidUpdate(u, 1, COLOR_GROEN, Neen);
    2f28:	8c 2f       	mov	r24, r28
    2f2a:	61 e0       	ldi	r22, 0x01	; 1
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	3f ef       	ldi	r19, 0xFF	; 255
    2f30:	40 e0       	ldi	r20, 0x00	; 0
    2f32:	50 e0       	ldi	r21, 0x00	; 0
    2f34:	02 e0       	ldi	r16, 0x02	; 2
    2f36:	0e 94 a6 14 	call	0x294c	; 0x294c <WS2811_SetMidUpdate>
    2f3a:	8f ef       	ldi	r24, 0xFF	; 255
    2f3c:	96 e1       	ldi	r25, 0x16	; 22
    2f3e:	a1 e1       	ldi	r26, 0x11	; 17
    2f40:	81 50       	subi	r24, 0x01	; 1
    2f42:	90 40       	sbci	r25, 0x00	; 0
    2f44:	a0 40       	sbci	r26, 0x00	; 0
    2f46:	e1 f7       	brne	.-8      	; 0x2f40 <WS2811_DebugTest+0xc0>
    2f48:	00 c0       	rjmp	.+0      	; 0x2f4a <WS2811_DebugTest+0xca>
    2f4a:	00 00       	nop
		for (uint8_t u=StartLed+LengteLed-1; u>StartLed-1; u--)
		{
			WS2811_SetMidUpdate(u, 1, COLOR_ROOD, Neen);
			_delay_ms(350);
		}
		for (uint8_t u=StartLed+LengteLed-1; u>StartLed-1; u--)
    2f4c:	c1 50       	subi	r28, 0x01	; 1
    2f4e:	8c 2f       	mov	r24, r28
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	e8 16       	cp	r14, r24
    2f54:	f9 06       	cpc	r15, r25
    2f56:	44 f3       	brlt	.-48     	; 0x2f28 <WS2811_DebugTest+0xa8>
    2f58:	cd 2f       	mov	r28, r29
			WS2811_SetMidUpdate(u, 1, COLOR_GROEN, Neen);
			_delay_ms(350);
		}
		for (uint8_t u=StartLed+LengteLed-1; u>StartLed-1; u--)
		{
			WS2811_SetMidUpdate(u, 1, COLOR_BLAUW, Neen);
    2f5a:	8c 2f       	mov	r24, r28
    2f5c:	61 e0       	ldi	r22, 0x01	; 1
    2f5e:	2f ef       	ldi	r18, 0xFF	; 255
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e0       	ldi	r20, 0x00	; 0
    2f64:	50 e0       	ldi	r21, 0x00	; 0
    2f66:	02 e0       	ldi	r16, 0x02	; 2
    2f68:	0e 94 a6 14 	call	0x294c	; 0x294c <WS2811_SetMidUpdate>
    2f6c:	8f ef       	ldi	r24, 0xFF	; 255
    2f6e:	96 e1       	ldi	r25, 0x16	; 22
    2f70:	a1 e1       	ldi	r26, 0x11	; 17
    2f72:	81 50       	subi	r24, 0x01	; 1
    2f74:	90 40       	sbci	r25, 0x00	; 0
    2f76:	a0 40       	sbci	r26, 0x00	; 0
    2f78:	e1 f7       	brne	.-8      	; 0x2f72 <WS2811_DebugTest+0xf2>
    2f7a:	00 c0       	rjmp	.+0      	; 0x2f7c <WS2811_DebugTest+0xfc>
    2f7c:	00 00       	nop
		for (uint8_t u=StartLed+LengteLed-1; u>StartLed-1; u--)
		{
			WS2811_SetMidUpdate(u, 1, COLOR_GROEN, Neen);
			_delay_ms(350);
		}
		for (uint8_t u=StartLed+LengteLed-1; u>StartLed-1; u--)
    2f7e:	c1 50       	subi	r28, 0x01	; 1
    2f80:	8c 2f       	mov	r24, r28
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	e8 16       	cp	r14, r24
    2f86:	f9 06       	cpc	r15, r25
    2f88:	44 f3       	brlt	.-48     	; 0x2f5a <WS2811_DebugTest+0xda>
		{
			WS2811_SetMidUpdate(u, 1, COLOR_BLAUW, Neen);
			_delay_ms(350);
		}
		for (uint8_t u=StartLed; u<StartLed+LengteLed; u++)
    2f8a:	ac 14       	cp	r10, r12
    2f8c:	bd 04       	cpc	r11, r13
    2f8e:	8c f5       	brge	.+98     	; 0x2ff2 <WS2811_DebugTest+0x172>
    2f90:	c1 2f       	mov	r28, r17
		{
			WS2811_SetMidUpdate(u, 1, COLOR_WIT, Neen);
    2f92:	8c 2f       	mov	r24, r28
    2f94:	61 e0       	ldi	r22, 0x01	; 1
    2f96:	2f ef       	ldi	r18, 0xFF	; 255
    2f98:	3f ef       	ldi	r19, 0xFF	; 255
    2f9a:	4f ef       	ldi	r20, 0xFF	; 255
    2f9c:	50 e0       	ldi	r21, 0x00	; 0
    2f9e:	02 e0       	ldi	r16, 0x02	; 2
    2fa0:	0e 94 a6 14 	call	0x294c	; 0x294c <WS2811_SetMidUpdate>
    2fa4:	8f ef       	ldi	r24, 0xFF	; 255
    2fa6:	96 e1       	ldi	r25, 0x16	; 22
    2fa8:	a1 e1       	ldi	r26, 0x11	; 17
    2faa:	81 50       	subi	r24, 0x01	; 1
    2fac:	90 40       	sbci	r25, 0x00	; 0
    2fae:	a0 40       	sbci	r26, 0x00	; 0
    2fb0:	e1 f7       	brne	.-8      	; 0x2faa <WS2811_DebugTest+0x12a>
    2fb2:	00 c0       	rjmp	.+0      	; 0x2fb4 <WS2811_DebugTest+0x134>
    2fb4:	00 00       	nop
		for (uint8_t u=StartLed+LengteLed-1; u>StartLed-1; u--)
		{
			WS2811_SetMidUpdate(u, 1, COLOR_BLAUW, Neen);
			_delay_ms(350);
		}
		for (uint8_t u=StartLed; u<StartLed+LengteLed; u++)
    2fb6:	cf 5f       	subi	r28, 0xFF	; 255
    2fb8:	8c 2f       	mov	r24, r28
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	8c 15       	cp	r24, r12
    2fbe:	9d 05       	cpc	r25, r13
    2fc0:	44 f3       	brlt	.-48     	; 0x2f92 <WS2811_DebugTest+0x112>
    2fc2:	c1 2f       	mov	r28, r17
			_delay_ms(350);
		}
		
		for (uint8_t u=StartLed; u<StartLed+LengteLed; u++)
		{
			WS2811_SetMidUpdate(u, 1, COLOR_UIT, Neen);
    2fc4:	8c 2f       	mov	r24, r28
    2fc6:	61 e0       	ldi	r22, 0x01	; 1
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	a9 01       	movw	r20, r18
    2fce:	02 e0       	ldi	r16, 0x02	; 2
    2fd0:	0e 94 a6 14 	call	0x294c	; 0x294c <WS2811_SetMidUpdate>
    2fd4:	8f ef       	ldi	r24, 0xFF	; 255
    2fd6:	96 e1       	ldi	r25, 0x16	; 22
    2fd8:	a1 e1       	ldi	r26, 0x11	; 17
    2fda:	81 50       	subi	r24, 0x01	; 1
    2fdc:	90 40       	sbci	r25, 0x00	; 0
    2fde:	a0 40       	sbci	r26, 0x00	; 0
    2fe0:	e1 f7       	brne	.-8      	; 0x2fda <WS2811_DebugTest+0x15a>
    2fe2:	00 c0       	rjmp	.+0      	; 0x2fe4 <WS2811_DebugTest+0x164>
    2fe4:	00 00       	nop
		{
			WS2811_SetMidUpdate(u, 1, COLOR_WIT, Neen);
			_delay_ms(350);
		}
		
		for (uint8_t u=StartLed; u<StartLed+LengteLed; u++)
    2fe6:	cf 5f       	subi	r28, 0xFF	; 255
    2fe8:	8c 2f       	mov	r24, r28
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	8c 15       	cp	r24, r12
    2fee:	9d 05       	cpc	r25, r13
    2ff0:	4c f3       	brlt	.-46     	; 0x2fc4 <WS2811_DebugTest+0x144>
		{
			WS2811_SetMidUpdate(u, 1, COLOR_UIT, Neen);
			_delay_ms(350);
		}
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	1f 91       	pop	r17
    2ff8:	0f 91       	pop	r16
    2ffa:	ff 90       	pop	r15
    2ffc:	ef 90       	pop	r14
    2ffe:	df 90       	pop	r13
    3000:	cf 90       	pop	r12
    3002:	bf 90       	pop	r11
    3004:	af 90       	pop	r10
    3006:	08 95       	ret

00003008 <_exit>:
    3008:	f8 94       	cli

0000300a <__stop_program>:
    300a:	ff cf       	rjmp	.-2      	; 0x300a <__stop_program>
